{"file_contents":{"src/app/dashboard/profile/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  User, \n  Mail, \n  Phone, \n  MapPin, \n  Building2, \n  Edit, \n  Save, \n  X, \n  Shield, \n  Star, \n  TrendingUp, \n  Award, \n  CheckCircle, \n  AlertCircle,\n  Clock,\n  Target,\n  BarChart3\n} from 'lucide-react'\n\ninterface UserProfile {\n  id: string\n  contactPerson: string\n  email: string\n  phone: string\n  companyName: string\n  postalCode: string\n  address: string\n  userType: string\n  createdAt: string\n  creditScore?: number\n  rating?: number\n  totalShipments?: number\n  completedShipments?: number\n  reliabilityScore?: number\n  responseTime?: number\n  specialties?: string[]\n  achievements?: string[]\n  riskFactors?: string[]\n}\n\ninterface CreditScoreBreakdown {\n  paymentHistory: number\n  transactionVolume: number\n  responseTime: number\n  completionRate: number\n  userFeedback: number\n  accountAge: number\n}\n\nexport default function ProfilePage() {\n  const [user, setUser] = useState<UserProfile | null>(null)\n  const [editing, setEditing] = useState(false)\n  const [loading, setLoading] = useState(true)\n  const [formData, setFormData] = useState({\n    contactPerson: '',\n    email: '',\n    phone: '',\n    companyName: '',\n    postalCode: '',\n    address: ''\n  })\n\n  useEffect(() => {\n    loadUserProfile()\n  }, [])\n\n  const loadUserProfile = () => {\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      const userProfile = JSON.parse(userData)\n      // 信用スコア関連のデータを追加（実際のアプリではAPIから取得）\n      const enhancedProfile = {\n        ...userProfile,\n        creditScore: userProfile.creditScore || 85,\n        rating: userProfile.rating || 4.2,\n        totalShipments: userProfile.totalShipments || 45,\n        completedShipments: userProfile.completedShipments || 42,\n        reliabilityScore: userProfile.reliabilityScore || 88,\n        responseTime: userProfile.responseTime || 25,\n        specialties: userProfile.specialties || ['一般貨物', '関東圏', '急便対応'],\n        achievements: userProfile.achievements || ['新規登録', '初回取引完了', '5件取引達成'],\n        riskFactors: userProfile.riskFactors || []\n      }\n      setUser(enhancedProfile)\n      setFormData({\n        contactPerson: userProfile.contactPerson || '',\n        email: userProfile.email || '',\n        phone: userProfile.phone || '',\n        companyName: userProfile.companyName || '',\n        postalCode: userProfile.postalCode || '',\n        address: userProfile.address || ''\n      })\n    }\n    setLoading(false)\n  }\n\n  const handleEdit = () => {\n    setEditing(true)\n  }\n\n  const handleCancel = () => {\n    setEditing(false)\n    loadUserProfile()\n  }\n\n  const handleSave = async () => {\n    try {\n      // ここでAPIを呼び出してプロフィールを更新\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/user/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(formData)\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to update profile')\n      }\n\n      const updatedUser = { ...user, ...formData }\n      setUser(updatedUser as UserProfile)\n      localStorage.setItem('user', JSON.stringify(updatedUser))\n      setEditing(false)\n    } catch (error) {\n      console.error('Error updating profile:', error)\n      alert('プロフィールの更新に失敗しました')\n    }\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const getCreditScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-600 bg-green-100'\n    if (score >= 80) return 'text-blue-600 bg-blue-100'\n    if (score >= 70) return 'text-yellow-600 bg-yellow-100'\n    return 'text-red-600 bg-red-100'\n  }\n\n  const getCreditScoreLevel = (score: number) => {\n    if (score >= 90) return '優秀'\n    if (score >= 80) return '良好'\n    if (score >= 70) return '普通'\n    return '要改善'\n  }\n\n  const getCreditScoreBreakdown = (): CreditScoreBreakdown => {\n    return {\n      paymentHistory: 95,\n      transactionVolume: 80,\n      responseTime: 75,\n      completionRate: 93,\n      userFeedback: 88,\n      accountAge: 70\n    }\n  }\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'\n        }`}\n      />\n    ))\n  }\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-gray-600 text-lg\">読み込み中...</div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">プロフィール</h1>\n            <p className=\"text-gray-600\">アカウント情報を管理できます</p>\n          </div>\n          <div className=\"flex space-x-2\">\n            {editing ? (\n              <>\n                <button\n                  onClick={handleSave}\n                  className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  <span>保存</span>\n                </button>\n                <button\n                  onClick={handleCancel}\n                  className=\"bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 flex items-center space-x-2\"\n                >\n                  <X className=\"h-4 w-4\" />\n                  <span>キャンセル</span>\n                </button>\n              </>\n            ) : (\n              <button\n                onClick={handleEdit}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n              >\n                <Edit className=\"h-4 w-4\" />\n                <span>編集</span>\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* プロフィールカード */}\n        <div className=\"lg:col-span-1\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"text-center\">\n              <div className=\"w-24 h-24 bg-gray-300 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <User className=\"h-12 w-12 text-gray-600\" />\n              </div>\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                {user?.contactPerson}\n              </h2>\n              <p className=\"text-gray-600 mb-4\">{user?.companyName}</p>\n              <div className=\"text-sm text-gray-500\">\n                <p>アカウント種別: {user?.userType === 'SHIPPER' ? '荷主' : '運送会社'}</p>\n                <p>登録日: {user?.createdAt ? new Date(user.createdAt).toLocaleDateString('ja-JP') : '-'}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* 信用スコアカード */}\n          <div className=\"bg-white rounded-lg shadow-sm border p-6 mt-6\">\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <Shield className=\"h-6 w-6 text-blue-600 mr-2\" />\n                <h3 className=\"text-lg font-semibold text-gray-900\">信用スコア</h3>\n              </div>\n              \n              <div className=\"mb-4\">\n                <div className={`inline-flex items-center px-4 py-2 rounded-full text-lg font-bold ${getCreditScoreColor(user?.creditScore || 0)}`}>\n                  {user?.creditScore}点\n                </div>\n                <p className=\"text-sm text-gray-600 mt-2\">\n                  レベル: {getCreditScoreLevel(user?.creditScore || 0)}\n                </p>\n              </div>\n\n              {/* 評価 */}\n              <div className=\"mb-4\">\n                <div className=\"flex items-center justify-center mb-2\">\n                  {renderStars(user?.rating || 0)}\n                  <span className=\"ml-2 text-sm text-gray-600\">({user?.rating})</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">ユーザー評価</p>\n              </div>\n\n              {/* 実績 */}\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-gray-600\">取引実績</p>\n                  <p className=\"font-semibold text-gray-900\">\n                    {user?.completedShipments}/{user?.totalShipments}件\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-gray-600\">信頼性</p>\n                  <p className=\"font-semibold text-gray-900\">{user?.reliabilityScore}%</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* 専門分野・実績 */}\n          <div className=\"bg-white rounded-lg shadow-sm border p-6 mt-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n              <Award className=\"h-5 w-5 mr-2\" />\n              専門分野・実績\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-700 mb-2\">専門分野</p>\n                <div className=\"flex flex-wrap gap-1\">\n                  {user?.specialties?.map((specialty, idx) => (\n                    <span key={idx} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                      {specialty}\n                    </span>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-sm font-medium text-gray-700 mb-2\">実績バッジ</p>\n                <div className=\"flex flex-wrap gap-1\">\n                  {user?.achievements?.map((achievement, idx) => (\n                    <span key={idx} className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full flex items-center\">\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\n                      {achievement}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 詳細情報 */}\n        <div className=\"lg:col-span-2\">\n          {/* 信用スコア詳細分析 */}\n          <div className=\"bg-white rounded-lg shadow-sm border mb-6\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2\" />\n                信用スコア詳細分析\n              </h3>\n            </div>\n            \n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {(() => {\n                  const breakdown = getCreditScoreBreakdown()\n                  return Object.entries(breakdown).map(([key, value]) => {\n                    const labels = {\n                      paymentHistory: '支払い履歴',\n                      transactionVolume: '取引量',\n                      responseTime: 'レスポンス時間',\n                      completionRate: '完了率',\n                      userFeedback: 'ユーザーフィードバック',\n                      accountAge: 'アカウント年数'\n                    }\n                    return (\n                      <div key={key} className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium text-gray-700\">{labels[key as keyof typeof labels]}</span>\n                          <span className=\"text-sm font-semibold text-gray-900\">{value}点</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div \n                            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                            style={{ width: `${value}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    )\n                  })\n                })()}\n              </div>\n              \n              <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center\">\n                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n                  スコア向上のヒント\n                </h4>\n                <ul className=\"text-sm text-gray-700 space-y-1\">\n                  <li>• 迅速なレスポンスで取引相手の信頼を獲得しましょう</li>\n                  <li>• 定期的な取引で取引量を増やしましょう</li>\n                  <li>• 高品質なサービスでユーザー評価を向上させましょう</li>\n                  <li>• プロフィール情報を充実させて信頼性を高めましょう</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-sm border\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">基本情報</h3>\n            </div>\n            \n            <div className=\"p-6 space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <User className=\"h-4 w-4 inline mr-2\" />\n                    担当者名\n                  </label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.contactPerson}\n                      onChange={(e) => handleInputChange('contactPerson', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.contactPerson}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Mail className=\"h-4 w-4 inline mr-2\" />\n                    メールアドレス\n                  </label>\n                  {editing ? (\n                    <input\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.email}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Phone className=\"h-4 w-4 inline mr-2\" />\n                    電話番号\n                  </label>\n                  {editing ? (\n                    <input\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => handleInputChange('phone', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.phone}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Building2 className=\"h-4 w-4 inline mr-2\" />\n                    会社名\n                  </label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.companyName}\n                      onChange={(e) => handleInputChange('companyName', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.companyName}</p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  <MapPin className=\"h-4 w-4 inline mr-2\" />\n                  郵便番号\n                </label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.postalCode}\n                    onChange={(e) => handleInputChange('postalCode', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"例: 123-4567\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{user?.postalCode || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  <MapPin className=\"h-4 w-4 inline mr-2\" />\n                  住所\n                </label>\n                {editing ? (\n                  <textarea\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    rows={3}\n                    placeholder=\"住所を入力してください\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{user?.address || '未設定'}</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":18618},"src/lib/prisma.ts":{"content":"import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query', 'error', 'warn'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport default prisma\n\n","size_bytes":331},"src/app/api/shipments/search/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    \n    // 検索パラメータを取得\n    const query = searchParams.get('q') || ''\n    const pickupPrefecture = searchParams.get('pickupPrefecture') || ''\n    const deliveryPrefecture = searchParams.get('deliveryPrefecture') || ''\n    const vehicleType = searchParams.get('vehicleType') || ''\n    const status = searchParams.get('status') || ''\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '20')\n    const offset = (page - 1) * limit\n\n    // 検索条件を構築\n    const where: any = {}\n\n    // キーワード検索（荷物名、説明、住所など）\n    if (query) {\n      where.OR = [\n        { cargoName: { contains: query, mode: 'insensitive' } },\n        { cargoDescription: { contains: query, mode: 'insensitive' } },\n        { pickupAddress: { contains: query, mode: 'insensitive' } },\n        { deliveryAddress: { contains: query, mode: 'insensitive' } },\n        { pickupCity: { contains: query, mode: 'insensitive' } },\n        { deliveryCity: { contains: query, mode: 'insensitive' } }\n      ]\n    }\n\n    // 出発地都道府県\n    if (pickupPrefecture) {\n      where.pickupPrefecture = pickupPrefecture\n    }\n\n    // 到着地都道府県\n    if (deliveryPrefecture) {\n      where.deliveryPrefecture = deliveryPrefecture\n    }\n\n    // 車両タイプ\n    if (vehicleType) {\n      where.requiredVehicleType = vehicleType\n    }\n\n    // ステータス\n    if (status) {\n      where.status = status\n    }\n\n    // 荷物を検索\n    const [shipments, totalCount] = await Promise.all([\n      prisma.shipment.findMany({\n        where,\n        include: {\n          shipper: {\n            select: {\n              id: true,\n              companyName: true,\n              contactPerson: true,\n              phone: true,\n              email: true\n            }\n          }\n        },\n        orderBy: { createdAt: 'desc' },\n        skip: offset,\n        take: limit\n      }),\n      prisma.shipment.count({ where })\n    ])\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        shipments,\n        pagination: {\n          page,\n          limit,\n          totalCount,\n          totalPages: Math.ceil(totalCount / limit)\n        }\n      }\n    })\n  } catch (error) {\n    console.error('Error searching shipments:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to search shipments' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":2695},"src/hooks/useStats.ts":{"content":"import { useState, useEffect } from 'react'\n\nexport const useStats = () => {\n  const [stats, setStats] = useState({ shipmentCount: 0, vehicleCount: 0 })\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadStats()\n  }, [])\n\n  const loadStats = async () => {\n    try {\n      const response = await fetch('/api/stats')\n      if (!response.ok) throw new Error('Failed to load stats')\n      \n      const data = await response.json()\n      setStats(data.data)\n    } catch (error) {\n      console.error('Error loading stats:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return { stats, loading, refetch: loadStats }\n}\n","size_bytes":652},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          200: '#bae6fd',\n          300: '#7dd3fc',\n          400: '#38bdf8',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          800: '#075985',\n          900: '#0c4a6e',\n        },\n      },\n      backgroundImage: {\n        'gradient-blue': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        'gradient-ocean': 'linear-gradient(to right, #2E3192, #1BFFFF)',\n        'gradient-sky': 'linear-gradient(to bottom right, #E0F7FF, #FFFFFF)',\n      },\n    },\n  },\n  plugins: [],\n}\n\n","size_bytes":848},"src/app/api/offers/route.ts":{"content":"import { NextRequest } from 'next/server'\nexport const dynamic = 'force-dynamic'\nimport { getUserFromRequest } from '@/lib/auth'\nimport { createOfferSchema } from '@/lib/validators'\nimport {\n  successResponse,\n  errorResponse,\n  unauthorizedResponse,\n  forbiddenResponse,\n  notFoundResponse,\n} from '@/lib/api-response'\nimport prisma from '@/lib/prisma'\n\n// オファー一覧取得\nexport async function GET(request: NextRequest) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    const { searchParams } = new URL(request.url)\n    const shipmentId = searchParams.get('shipmentId')\n    \n    const where: any = {}\n    \n    // 運送会社の場合は自分のオファーのみ表示\n    if (user.userType === 'CARRIER') {\n      where.carrierId = user.userId\n    }\n    \n    // 特定の配送案件のオファーを取得\n    if (shipmentId) {\n      where.shipmentId = shipmentId\n    }\n    \n    const offers = await prisma.offer.findMany({\n      where,\n      include: {\n        shipment: {\n          include: {\n            shipper: {\n              select: {\n                id: true,\n                companyName: true,\n                contactPerson: true,\n              },\n            },\n          },\n        },\n        carrier: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n            phone: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    })\n    \n    return successResponse(offers)\n  } catch (error) {\n    console.error('Get offers error:', error)\n    return errorResponse('オファーの取得に失敗しました', 500)\n  }\n}\n\n// オファー作成\nexport async function POST(request: NextRequest) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    // 運送会社のみ作成可能\n    if (user.userType !== 'CARRIER') {\n      return forbiddenResponse('運送会社のみがオファーを作成できます')\n    }\n    \n    const body = await request.json()\n    \n    // バリデーション\n    const validatedData = createOfferSchema.parse(body)\n    \n    // 配送案件の存在確認\n    const shipment = await prisma.shipment.findUnique({\n      where: { id: validatedData.shipmentId },\n    })\n    \n    if (!shipment) {\n      return notFoundResponse('配送案件が見つかりません')\n    }\n    \n    // ステータスチェック\n    if (shipment.status !== 'OPEN') {\n      return errorResponse('この配送案件は既に募集が終了しています')\n    }\n    \n    // 重複オファーチェック\n    const existingOffer = await prisma.offer.findFirst({\n      where: {\n        shipmentId: validatedData.shipmentId,\n        carrierId: user.userId,\n      },\n    })\n    \n    if (existingOffer) {\n      return errorResponse('既にこの配送案件にオファーを送信しています')\n    }\n    \n    // オファー作成\n    const offer = await prisma.offer.create({\n      data: {\n        shipmentId: validatedData.shipmentId,\n        carrierId: user.userId,\n        proposedPrice: validatedData.proposedPrice,\n        message: validatedData.message,\n        vehicleInfo: validatedData.vehicleInfo,\n        estimatedPickupTime: validatedData.estimatedPickupTime,\n        estimatedDeliveryTime: validatedData.estimatedDeliveryTime,\n      },\n      include: {\n        carrier: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n            phone: true,\n          },\n        },\n        shipment: {\n          select: {\n            id: true,\n            cargoName: true,\n            pickupPrefecture: true,\n            deliveryPrefecture: true,\n          },\n        },\n      },\n    })\n    \n    return successResponse(offer, 201)\n  } catch (error: any) {\n    if (error.name === 'ZodError') {\n      return errorResponse(error.errors[0].message)\n    }\n    console.error('Create offer error:', error)\n    return errorResponse('オファーの作成に失敗しました', 500)\n  }\n}\n\n","size_bytes":4125},"src/app/dashboard/saved-shipments/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { Bookmark, Package, MapPin, Calendar, Weight, Truck, DollarSign, Building2, User, Phone } from 'lucide-react'\n\nexport default function SavedShipmentsPage() {\n  const [savedShipments, setSavedShipments] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadSavedShipments()\n  }, [])\n\n  const loadSavedShipments = async () => {\n    setLoading(true)\n    try {\n      const savedIds = JSON.parse(localStorage.getItem('savedShipments') || '[]')\n      if (savedIds.length === 0) {\n        setSavedShipments([])\n        return\n      }\n\n      // 保存された荷物の詳細を取得\n      const response = await fetch('/api/shipments/details', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ ids: savedIds })\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch saved shipment details')\n      }\n\n      const result = await response.json()\n      setSavedShipments(result.data)\n    } catch (error) {\n      console.error('Error loading saved shipments:', error)\n      // 無効な保存IDをクリア\n      localStorage.removeItem('savedShipments')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleRemoveSaved = (shipmentId: string) => {\n    setSavedShipments(prev => prev.filter(s => s.id !== shipmentId))\n    const updatedSavedIds = JSON.parse(localStorage.getItem('savedShipments') || '[]')\n      .filter((id: string) => id !== shipmentId)\n    localStorage.setItem('savedShipments', JSON.stringify(updatedSavedIds))\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'OPEN': return 'bg-blue-100 text-blue-800'\n      case 'MATCHED': return 'bg-green-100 text-green-800'\n      case 'IN_TRANSIT': return 'bg-yellow-100 text-yellow-800'\n      case 'DELIVERED': return 'bg-gray-100 text-gray-800'\n      case 'CANCELLED': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">保存した荷物</h1>\n        <p className=\"text-gray-600\">お気に入りに保存した荷物の一覧です</p>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">保存した荷物一覧</h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : savedShipments.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <Bookmark className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>保存した荷物はありません</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {savedShipments.map(shipment => (\n              <div key={shipment.id} className=\"p-6 hover:bg-gray-50\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h3 className=\"text-lg font-bold text-blue-700\">{shipment.cargoName}</h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(shipment.status)}`}>\n                      {shipment.status === 'OPEN' && '募集中'}\n                      {shipment.status === 'MATCHED' && 'マッチング済み'}\n                      {shipment.status === 'IN_TRANSIT' && '輸送中'}\n                      {shipment.status === 'DELIVERED' && '配送完了'}\n                      {shipment.status === 'CANCELLED' && 'キャンセル'}\n                    </span>\n                    <button\n                      onClick={() => handleRemoveSaved(shipment.id)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <Bookmark className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n                <p className=\"text-gray-600 text-sm mb-3\">{shipment.cargoDescription}</p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-700 mb-4\">\n                  <div className=\"flex items-center\"><MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />発地: {shipment.pickupPrefecture} {shipment.pickupCity}</div>\n                  <div className=\"flex items-center\"><MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />着地: {shipment.deliveryPrefecture} {shipment.deliveryCity}</div>\n                  <div className=\"flex items-center\"><Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />発日時: {new Date(shipment.pickupDate).toLocaleDateString()} {shipment.pickupTimeFrom}</div>\n                  <div className=\"flex items-center\"><Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />着日時: {new Date(shipment.deliveryDate).toLocaleDateString()} {shipment.deliveryTimeFrom}</div>\n                  <div className=\"flex items-center\"><Weight className=\"h-4 w-4 mr-2 text-gray-500\" />重量: {shipment.cargoWeight} kg</div>\n                  <div className=\"flex items-center\"><Truck className=\"h-4 w-4 mr-2 text-gray-500\" />車種: {shipment.requiredVehicleType}</div>\n                  <div className=\"flex items-center\"><DollarSign className=\"h-4 w-4 mr-2 text-gray-500\" />予算: {shipment.budget.toLocaleString()} 円</div>\n                </div>\n\n                <div className=\"border-t border-gray-100 pt-3\">\n                  <h4 className=\"font-semibold text-gray-800 mb-2\">荷主情報</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-700\">\n                    <div className=\"flex items-center\"><Building2 className=\"h-4 w-4 mr-2 text-gray-500\" />会社名: {shipment.shipper.companyName}</div>\n                    <div className=\"flex items-center\"><User className=\"h-4 w-4 mr-2 text-gray-500\" />担当者: {shipment.shipper.contactPerson}</div>\n                    <div className=\"flex items-center\"><Phone className=\"h-4 w-4 mr-2 text-gray-500\" />電話番号: {shipment.shipper.phone}</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":6559},"README.md":{"content":"# SIN JAPAN LOGI - 物流マッチングプラットフォーム\n\n荷主と運送会社をつなぐ、次世代の物流マッチングプラットフォーム。\n\n![SIN JAPAN LOGI](public/logo.png)\n\n## 🚀 デプロイ済み\n\n**本番環境**: [https://sin-japan-logi.vercel.app](https://sin-japan-logi.vercel.app)\n\n**開発環境**: http://localhost:3050\n\n## 🚀 特徴\n\n- **簡単な案件投稿**: 荷主は数分で配送案件を投稿可能\n- **効率的なマッチング**: 運送会社は条件に合う案件を検索し、自由にオファーを提案\n- **コスト削減**: 複数の運送会社から相見積もりが可能\n- **リアルタイム更新**: 案件のステータスやオファー状況をリアルタイムで確認\n- **2つのユーザータイプ**: 荷主と運送会社それぞれに最適化されたUI\n\n## 🛠 技術スタック\n\n### フロントエンド\n- **Next.js 14**: React フレームワーク\n- **TypeScript**: 型安全な開発\n- **Tailwind CSS**: モダンなUIデザイン\n- **Lucide React**: アイコンライブラリ\n- **date-fns**: 日付フォーマット\n\n### バックエンド\n- **Next.js API Routes**: サーバーレスAPIエンドポイント\n- **Prisma**: データベースORM\n- **SQLite**: リレーショナルデータベース\n- **JWT**: 認証トークン\n- **bcryptjs**: パスワードハッシュ化\n\n## 📋 前提条件\n\n- Node.js 18.x 以上\n- npm または yarn\n\n## 🚀 セットアップ\n\n### 1. リポジトリのクローン\n\n```bash\ngit clone <repository-url>\ncd \"SIN JAPAN LOGI\"\n```\n\n### 2. 依存パッケージのインストール\n\n```bash\nnpm install\n```\n\n### 3. 環境変数の設定\n\n`.env` ファイルを作成します：\n\n```env\n# Database (SQLite)\nDATABASE_URL=\"file:./dev.db\"\n\n# JWT Secret (ランダムな文字列を生成してください)\nJWT_SECRET=\"your-secret-key-change-this-in-production\"\n```\n\n### 4. データベースのセットアップ\n\n```bash\n# Prisma クライアントの生成\nnpm run prisma:generate\n\n# データベースマイグレーション\nnpm run prisma:migrate\n```\n\n### 5. テストアカウントの作成\n\n```bash\nnode scripts/add-test-users.js\n```\n\n以下のテストアカウントが作成されます：\n\n**荷主アカウント**\n- ID: `info@sinjapan.jp`\n- PASS: `Kazuya8008`\n\n**運送会社アカウント**\n- ID: `carrier@sinjapan.jp`\n- PASS: `Kazuya8008`\n\n**管理者アカウント**\n- ID: `info@sinjapan.jp`\n- PASS: `Kazuya8008`\n- URL: http://localhost:3050/admin\n\n### 6. 開発サーバーの起動\n\n```bash\nnpm run dev\n```\n\nブラウザで http://localhost:3050 にアクセスしてください。\n\n## 📚 主な機能\n\n### 荷主向け機能\n\n- ✅ 会員登録・ログイン\n- ✅ 配送案件の投稿\n- ✅ 投稿した案件の管理\n- ✅ 運送会社からのオファー受信\n- ✅ オファーの承認・拒否\n- ✅ マッチング後の運送会社情報確認\n\n### 運送会社向け機能\n\n- ✅ 会員登録・ログイン\n- ✅ 配送案件の検索・閲覧\n- ✅ 条件でのフィルタリング（集荷地、配送先など）\n- ✅ 案件へのオファー送信\n- ✅ 送信したオファーの管理\n- ✅ マッチング後の荷主情報確認\n\n## 🗂 プロジェクト構造\n\n```\nSIN JAPAN LOGI/\n├── prisma/\n│   └── schema.prisma          # データベーススキーマ\n├── src/\n│   ├── app/                   # Next.js App Router\n│   │   ├── api/              # APIエンドポイント\n│   │   │   ├── auth/        # 認証API\n│   │   │   ├── shipments/   # 配送案件API\n│   │   │   └── offers/      # オファーAPI\n│   │   ├── dashboard/        # ダッシュボードページ\n│   │   ├── login/           # ログインページ\n│   │   ├── register/        # 登録ページ\n│   │   ├── shipments/       # 配送案件ページ\n│   │   └── offers/          # オファーページ\n│   ├── components/           # 再利用可能なコンポーネント\n│   └── lib/                 # ユーティリティ関数\n│       ├── prisma.ts        # Prismaクライアント\n│       ├── auth.ts          # 認証ヘルパー\n│       ├── validators.ts    # バリデーションスキーマ\n│       └── api-response.ts  # APIレスポンスヘルパー\n├── package.json\n├── tsconfig.json\n├── tailwind.config.js\n└── README.md\n```\n\n## 🔐 認証フロー\n\n1. ユーザーが登録/ログイン\n2. JWTトークンが発行される\n3. トークンはローカルストレージに保存\n4. 以降のAPIリクエストでトークンを使用\n5. サーバー側でトークンを検証してユーザー情報を取得\n\n## 🎨 UIデザイン\n\n- レスポンシブデザイン対応\n- モダンでクリーンなインターフェース\n- 直感的なナビゲーション\n- アクセシビリティに配慮\n\n## 📊 データモデル\n\n### User（ユーザー）\n- 荷主（SHIPPER）または運送会社（CARRIER）\n- 会社情報、連絡先情報\n\n### Shipment（配送案件）\n- 荷物情報（名前、重量、容積など）\n- 集荷情報（住所、日時など）\n- 配送情報（住所、日時など）\n- 要求事項（車両タイプ、特別な要件など）\n- ステータス管理\n\n### Offer（オファー）\n- 運送会社から荷主へのオファー\n- 提案金額\n- メッセージ\n- ステータス管理\n\n## 🚢 デプロイ\n\n### Vercelへのデプロイ\n\n```bash\n# Vercel CLIのインストール\nnpm install -g vercel\n\n# デプロイ\nvercel\n```\n\n### 環境変数の設定\n\nVercelダッシュボードで以下の環境変数を設定してください：\n\n- `DATABASE_URL`\n- `JWT_SECRET`\n- `NEXTAUTH_URL`\n- `NEXTAUTH_SECRET`\n\n## 🛠 開発コマンド\n\n```bash\n# 開発サーバー起動\nnpm run dev\n\n# 本番ビルド\nnpm run build\n\n# 本番サーバー起動\nnpm start\n\n# Prisma Studio（データベースGUI）\nnpm run prisma:studio\n\n# データベースマイグレーション\nnpm run prisma:migrate\n\n# Linter実行\nnpm run lint\n```\n\n## 📝 API エンドポイント\n\n### 認証\n- `POST /api/auth/register` - ユーザー登録\n- `POST /api/auth/login` - ログイン\n- `GET /api/auth/me` - 現在のユーザー情報取得\n\n### 配送案件\n- `GET /api/shipments` - 案件一覧取得\n- `POST /api/shipments` - 案件作成（荷主のみ）\n- `GET /api/shipments/[id]` - 案件詳細取得\n- `PATCH /api/shipments/[id]` - 案件更新\n- `DELETE /api/shipments/[id]` - 案件削除\n\n### オファー\n- `GET /api/offers` - オファー一覧取得\n- `POST /api/offers` - オファー作成（運送会社のみ）\n- `POST /api/offers/[id]/accept` - オファー承認（荷主のみ）\n- `POST /api/offers/[id]/reject` - オファー拒否（荷主のみ）\n\n## 🤝 貢献\n\nプルリクエストを歓迎します。大きな変更の場合は、まずissueを開いて変更内容を議論してください。\n\n## 📄 ライセンス\n\nMIT License\n\n## 👥 作成者\n\nSIN JAPAN LOGI Development Team\n\n## 📞 サポート\n\n問題が発生した場合は、GitHubのIssuesページで報告してください。\n\n---\n\n© 2025 SIN JAPAN LOGI. All rights reserved.\n\n","size_bytes":7284},"src/app/dashboard/my-posts/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { Package, Plus, Edit, Trash2, Eye, Calendar, MapPin, Weight, DollarSign, Truck } from 'lucide-react'\n\ninterface MyPost {\n  id: string\n  type: 'shipment' | 'vehicle'\n  title: string\n  description: string\n  status: string\n  createdAt: string\n  updatedAt: string\n  data: any\n}\n\nexport default function MyPostsPage() {\n  const [posts, setPosts] = useState<MyPost[]>([])\n  const [loading, setLoading] = useState(true)\n  const [activeTab, setActiveTab] = useState<'shipments' | 'vehicles'>('shipments')\n\n  useEffect(() => {\n    loadMyPosts()\n  }, [])\n\n  const loadMyPosts = async () => {\n    setLoading(true)\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/user/my-posts', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to load posts')\n      }\n\n      const data = await response.json()\n      setPosts(data.data || [])\n    } catch (error) {\n      console.error('Error loading posts:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('この投稿を削除しますか？')) return\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch(`/api/user/my-posts/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to delete post')\n      }\n\n      setPosts(prev => prev.filter(post => post.id !== id))\n    } catch (error) {\n      console.error('Error deleting post:', error)\n      alert('削除に失敗しました')\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'OPEN': return 'bg-blue-100 text-blue-800'\n      case 'MATCHED': return 'bg-green-100 text-green-800'\n      case 'IN_TRANSIT': return 'bg-yellow-100 text-yellow-800'\n      case 'DELIVERED': return 'bg-gray-100 text-gray-800'\n      case 'CANCELLED': return 'bg-red-100 text-red-800'\n      case 'AVAILABLE': return 'bg-green-100 text-green-800'\n      case 'IN_USE': return 'bg-blue-100 text-blue-800'\n      case 'MAINTENANCE': return 'bg-yellow-100 text-yellow-800'\n      case 'UNAVAILABLE': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'OPEN': return '募集中'\n      case 'MATCHED': return 'マッチング済み'\n      case 'IN_TRANSIT': return '輸送中'\n      case 'DELIVERED': return '配送完了'\n      case 'CANCELLED': return 'キャンセル'\n      case 'AVAILABLE': return '利用可能'\n      case 'IN_USE': return '使用中'\n      case 'MAINTENANCE': return 'メンテナンス中'\n      case 'UNAVAILABLE': return '利用不可'\n      default: return status\n    }\n  }\n\n  const filteredPosts = posts.filter(post => \n    activeTab === 'shipments' ? post.type === 'shipment' : post.type === 'vehicle'\n  )\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">マイ投稿</h1>\n            <p className=\"text-gray-600\">投稿した荷物や空車情報を管理できます</p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\n              <Plus className=\"h-4 w-4\" />\n              <span>新規投稿</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* タブ */}\n      <div className=\"mb-6\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8\">\n            <button\n              onClick={() => setActiveTab('shipments')}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'shipments'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              荷物投稿 ({posts.filter(p => p.type === 'shipment').length})\n            </button>\n            <button\n              onClick={() => setActiveTab('vehicles')}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'vehicles'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              空車投稿 ({posts.filter(p => p.type === 'vehicle').length})\n            </button>\n          </nav>\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            {activeTab === 'shipments' ? '荷物投稿一覧' : '空車投稿一覧'}\n          </h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : filteredPosts.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>投稿がありません</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {filteredPosts.map(post => (\n              <div key={post.id} className=\"p-6 hover:bg-gray-50\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">{post.title}</h3>\n                    <p className=\"text-sm text-gray-600 mt-1\">{post.description}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(post.status)}`}>\n                      {getStatusLabel(post.status)}\n                    </span>\n                    <div className=\"flex space-x-1\">\n                      <button className=\"p-2 text-gray-400 hover:text-blue-600\">\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n                      <button className=\"p-2 text-gray-400 hover:text-green-600\">\n                        <Edit className=\"h-4 w-4\" />\n                      </button>\n                      <button \n                        onClick={() => handleDelete(post.id)}\n                        className=\"p-2 text-gray-400 hover:text-red-600\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                {post.type === 'shipment' && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-700\">\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      発地: {post.data.pickupPrefecture} {post.data.pickupCity}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      着地: {post.data.deliveryPrefecture} {post.data.deliveryCity}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      発日時: {new Date(post.data.pickupDate).toLocaleDateString()}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Weight className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      重量: {post.data.cargoWeight}kg\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Truck className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      車種: {post.data.requiredVehicleType}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <DollarSign className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      予算: {post.data.budget.toLocaleString()}円\n                    </div>\n                  </div>\n                )}\n\n                {post.type === 'vehicle' && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-700\">\n                    <div className=\"flex items-center\">\n                      <Truck className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      車種: {post.data.vehicleType}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Weight className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      最大積載重量: {post.data.maxWeight}kg\n                    </div>\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      運行可能エリア: {post.data.availablePrefectures ? JSON.parse(post.data.availablePrefectures).join(', ') : '-'}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      利用可能期間: {new Date(post.data.availableFrom).toLocaleDateString()} - {new Date(post.data.availableTo).toLocaleDateString()}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                  <div className=\"flex justify-between items-center text-sm text-gray-500\">\n                    <span>投稿日: {new Date(post.createdAt).toLocaleString('ja-JP')}</span>\n                    <span>更新日: {new Date(post.updatedAt).toLocaleString('ja-JP')}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":10385},"src/lib/api-response.ts":{"content":"import { NextResponse } from 'next/server'\n\nexport function successResponse<T>(data: T, status = 200) {\n  return NextResponse.json(\n    {\n      success: true,\n      data,\n    },\n    { status }\n  )\n}\n\nexport function errorResponse(message: string, status = 400) {\n  return NextResponse.json(\n    {\n      success: false,\n      error: message,\n    },\n    { status }\n  )\n}\n\nexport function unauthorizedResponse(message = '認証が必要です') {\n  return errorResponse(message, 401)\n}\n\nexport function forbiddenResponse(message = 'アクセス権限がありません') {\n  return errorResponse(message, 403)\n}\n\nexport function notFoundResponse(message = 'リソースが見つかりません') {\n  return errorResponse(message, 404)\n}\n\n","size_bytes":735},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n  images: {\n    unoptimized: true,\n  },\n}\n\nmodule.exports = nextConfig\n\n","size_bytes":178},"src/components/StatsDisplay.tsx":{"content":"import { Package, Truck } from 'lucide-react'\nimport { useStats } from '@/hooks/useStats'\n\nexport default function StatsDisplay() {\n  const { stats } = useStats()\n\n  return (\n    <div className=\"flex items-center space-x-8\">\n      <div className=\"flex items-center space-x-3\">\n        <Package className=\"h-6 w-6 text-blue-600\" />\n        <span className=\"text-gray-600 text-sm\">荷物数</span>\n        <span className=\"font-bold text-2xl text-blue-600\">{stats.shipmentCount.toLocaleString()}</span>\n      </div>\n      <div className=\"flex items-center space-x-3\">\n        <Truck className=\"h-6 w-6 text-green-600\" />\n        <span className=\"text-gray-600 text-sm\">空車数</span>\n        <span className=\"font-bold text-2xl text-blue-600\">{stats.vehicleCount.toLocaleString()}</span>\n      </div>\n    </div>\n  )\n}\n","size_bytes":818},"src/components/CountUpAnimation.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\n\ninterface CountUpAnimationProps {\n  end: number\n  duration?: number\n  className?: string\n  prefix?: string\n  suffix?: string\n}\n\nexport default function CountUpAnimation({ \n  end, \n  duration = 2000, \n  className = '',\n  prefix = '',\n  suffix = ''\n}: CountUpAnimationProps) {\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    let startTime: number\n    let animationFrame: number\n\n    const animate = (currentTime: number) => {\n      if (!startTime) startTime = currentTime\n      const progress = Math.min((currentTime - startTime) / duration, 1)\n      \n      // イージング関数（easeOutCubic）\n      const easeOutCubic = 1 - Math.pow(1 - progress, 3)\n      const currentCount = Math.floor(easeOutCubic * end)\n      \n      setCount(currentCount)\n\n      if (progress < 1) {\n        animationFrame = requestAnimationFrame(animate)\n      }\n    }\n\n    // 少し遅延を入れてアニメーションを開始\n    const timeoutId = setTimeout(() => {\n      animationFrame = requestAnimationFrame(animate)\n    }, 200)\n\n    return () => {\n      clearTimeout(timeoutId)\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n    }\n  }, [end, duration])\n\n  return (\n    <span className={className}>\n      {prefix}{count.toLocaleString()}{suffix}\n    </span>\n  )\n}\n","size_bytes":1362},"src/app/dashboard/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Package, \n  Search, \n  Truck, \n  Building2, \n  Users, \n  Settings, \n  Bell, \n  User,\n  ChevronDown,\n  ChevronRight,\n  Filter,\n  X,\n  Plus,\n  Eye,\n  Calendar,\n  MapPin,\n  Weight,\n  Car,\n  User as UserIcon,\n  Globe,\n  FileText,\n  HelpCircle,\n  CheckCircle,\n  Bookmark,\n  History\n} from 'lucide-react'\n\nexport default function DashboardPage() {\n  const [shipments, setShipments] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [activeTab, setActiveTab] = useState('募集中')\n\n  useEffect(() => {\n    loadShipments()\n  }, [])\n\n  const loadShipments = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/shipments', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n\n      if (!response.ok) throw new Error('Failed to load shipments')\n      \n      const data = await response.json()\n      setShipments(data.data || [])\n    } catch (error) {\n      console.error('Error loading shipments:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <DashboardLayout>\n      {/* タブ */}\n      <div className=\"mb-6\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {['募集中', '成約済み', '輸送中', '完了'].map((tab) => (\n              <button\n                key={tab}\n                onClick={() => setActiveTab(tab)}\n                className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                {tab}\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* 統計カード */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <div className=\"flex items-center\">\n            <div className=\"p-2 bg-blue-100 rounded-lg\">\n              <Package className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">総荷物数</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{shipments.length}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <div className=\"flex items-center\">\n            <div className=\"p-2 bg-green-100 rounded-lg\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">成約済み</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {shipments.filter(s => s.status === 'MATCHED').length}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <div className=\"flex items-center\">\n            <div className=\"p-2 bg-yellow-100 rounded-lg\">\n              <Truck className=\"h-6 w-6 text-yellow-600\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">輸送中</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {shipments.filter(s => s.status === 'IN_TRANSIT').length}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <div className=\"flex items-center\">\n            <div className=\"p-2 bg-gray-100 rounded-lg\">\n              <FileText className=\"h-6 w-6 text-gray-600\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">完了</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {shipments.filter(s => s.status === 'DELIVERED').length}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 荷物一覧 */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">荷物一覧</h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : shipments.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>荷物がありません</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {shipments.map((shipment) => (\n              <div key={shipment.id} className=\"p-6 hover:bg-gray-50\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-medium text-gray-900\">\n                      {shipment.cargoName}\n                    </h3>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      {shipment.cargoDescription}\n                    </p>\n                    <div className=\"mt-2 flex items-center space-x-4 text-sm text-gray-500\">\n                      <span className=\"flex items-center\">\n                        <MapPin className=\"h-4 w-4 mr-1\" />\n                        {shipment.pickupPrefecture} → {shipment.deliveryPrefecture}\n                      </span>\n                      <span className=\"flex items-center\">\n                        <Calendar className=\"h-4 w-4 mr-1\" />\n                        {new Date(shipment.pickupDate).toLocaleDateString()}\n                      </span>\n                      <span className=\"flex items-center\">\n                        <Weight className=\"h-4 w-4 mr-1\" />\n                        {shipment.cargoWeight}kg\n                      </span>\n                      <span className=\"flex items-center\">\n                        <Truck className=\"h-4 w-4 mr-1\" />\n                        {shipment.requiredVehicleType}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n                      shipment.status === 'OPEN' ? 'bg-blue-100 text-blue-800' :\n                      shipment.status === 'MATCHED' ? 'bg-green-100 text-green-800' :\n                      shipment.status === 'IN_TRANSIT' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-gray-100 text-gray-800'\n                    }`}>\n                      {shipment.status === 'OPEN' ? '募集中' :\n                       shipment.status === 'MATCHED' ? '成約済み' :\n                       shipment.status === 'IN_TRANSIT' ? '輸送中' : '完了'}\n                    </span>\n                    <button className=\"p-2 text-gray-400 hover:text-gray-600\">\n                      <Eye className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":7514},"src/app/dashboard/settings/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Settings, \n  ChevronUp, \n  ChevronDown, \n  Building2, \n  User, \n  CreditCard, \n  FileText, \n  Mail, \n  DollarSign,\n  Users,\n  Bell,\n  LogOut,\n  Save,\n  X,\n  Edit\n} from 'lucide-react'\n\nexport default function SettingsPage() {\n  const router = useRouter()\n  const [activeSection, setActiveSection] = useState('基本情報')\n  const [expandedSections, setExpandedSections] = useState({\n    '企業情報管理': true,\n    'ユーザー管理': false\n  })\n  const [editing, setEditing] = useState(false)\n  const [user, setUser] = useState<any>(null)\n  const [formData, setFormData] = useState({\n    // 基本情報\n    contactPerson: '',\n    email: '',\n    phone: '',\n    companyName: '',\n    postalCode: '',\n    address: '',\n    \n    // 詳細情報\n    industry: '',\n    establishedDate: '',\n    capital: '',\n    employeeCount: '',\n    businessDescription: '',\n    \n    // 契約内容\n    subscriptionPlan: '',\n    contractStartDate: '',\n    contractEndDate: '',\n    \n    // 口座情報\n    bankName: '',\n    branchName: '',\n    accountType: '',\n    accountNumber: '',\n    accountHolder: '',\n    \n    // お支払い方法\n    paymentMethod: '',\n    billingAddress: '',\n    \n    // 請求書設定\n    invoiceReceiptEmail: '',\n    invoiceReceiptMethod: '',\n    invoiceIssueMethod: '',\n    invoiceCompanyName: '',\n    \n    // 経理担当者\n    accountingPersonName: '',\n    accountingPersonEmail: '',\n    accountingPersonPhone: '',\n    \n    // メール通知\n    emailNotificationShipment: true,\n    emailNotificationOffer: true,\n    emailNotificationMatching: true,\n    emailNotificationMessage: true\n  })\n\n  useEffect(() => {\n    const fetchSettings = async () => {\n      const token = localStorage.getItem('token')\n      if (!token) return\n      \n      try {\n        const response = await fetch('/api/settings', {\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n        \n        if (response.ok) {\n          const result = await response.json()\n          const data = result.data\n          setUser(data)\n          setFormData({\n            contactPerson: data.contactPerson || '',\n            email: data.email || '',\n            phone: data.phone || '',\n            companyName: data.companyName || '',\n            postalCode: data.postalCode || '',\n            address: data.address || '',\n            \n            industry: data.industry || '',\n            establishedDate: data.establishedDate ? data.establishedDate.split('T')[0] : '',\n            capital: data.capital || '',\n            employeeCount: data.employeeCount || '',\n            businessDescription: data.businessDescription || '',\n            \n            subscriptionPlan: data.subscriptionPlan || '',\n            contractStartDate: data.contractStartDate ? data.contractStartDate.split('T')[0] : '',\n            contractEndDate: data.contractEndDate ? data.contractEndDate.split('T')[0] : '',\n            \n            bankName: data.bankName || '',\n            branchName: data.branchName || '',\n            accountType: data.accountType || '',\n            accountNumber: data.accountNumber || '',\n            accountHolder: data.accountHolder || '',\n            \n            paymentMethod: data.paymentMethod || '',\n            billingAddress: data.billingAddress || '',\n            \n            invoiceReceiptEmail: data.invoiceReceiptEmail || '',\n            invoiceReceiptMethod: data.invoiceReceiptMethod || '',\n            invoiceIssueMethod: data.invoiceIssueMethod || '',\n            invoiceCompanyName: data.invoiceCompanyName || '',\n            \n            accountingPersonName: data.accountingPersonName || '',\n            accountingPersonEmail: data.accountingPersonEmail || '',\n            accountingPersonPhone: data.accountingPersonPhone || '',\n            \n            emailNotificationShipment: data.emailNotificationShipment ?? true,\n            emailNotificationOffer: data.emailNotificationOffer ?? true,\n            emailNotificationMatching: data.emailNotificationMatching ?? true,\n            emailNotificationMessage: data.emailNotificationMessage ?? true\n          })\n        }\n      } catch (error) {\n        console.error('Error fetching settings:', error)\n      }\n    }\n    \n    fetchSettings()\n  }, [])\n\n  const toggleSection = (section: string) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section as keyof typeof prev]\n    }))\n  }\n\n  const handleEdit = () => {\n    setEditing(true)\n  }\n\n  const handleCancel = () => {\n    setEditing(false)\n    if (user) {\n      setFormData({\n        contactPerson: user.contactPerson || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        companyName: user.companyName || '',\n        postalCode: user.postalCode || '',\n        address: user.address || '',\n        \n        industry: user.industry || '',\n        establishedDate: user.establishedDate ? user.establishedDate.split('T')[0] : '',\n        capital: user.capital || '',\n        employeeCount: user.employeeCount || '',\n        businessDescription: user.businessDescription || '',\n        \n        subscriptionPlan: user.subscriptionPlan || '',\n        contractStartDate: user.contractStartDate ? user.contractStartDate.split('T')[0] : '',\n        contractEndDate: user.contractEndDate ? user.contractEndDate.split('T')[0] : '',\n        \n        bankName: user.bankName || '',\n        branchName: user.branchName || '',\n        accountType: user.accountType || '',\n        accountNumber: user.accountNumber || '',\n        accountHolder: user.accountHolder || '',\n        \n        paymentMethod: user.paymentMethod || '',\n        billingAddress: user.billingAddress || '',\n        \n        invoiceReceiptEmail: user.invoiceReceiptEmail || '',\n        invoiceReceiptMethod: user.invoiceReceiptMethod || '',\n        invoiceIssueMethod: user.invoiceIssueMethod || '',\n        invoiceCompanyName: user.invoiceCompanyName || '',\n        \n        accountingPersonName: user.accountingPersonName || '',\n        accountingPersonEmail: user.accountingPersonEmail || '',\n        accountingPersonPhone: user.accountingPersonPhone || '',\n        \n        emailNotificationShipment: user.emailNotificationShipment ?? true,\n        emailNotificationOffer: user.emailNotificationOffer ?? true,\n        emailNotificationMatching: user.emailNotificationMatching ?? true,\n        emailNotificationMessage: user.emailNotificationMessage ?? true\n      })\n    }\n  }\n\n  const handleSave = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/settings', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(formData)\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to update settings')\n      }\n\n      // 保存後、最新の設定を再取得\n      const getResponse = await fetch('/api/settings', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      })\n      \n      if (getResponse.ok) {\n        const result = await getResponse.json()\n        const updatedUser = result.data\n        setUser(updatedUser)\n        localStorage.setItem('user', JSON.stringify(updatedUser))\n        \n        // formDataも最新の状態に更新\n        setFormData({\n          contactPerson: updatedUser.contactPerson || '',\n          email: updatedUser.email || '',\n          phone: updatedUser.phone || '',\n          companyName: updatedUser.companyName || '',\n          postalCode: updatedUser.postalCode || '',\n          address: updatedUser.address || '',\n          \n          industry: updatedUser.industry || '',\n          establishedDate: updatedUser.establishedDate ? updatedUser.establishedDate.split('T')[0] : '',\n          capital: updatedUser.capital || '',\n          employeeCount: updatedUser.employeeCount || '',\n          businessDescription: updatedUser.businessDescription || '',\n          \n          subscriptionPlan: updatedUser.subscriptionPlan || '',\n          contractStartDate: updatedUser.contractStartDate ? updatedUser.contractStartDate.split('T')[0] : '',\n          contractEndDate: updatedUser.contractEndDate ? updatedUser.contractEndDate.split('T')[0] : '',\n          \n          bankName: updatedUser.bankName || '',\n          branchName: updatedUser.branchName || '',\n          accountType: updatedUser.accountType || '',\n          accountNumber: updatedUser.accountNumber || '',\n          accountHolder: updatedUser.accountHolder || '',\n          \n          paymentMethod: updatedUser.paymentMethod || '',\n          billingAddress: updatedUser.billingAddress || '',\n          \n          invoiceReceiptEmail: updatedUser.invoiceReceiptEmail || '',\n          invoiceReceiptMethod: updatedUser.invoiceReceiptMethod || '',\n          invoiceIssueMethod: updatedUser.invoiceIssueMethod || '',\n          invoiceCompanyName: updatedUser.invoiceCompanyName || '',\n          \n          accountingPersonName: updatedUser.accountingPersonName || '',\n          accountingPersonEmail: updatedUser.accountingPersonEmail || '',\n          accountingPersonPhone: updatedUser.accountingPersonPhone || '',\n          \n          emailNotificationShipment: updatedUser.emailNotificationShipment ?? true,\n          emailNotificationOffer: updatedUser.emailNotificationOffer ?? true,\n          emailNotificationMatching: updatedUser.emailNotificationMatching ?? true,\n          emailNotificationMessage: updatedUser.emailNotificationMessage ?? true\n        })\n      } else {\n        throw new Error('Failed to refresh settings')\n      }\n      \n      setEditing(false)\n      alert('設定を保存しました')\n    } catch (error) {\n      console.error('Error updating settings:', error)\n      alert('設定の更新に失敗しました')\n    }\n  }\n\n  const handleLogout = () => {\n    localStorage.removeItem('token')\n    localStorage.removeItem('user')\n    router.push('/login')\n  }\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const menuItems = [\n    {\n      section: '企業情報管理',\n      icon: Building2,\n      items: [\n        { id: '基本情報', label: '基本情報' },\n        { id: '詳細情報', label: '詳細情報' },\n        { id: '信用情報', label: '信用情報' },\n        { id: '契約内容', label: '契約内容' },\n        { id: '口座情報', label: '口座情報' },\n        { id: 'お支払い方法', label: 'お支払い方法' },\n        { id: '請求書受領設定', label: '請求書受領設定' },\n        { id: '請求書発行設定', label: '請求書発行設定' },\n        { id: '経理担当者', label: '経理担当者' }\n      ]\n    },\n    {\n      section: 'ユーザー管理',\n      icon: Users,\n      items: [\n        { id: 'メール受信設定', label: 'メール受信設定' },\n        { id: 'ご利用金額', label: 'ご利用金額' },\n        { id: 'ログアウト', label: 'ログアウト', isLogout: true }\n      ]\n    }\n  ]\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">設定</h1>\n        <p className=\"text-gray-600\">アカウント設定を管理できます</p>\n      </div>\n\n      <div className=\"flex gap-6\">\n        {/* サイドメニュー */}\n        <div className=\"w-64 bg-white rounded-lg shadow-sm border\">\n          <div className=\"p-4\">\n            {menuItems.map((section) => (\n              <div key={section.section} className=\"mb-4\">\n                <button\n                  onClick={() => toggleSection(section.section)}\n                  className=\"w-full flex items-center justify-between p-2 text-left hover:bg-gray-50 rounded-lg\"\n                >\n                  <div className=\"flex items-center\">\n                    <section.icon className=\"h-4 w-4 mr-2 text-gray-600\" />\n                    <span className=\"font-medium text-gray-900\">{section.section}</span>\n                  </div>\n                  {expandedSections[section.section as keyof typeof expandedSections] ? (\n                    <ChevronUp className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n                \n                {expandedSections[section.section as keyof typeof expandedSections] && (\n                  <div className=\"ml-6 mt-2 space-y-1\">\n                    {section.items.map((item) => (\n                      <button\n                        key={item.id}\n                        onClick={() => {\n                          if (item.isLogout) {\n                            handleLogout()\n                          } else {\n                            setActiveSection(item.id)\n                          }\n                        }}\n                        className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-colors ${\n                          activeSection === item.id\n                            ? 'bg-green-50 text-green-800 border-r-2 border-green-600'\n                            : item.isLogout\n                            ? 'text-red-600 hover:bg-red-50'\n                            : 'text-gray-600 hover:bg-gray-50'\n                        }`}\n                      >\n                        {item.isLogout && <LogOut className=\"h-4 w-4 inline mr-2\" />}\n                        {item.label}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* メインコンテンツ */}\n        <div className=\"flex-1 bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">{activeSection}</h2>\n              {activeSection !== '信用情報' && activeSection !== 'ご利用金額' && (\n                <div className=\"flex space-x-2\">\n                  {editing ? (\n                    <>\n                      <button\n                        onClick={handleSave}\n                        className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n                      >\n                        <Save className=\"h-4 w-4\" />\n                        <span>保存</span>\n                      </button>\n                      <button\n                        onClick={handleCancel}\n                        className=\"bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 flex items-center space-x-2\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                        <span>キャンセル</span>\n                      </button>\n                    </>\n                  ) : (\n                    <button\n                      onClick={handleEdit}\n                      className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                      <span>編集</span>\n                    </button>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"p-6\">\n            {activeSection === '基本情報' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">会社名</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.companyName}\n                      onChange={(e) => handleInputChange('companyName', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"会社名を入力してください\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.companyName || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">担当者名</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.contactPerson}\n                      onChange={(e) => handleInputChange('contactPerson', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"担当者名を入力してください\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.contactPerson || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">メールアドレス</label>\n                  {editing ? (\n                    <input\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"メールアドレスを入力してください\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.email || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">電話番号</label>\n                  {editing ? (\n                    <input\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => handleInputChange('phone', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"電話番号を入力してください\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.phone || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">郵便番号</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.postalCode}\n                      onChange={(e) => handleInputChange('postalCode', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"郵便番号を入力してください\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.postalCode || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">住所</label>\n                  {editing ? (\n                    <textarea\n                      value={formData.address}\n                      onChange={(e) => handleInputChange('address', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      rows={3}\n                      placeholder=\"住所を入力してください\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{user?.address || '未設定'}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeSection === '詳細情報' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">業種</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.industry}\n                      onChange={(e) => handleInputChange('industry', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"例: 物流業\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.industry || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">設立日</label>\n                  {editing ? (\n                    <input\n                      type=\"date\"\n                      value={formData.establishedDate}\n                      onChange={(e) => handleInputChange('establishedDate', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.establishedDate || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">資本金（円）</label>\n                  {editing ? (\n                    <input\n                      type=\"number\"\n                      value={formData.capital}\n                      onChange={(e) => handleInputChange('capital', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"10000000\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.capital ? `¥${Number(formData.capital).toLocaleString()}` : '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">従業員数（人）</label>\n                  {editing ? (\n                    <input\n                      type=\"number\"\n                      value={formData.employeeCount}\n                      onChange={(e) => handleInputChange('employeeCount', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"50\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.employeeCount ? `${formData.employeeCount}人` : '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">事業内容</label>\n                  {editing ? (\n                    <textarea\n                      value={formData.businessDescription}\n                      onChange={(e) => handleInputChange('businessDescription', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      rows={4}\n                      placeholder=\"事業内容を入力してください\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.businessDescription || '未設定'}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeSection === '信用情報' && (\n              <div className=\"space-y-6\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\n                  <p className=\"text-blue-800 text-sm\">信用情報は認証システムによって管理されています。</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">認証ステータス</label>\n                  <p className=\"text-gray-900\">\n                    {user?.verificationStatus === 'APPROVED' ? (\n                      <span className=\"text-green-600\">承認済み ✓</span>\n                    ) : user?.verificationStatus === 'REJECTED' ? (\n                      <span className=\"text-red-600\">却下</span>\n                    ) : (\n                      <span className=\"text-yellow-600\">審査中</span>\n                    )}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">信用スコア</label>\n                  <p className=\"text-gray-900 text-2xl font-bold\">{user?.trustScore?.toFixed(1) || '5.0'} / 5.0</p>\n                </div>\n                <button\n                  onClick={() => router.push('/dashboard/verification')}\n                  className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n                >\n                  認証管理ページへ\n                </button>\n              </div>\n            )}\n\n            {activeSection === '契約内容' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">契約プラン</label>\n                  {editing ? (\n                    <select\n                      value={formData.subscriptionPlan}\n                      onChange={(e) => handleInputChange('subscriptionPlan', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"\">選択してください</option>\n                      <option value=\"basic\">ベーシック</option>\n                      <option value=\"standard\">スタンダード</option>\n                      <option value=\"premium\">プレミアム</option>\n                      <option value=\"enterprise\">エンタープライズ</option>\n                    </select>\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.subscriptionPlan || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">契約開始日</label>\n                  {editing ? (\n                    <input\n                      type=\"date\"\n                      value={formData.contractStartDate}\n                      onChange={(e) => handleInputChange('contractStartDate', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.contractStartDate || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">契約終了日</label>\n                  {editing ? (\n                    <input\n                      type=\"date\"\n                      value={formData.contractEndDate}\n                      onChange={(e) => handleInputChange('contractEndDate', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.contractEndDate || '未設定'}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeSection === '口座情報' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">銀行名</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.bankName}\n                      onChange={(e) => handleInputChange('bankName', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"例: みずほ銀行\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.bankName || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">支店名</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.branchName}\n                      onChange={(e) => handleInputChange('branchName', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"例: 東京支店\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.branchName || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">口座種別</label>\n                  {editing ? (\n                    <select\n                      value={formData.accountType}\n                      onChange={(e) => handleInputChange('accountType', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"\">選択してください</option>\n                      <option value=\"普通\">普通</option>\n                      <option value=\"当座\">当座</option>\n                    </select>\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.accountType || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">口座番号</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.accountNumber}\n                      onChange={(e) => handleInputChange('accountNumber', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"1234567\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.accountNumber || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">口座名義</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.accountHolder}\n                      onChange={(e) => handleInputChange('accountHolder', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"カ）サンプルカイシャ\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.accountHolder || '未設定'}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeSection === 'お支払い方法' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">支払い方法</label>\n                  {editing ? (\n                    <select\n                      value={formData.paymentMethod}\n                      onChange={(e) => handleInputChange('paymentMethod', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"\">選択してください</option>\n                      <option value=\"クレジットカード\">クレジットカード</option>\n                      <option value=\"銀行振込\">銀行振込</option>\n                      <option value=\"口座振替\">口座振替</option>\n                    </select>\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.paymentMethod || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">請求先住所</label>\n                  {editing ? (\n                    <textarea\n                      value={formData.billingAddress}\n                      onChange={(e) => handleInputChange('billingAddress', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      rows={3}\n                      placeholder=\"請求先住所を入力してください\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.billingAddress || '未設定'}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeSection === '請求書受領設定' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">請求書受領メール</label>\n                  {editing ? (\n                    <input\n                      type=\"email\"\n                      value={formData.invoiceReceiptEmail}\n                      onChange={(e) => handleInputChange('invoiceReceiptEmail', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"invoice@company.com\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.invoiceReceiptEmail || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">受領方法</label>\n                  {editing ? (\n                    <select\n                      value={formData.invoiceReceiptMethod}\n                      onChange={(e) => handleInputChange('invoiceReceiptMethod', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"\">選択してください</option>\n                      <option value=\"メール\">メール</option>\n                      <option value=\"郵送\">郵送</option>\n                      <option value=\"システム内\">システム内</option>\n                    </select>\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.invoiceReceiptMethod || '未設定'}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeSection === '請求書発行設定' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">発行方法</label>\n                  {editing ? (\n                    <select\n                      value={formData.invoiceIssueMethod}\n                      onChange={(e) => handleInputChange('invoiceIssueMethod', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"\">選択してください</option>\n                      <option value=\"自動\">自動発行</option>\n                      <option value=\"手動\">手動発行</option>\n                    </select>\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.invoiceIssueMethod || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">請求書宛名</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.invoiceCompanyName}\n                      onChange={(e) => handleInputChange('invoiceCompanyName', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"株式会社サンプル\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.invoiceCompanyName || '未設定'}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeSection === '経理担当者' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">担当者名</label>\n                  {editing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.accountingPersonName}\n                      onChange={(e) => handleInputChange('accountingPersonName', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"山田 太郎\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.accountingPersonName || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">メールアドレス</label>\n                  {editing ? (\n                    <input\n                      type=\"email\"\n                      value={formData.accountingPersonEmail}\n                      onChange={(e) => handleInputChange('accountingPersonEmail', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"accounting@company.com\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.accountingPersonEmail || '未設定'}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">電話番号</label>\n                  {editing ? (\n                    <input\n                      type=\"tel\"\n                      value={formData.accountingPersonPhone}\n                      onChange={(e) => handleInputChange('accountingPersonPhone', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"03-1234-5678\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900\">{formData.accountingPersonPhone || '未設定'}</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeSection === 'メール受信設定' && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between py-3 border-b\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">荷物関連通知</p>\n                    <p className=\"text-sm text-gray-500\">新しい荷物や配送状況の更新</p>\n                  </div>\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.emailNotificationShipment}\n                      onChange={(e) => handleInputChange('emailNotificationShipment', e.target.checked)}\n                      disabled={!editing}\n                      className=\"sr-only peer\"\n                    />\n                    <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                  </label>\n                </div>\n                <div className=\"flex items-center justify-between py-3 border-b\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">オファー関連通知</p>\n                    <p className=\"text-sm text-gray-500\">新しいオファーや応答</p>\n                  </div>\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.emailNotificationOffer}\n                      onChange={(e) => handleInputChange('emailNotificationOffer', e.target.checked)}\n                      disabled={!editing}\n                      className=\"sr-only peer\"\n                    />\n                    <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                  </label>\n                </div>\n                <div className=\"flex items-center justify-between py-3 border-b\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">マッチング通知</p>\n                    <p className=\"text-sm text-gray-500\">マッチング成立のお知らせ</p>\n                  </div>\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.emailNotificationMatching}\n                      onChange={(e) => handleInputChange('emailNotificationMatching', e.target.checked)}\n                      disabled={!editing}\n                      className=\"sr-only peer\"\n                    />\n                    <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                  </label>\n                </div>\n                <div className=\"flex items-center justify-between py-3\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">メッセージ通知</p>\n                    <p className=\"text-sm text-gray-500\">新しいメッセージの受信</p>\n                  </div>\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.emailNotificationMessage}\n                      onChange={(e) => handleInputChange('emailNotificationMessage', e.target.checked)}\n                      disabled={!editing}\n                      className=\"sr-only peer\"\n                    />\n                    <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                  </label>\n                </div>\n              </div>\n            )}\n\n            {activeSection === 'ご利用金額' && (\n              <div className=\"space-y-6\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">今月のご利用金額</h3>\n                  <p className=\"text-4xl font-bold text-blue-600\">¥0</p>\n                  <p className=\"text-sm text-gray-600 mt-2\">2025年10月分</p>\n                </div>\n                <div className=\"border rounded-lg p-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-3\">利用履歴</h4>\n                  <p className=\"text-gray-500 text-center py-4\">利用履歴はまだありません</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":45508},"src/app/api/admin/documents/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyAdminSession } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\n// 管理者権限チェックミドルウェア\nasync function requireAdmin(request: NextRequest) {\n  const token = request.cookies.get('admin_token')?.value\n\n  if (!token) {\n    return NextResponse.json(\n      { error: '管理者認証が必要です' },\n      { status: 401 }\n    )\n  }\n\n  const payload = verifyAdminSession(token)\n\n  if (!payload) {\n    return NextResponse.json(\n      { error: '無効な管理者認証です' },\n      { status: 401 }\n    )\n  }\n\n  return payload\n}\n\n// 許可証・書類一覧取得\nexport async function GET(request: NextRequest) {\n  try {\n    const admin = await requireAdmin(request)\n    if (admin instanceof NextResponse) return admin\n\n    const { searchParams } = new URL(request.url)\n    const status = searchParams.get('status')\n    const type = searchParams.get('type')\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '50')\n\n    const where: any = {}\n    \n    if (status && status !== 'all') {\n      where.status = status\n    }\n    \n    if (type && type !== 'all') {\n      where.type = type\n    }\n\n    // デモ用の書類データ\n    const sampleDocuments = [\n      {\n        id: '1',\n        userId: '1',\n        type: 'business_license',\n        name: '事業許可証',\n        status: 'pending',\n        uploadedAt: '2024-01-15',\n        fileUrl: '/documents/business_license_1.pdf',\n        user: {\n          companyName: '株式会社トランスロジック',\n          contactPerson: '山田花子',\n          email: 'yamada@translogic.co.jp'\n        }\n      },\n      {\n        id: '2',\n        userId: '2',\n        type: 'transport_license',\n        name: '一般貨物自動車運送事業許可証',\n        status: 'pending',\n        uploadedAt: '2024-01-15',\n        fileUrl: '/documents/transport_license_2.pdf',\n        user: {\n          companyName: '関西物流株式会社',\n          contactPerson: '鈴木一郎',\n          email: 'suzuki@kansai-logistics.co.jp'\n        }\n      },\n      {\n        id: '3',\n        userId: '1',\n        type: 'insurance',\n        name: '保険証券',\n        status: 'approved',\n        uploadedAt: '2024-01-10',\n        reviewedAt: '2024-01-12',\n        reviewer: '管理者',\n        fileUrl: '/documents/insurance_1.pdf',\n        expiryDate: '2025-01-10',\n        user: {\n          companyName: '株式会社トランスロジック',\n          contactPerson: '山田花子',\n          email: 'yamada@translogic.co.jp'\n        }\n      },\n      {\n        id: '4',\n        userId: '3',\n        type: 'tax_certificate',\n        name: '納税証明書',\n        status: 'pending',\n        uploadedAt: '2024-01-16',\n        fileUrl: '/documents/tax_certificate_3.pdf',\n        user: {\n          companyName: '中部運送株式会社',\n          contactPerson: '田村四郎',\n          email: 'tamura@chubu-transport.co.jp'\n        }\n      },\n      {\n        id: '5',\n        userId: '4',\n        type: 'business_license',\n        name: '事業許可証',\n        status: 'rejected',\n        uploadedAt: '2024-01-14',\n        reviewedAt: '2024-01-15',\n        reviewer: '管理者',\n        comment: '書類が不鮮明です。再提出をお願いします。',\n        fileUrl: '/documents/business_license_4.pdf',\n        user: {\n          companyName: 'サンプル商事株式会社',\n          contactPerson: '佐藤太郎',\n          email: 'sato@sample.co.jp'\n        }\n      }\n    ]\n\n    let filteredDocuments = sampleDocuments\n\n    if (status && status !== 'all') {\n      filteredDocuments = filteredDocuments.filter(doc => doc.status === status)\n    }\n\n    if (type && type !== 'all') {\n      filteredDocuments = filteredDocuments.filter(doc => doc.type === type)\n    }\n\n    const total = filteredDocuments.length\n    const paginatedDocuments = filteredDocuments.slice(\n      (page - 1) * limit,\n      page * limit\n    )\n\n    return NextResponse.json({\n      documents: paginatedDocuments,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit)\n      }\n    })\n  } catch (error) {\n    console.error('Get documents error:', error)\n    return NextResponse.json(\n      { error: 'サーバーエラーが発生しました' },\n      { status: 500 }\n    )\n  }\n}\n\n// 書類承認/拒否\nexport async function PATCH(request: NextRequest) {\n  try {\n    const admin = await requireAdmin(request)\n    if (admin instanceof NextResponse) return admin\n\n    const { documentId, action, comment } = await request.json()\n\n    if (!documentId || !action) {\n      return NextResponse.json(\n        { error: '書類IDとアクションが必要です' },\n        { status: 400 }\n      )\n    }\n\n    // デモ用のレスポンス\n    const result = {\n      id: documentId,\n      status: action === 'approve' ? 'approved' : 'rejected',\n      reviewedAt: new Date().toISOString().split('T')[0],\n      reviewer: '管理者',\n      comment: comment || ''\n    }\n\n    console.log(`Admin ${admin.userId} ${action} document ${documentId}${comment ? ` with comment: ${comment}` : ''}`)\n\n    return NextResponse.json({\n      message: `書類を${action === 'approve' ? '承認' : '拒否'}しました`,\n      document: result\n    })\n  } catch (error) {\n    console.error('Update document error:', error)\n    return NextResponse.json(\n      { error: 'サーバーエラーが発生しました' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":5620},"src/app/contact/page.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport Logo from '@/components/Logo'\nimport { ArrowLeft, Mail, Phone, MapPin, Clock } from 'lucide-react'\n\nexport default function ContactPage() {\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle')\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setIsSubmitting(true)\n    setSubmitStatus('idle')\n    setErrorMessage('')\n\n    const formData = new FormData(e.currentTarget)\n    const data = {\n      lastName: formData.get('lastName'),\n      firstName: formData.get('firstName'),\n      lastNameKana: formData.get('lastNameKana'),\n      firstNameKana: formData.get('firstNameKana'),\n      company: formData.get('company'),\n      department: formData.get('department'),\n      phone: formData.get('phone'),\n      email: formData.get('email'),\n      contactMethod: formData.get('contactMethod'),\n      message: formData.get('message'),\n      newsletter: formData.get('newsletter') === 'on'\n    }\n\n    try {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        setSubmitStatus('success')\n        e.currentTarget.reset()\n      } else {\n        setSubmitStatus('error')\n        setErrorMessage(result.error || 'エラーが発生しました')\n      }\n    } catch (error) {\n      setSubmitStatus('error')\n      setErrorMessage('送信に失敗しました。もう一度お試しください。')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      {/* ヘッダー */}\n      <header className=\"glass sticky top-0 z-50 border-b border-white/20\">\n        <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <Logo width={200} height={60} className=\"w-[150px] h-[45px] sm:w-[200px] sm:h-[60px]\" linkable={false} />\n            </Link>\n            <div className=\"flex items-center space-x-2 sm:space-x-6\">\n              <Link\n                href=\"/login\"\n                className=\"text-slate-700 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-all duration-300 hover:scale-105\"\n              >\n                ログイン\n              </Link>\n              <Link\n                href=\"/register\"\n                className=\"btn-primary text-sm px-6 py-3\"\n              >\n                新規登録\n              </Link>\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* メインコンテンツ */}\n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"mb-8\">\n          <Link \n            href=\"/\" \n            className=\"inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors duration-300 mb-6\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            トップページに戻る\n          </Link>\n          \n          <h1 className=\"text-4xl sm:text-5xl font-bold text-slate-800 mb-4\">\n            お問い合わせ\n          </h1>\n          <p className=\"text-lg text-slate-600\">\n            ご質問・ご相談がございましたら、お気軽にお問い合わせください\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* お問い合わせフォーム */}\n          <div className=\"floating-card\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-6\">お問い合わせフォーム</h2>\n            \n            {submitStatus === 'success' && (\n              <div className=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                <p className=\"text-green-800 font-medium\">\n                  ✓ お問い合わせを送信しました。担当者より折り返しご連絡いたします。\n                </p>\n              </div>\n            )}\n\n            {submitStatus === 'error' && (\n              <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n                <p className=\"text-red-800 font-medium\">\n                  ✗ {errorMessage}\n                </p>\n              </div>\n            )}\n            \n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                  <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    お名前（姓）<span className=\"text-red-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    required\n                    className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                    placeholder=\"山田\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    お名前（名）<span className=\"text-red-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    required\n                    className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                    placeholder=\"太郎\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                  <label htmlFor=\"lastNameKana\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    フリガナ（セイ）<span className=\"text-red-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"lastNameKana\"\n                    name=\"lastNameKana\"\n                    required\n                    className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                    placeholder=\"ヤマダ\"\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"firstNameKana\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    フリガナ（メイ）<span className=\"text-red-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"firstNameKana\"\n                    name=\"firstNameKana\"\n                    required\n                    className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                    placeholder=\"タロウ\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"company\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  会社名\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"company\"\n                  name=\"company\"\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                  placeholder=\"株式会社サンプル\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"department\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  部署・役職\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"department\"\n                  name=\"department\"\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                  placeholder=\"営業部 部長\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"phone\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  お電話番号<span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  type=\"tel\"\n                  id=\"phone\"\n                  name=\"phone\"\n                  required\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                  placeholder=\"03-1234-5678\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  メールアドレス<span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  required\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                  placeholder=\"example@company.com\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  ご希望の連絡方法<span className=\"text-red-500\">*</span>\n                </label>\n                <div className=\"space-y-2\">\n                  <label className=\"flex items-center\">\n                    <input type=\"radio\" name=\"contactMethod\" value=\"email\" className=\"mr-2\" />\n                    <span>メール</span>\n                  </label>\n                  <label className=\"flex items-center\">\n                    <input type=\"radio\" name=\"contactMethod\" value=\"phone\" className=\"mr-2\" />\n                    <span>電話</span>\n                  </label>\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"message\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  お問い合わせ内容<span className=\"text-red-500\">*</span>\n                </label>\n                <textarea\n                  id=\"message\"\n                  name=\"message\"\n                  rows={6}\n                  required\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                  placeholder=\"お問い合わせ内容をご記入ください\"\n                ></textarea>\n              </div>\n\n              <div className=\"flex items-start\">\n                <input type=\"checkbox\" id=\"newsletter\" name=\"newsletter\" className=\"mt-1 mr-2\" />\n                <label htmlFor=\"newsletter\" className=\"text-sm text-slate-600\">\n                  送信したメールアドレスでお知らせ配信に登録する\n                </label>\n              </div>\n\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"w-full btn-primary text-center disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isSubmitting ? '送信中...' : '送信'}\n              </button>\n\n              <p className=\"text-xs text-slate-500\">\n                利用規約・プライバシーポリシーをお読みの上、同意して送信して下さい。\n              </p>\n            </form>\n          </div>\n\n          {/* 会社情報 */}\n          <div className=\"space-y-6\">\n            <div className=\"floating-card\">\n              <h2 className=\"text-2xl font-bold text-slate-800 mb-6\">会社情報</h2>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <MapPin className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">本社所在地</h3>\n                    <p className=\"text-slate-600\">〒243-0303</p>\n                    <p className=\"text-slate-600\">神奈川県愛甲郡愛川町中津７２８７</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Phone className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">電話番号</h3>\n                    <p className=\"text-slate-600\">046-212-2325</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Phone className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">FAX</h3>\n                    <p className=\"text-slate-600\">046-212-2326</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Mail className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">メールアドレス</h3>\n                    <p className=\"text-slate-600\">info@sinjapan.jp</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Clock className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">受付時間</h3>\n                    <p className=\"text-slate-600\">9:00-21:00</p>\n                    <p className=\"text-sm text-slate-500\">（土日祝日は休業）</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"floating-card\">\n              <h2 className=\"text-2xl font-bold text-slate-800 mb-4\">その他のお問い合わせ</h2>\n              <div className=\"space-y-3\">\n                <Link \n                  href=\"/help\" \n                  className=\"block text-blue-600 hover:text-blue-700 transition-colors duration-300\"\n                >\n                  よくあるご質問\n                </Link>\n                <Link \n                  href=\"/terms\" \n                  className=\"block text-blue-600 hover:text-blue-700 transition-colors duration-300\"\n                >\n                  利用規約\n                </Link>\n                <Link \n                  href=\"/privacy\" \n                  className=\"block text-blue-600 hover:text-blue-700 transition-colors duration-300\"\n                >\n                  プライバシーポリシー\n                </Link>\n                <Link \n                  href=\"/about\" \n                  className=\"block text-blue-600 hover:text-blue-700 transition-colors duration-300\"\n                >\n                  会社概要\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":15581},"src/app/dashboard/my-shipments/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Package, \n  MapPin, \n  Calendar, \n  Weight, \n  Truck, \n  DollarSign, \n  Eye, \n  Edit, \n  Trash2,\n  Plus,\n  Filter,\n  Search,\n  MoreVertical,\n  CheckCircle,\n  Clock,\n  AlertCircle\n} from 'lucide-react'\n\ninterface Shipment {\n  id: string\n  cargoName: string\n  cargoDescription: string\n  status: 'OPEN' | 'MATCHED' | 'IN_TRANSIT' | 'DELIVERED' | 'CANCELLED'\n  pickupPrefecture: string\n  pickupCity: string\n  deliveryPrefecture: string\n  deliveryCity: string\n  pickupDate: string\n  deliveryDate: string\n  cargoWeight: number\n  requiredVehicleType: string\n  budget: number\n  createdAt: string\n  updatedAt: string\n}\n\nexport default function MyShipmentsPage() {\n  const router = useRouter()\n  const [shipments, setShipments] = useState<Shipment[]>([])\n  const [loading, setLoading] = useState(true)\n  const [filter, setFilter] = useState<'all' | 'OPEN' | 'MATCHED' | 'IN_TRANSIT' | 'DELIVERED' | 'CANCELLED'>('all')\n  const [searchTerm, setSearchTerm] = useState('')\n\n  useEffect(() => {\n    loadMyShipments()\n  }, [])\n\n  const loadMyShipments = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/user/my-posts', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n\n      if (!response.ok) throw new Error('Failed to load shipments')\n      \n      const data = await response.json()\n      // 荷物のみをフィルタリング（type: 'shipment'）\n      const shipmentPosts = data.data?.filter((post: any) => post.type === 'shipment') || []\n      setShipments(shipmentPosts)\n    } catch (error) {\n      console.error('Error loading shipments:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleDelete = async (shipmentId: string) => {\n    if (!confirm('この荷物を削除しますか？')) return\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch(`/api/user/my-posts/${shipmentId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n\n      if (!response.ok) throw new Error('Failed to delete shipment')\n      \n      setShipments(prev => prev.filter(s => s.id !== shipmentId))\n    } catch (error) {\n      console.error('Error deleting shipment:', error)\n      alert('削除に失敗しました')\n    }\n  }\n\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case 'OPEN':\n        return { label: '募集中', color: 'bg-blue-100 text-blue-800', icon: Clock }\n      case 'MATCHED':\n        return { label: '成約済み', color: 'bg-green-100 text-green-800', icon: CheckCircle }\n      case 'IN_TRANSIT':\n        return { label: '輸送中', color: 'bg-yellow-100 text-yellow-800', icon: Truck }\n      case 'DELIVERED':\n        return { label: '完了', color: 'bg-gray-100 text-gray-800', icon: CheckCircle }\n      case 'CANCELLED':\n        return { label: 'キャンセル', color: 'bg-red-100 text-red-800', icon: AlertCircle }\n      default:\n        return { label: '不明', color: 'bg-gray-100 text-gray-800', icon: Clock }\n    }\n  }\n\n  const filteredShipments = shipments.filter(shipment => {\n    const matchesFilter = filter === 'all' || shipment.status === filter\n    const matchesSearch = searchTerm === '' || \n      shipment.cargoName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      shipment.cargoDescription.toLowerCase().includes(searchTerm.toLowerCase())\n    return matchesFilter && matchesSearch\n  })\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">登録した荷物</h1>\n            <p className=\"text-gray-600\">あなたが登録した荷物の一覧です</p>\n          </div>\n          <button\n            onClick={() => router.push('/dashboard/shipments/new')}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            <span>新規登録</span>\n          </button>\n        </div>\n      </div>\n\n      {/* フィルターと検索 */}\n      <div className=\"bg-white rounded-lg shadow-sm border mb-6\">\n        <div className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"荷物名や説明で検索...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"h-4 w-4 text-gray-500\" />\n              <select\n                value={filter}\n                onChange={(e) => setFilter(e.target.value as any)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"all\">すべて</option>\n                <option value=\"OPEN\">募集中</option>\n                <option value=\"MATCHED\">成約済み</option>\n                <option value=\"IN_TRANSIT\">輸送中</option>\n                <option value=\"DELIVERED\">完了</option>\n                <option value=\"CANCELLED\">キャンセル</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 荷物一覧 */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            登録した荷物一覧 ({filteredShipments.length}件)\n          </h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : filteredShipments.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>登録した荷物はありません</p>\n            <button\n              onClick={() => router.push('/dashboard/shipments/new')}\n              className=\"mt-4 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n            >\n              最初の荷物を登録する\n            </button>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {filteredShipments.map((shipment) => {\n              const statusInfo = getStatusInfo(shipment.status)\n              const StatusIcon = statusInfo.icon\n              \n              return (\n                <div key={shipment.id} className=\"p-6 hover:bg-gray-50\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-lg font-medium text-gray-900\">\n                          {shipment.cargoName}\n                        </h3>\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full flex items-center space-x-1 ${statusInfo.color}`}>\n                          <StatusIcon className=\"h-3 w-3\" />\n                          <span>{statusInfo.label}</span>\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-500 mb-3\">\n                        {shipment.cargoDescription}\n                      </p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-600\">\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>{shipment.pickupPrefecture} → {shipment.deliveryPrefecture}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>{new Date(shipment.pickupDate).toLocaleDateString()}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Weight className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>{shipment.cargoWeight}kg</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>¥{shipment.budget?.toLocaleString() || '未設定'}</span>\n                        </div>\n                      </div>\n                      <div className=\"mt-3 text-xs text-gray-400\">\n                        登録日: {new Date(shipment.createdAt).toLocaleString('ja-JP')}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2 ml-4\">\n                      <button\n                        onClick={() => router.push(`/shipments/${shipment.id}`)}\n                        className=\"p-2 text-gray-400 hover:text-blue-600\"\n                        title=\"詳細を見る\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n                      <button\n                        onClick={() => router.push(`/dashboard/shipments/edit/${shipment.id}`)}\n                        className=\"p-2 text-gray-400 hover:text-green-600\"\n                        title=\"編集\"\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </button>\n                      <button\n                        onClick={() => handleDelete(shipment.id)}\n                        className=\"p-2 text-gray-400 hover:text-red-600\"\n                        title=\"削除\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":10673},"src/app/api/admin/users/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyAdminToken } from '@/lib/adminAuth'\n\nexport const dynamic = 'force-dynamic'\n\n// 全ユーザー取得\nexport async function GET(request: NextRequest) {\n  try {\n    const { error, status } = await verifyAdminToken(request)\n    \n    if (error) {\n      return NextResponse.json({ error }, { status })\n    }\n\n    const { searchParams } = new URL(request.url)\n    const userType = searchParams.get('userType')\n    const search = searchParams.get('search')\n\n    const where: any = {}\n    \n    if (userType && userType !== 'all') {\n      where.userType = userType\n    }\n\n    if (search) {\n      where.OR = [\n        { companyName: { contains: search } },\n        { contactPerson: { contains: search } },\n        { email: { contains: search } }\n      ]\n    }\n\n    const users = await prisma.user.findMany({\n      where,\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        email: true,\n        companyName: true,\n        contactPerson: true,\n        userType: true,\n        verificationStatus: true,\n        trustScore: true,\n        isAdmin: true,\n        createdAt: true,\n        _count: {\n          select: {\n            shipments: true,\n            vehicles: true,\n            payments: true,\n            offers: true\n          }\n        }\n      }\n    })\n\n    return NextResponse.json({ users })\n\n  } catch (error) {\n    console.error('Admin users error:', error)\n    return NextResponse.json({ error: 'ユーザー一覧の取得に失敗しました' }, { status: 500 })\n  }\n}\n\n// ユーザー権限変更\nexport async function PATCH(request: NextRequest) {\n  try {\n    const { error, status } = await verifyAdminToken(request)\n    \n    if (error) {\n      return NextResponse.json({ error }, { status })\n    }\n\n    const { userId, isAdmin } = await request.json()\n\n    if (!userId) {\n      return NextResponse.json({ error: 'ユーザーIDが必要です' }, { status: 400 })\n    }\n\n    const updatedUser = await prisma.user.update({\n      where: { id: userId },\n      data: { isAdmin }\n    })\n\n    return NextResponse.json({\n      message: `ユーザーの権限を${isAdmin ? '管理者に' : '一般ユーザーに'}変更しました`,\n      user: updatedUser\n    })\n\n  } catch (error) {\n    console.error('Update user error:', error)\n    return NextResponse.json({ error: 'ユーザー権限の変更に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":2488},"src/lib/validators.ts":{"content":"import { z } from 'zod'\n\n// ユーザー登録\nexport const registerSchema = z.object({\n  email: z.string().email('有効なメールアドレスを入力してください'),\n  password: z.string().min(8, 'パスワードは8文字以上である必要があります'),\n  userType: z.enum(['SHIPPER', 'CARRIER'], {\n    errorMap: () => ({ message: 'ユーザータイプを選択してください' }),\n  }),\n  companyName: z.string().min(1, '会社名を入力してください'),\n  contactPerson: z.string().min(1, '担当者名を入力してください'),\n  phone: z.string().min(10, '有効な電話番号を入力してください'),\n  postalCode: z.string().optional(),\n  address: z.string().optional(),\n})\n\n// ログイン\nexport const loginSchema = z.object({\n  email: z.string().email('有効なメールアドレスを入力してください'),\n  password: z.string().min(1, 'パスワードを入力してください'),\n})\n\n// 配送案件作成\nexport const createShipmentSchema = z.object({\n  cargoName: z.string().min(1, '荷物名を入力してください'),\n  cargoDescription: z.string().optional(),\n  cargoWeight: z.number().positive('重量は正の数である必要があります'),\n  cargoVolume: z.number().positive().optional(),\n  cargoValue: z.number().positive().optional(),\n  \n  pickupAddress: z.string().min(1, '集荷先住所を入力してください'),\n  pickupCity: z.string().min(1, '集荷先市区町村を入力してください'),\n  pickupPrefecture: z.string().min(1, '集荷先都道府県を入力してください'),\n  pickupPostalCode: z.string().min(1, '集荷先郵便番号を入力してください'),\n  pickupDate: z.string().min(1, '集荷日を入力してください'),\n  pickupTimeFrom: z.string().optional(),\n  pickupTimeTo: z.string().optional(),\n  \n  deliveryAddress: z.string().min(1, '配送先住所を入力してください'),\n  deliveryCity: z.string().min(1, '配送先市区町村を入力してください'),\n  deliveryPrefecture: z.string().min(1, '配送先都道府県を入力してください'),\n  deliveryPostalCode: z.string().min(1, '配送先郵便番号を入力してください'),\n  deliveryDate: z.string().min(1, '配送日を入力してください'),\n  deliveryTimeFrom: z.string().optional(),\n  deliveryTimeTo: z.string().optional(),\n  \n  requiredVehicleType: z.enum([\n    'LIGHT_TRUCK',\n    'SMALL_TRUCK',\n    'MEDIUM_TRUCK',\n    'LARGE_TRUCK',\n    'TRAILER',\n    'REFRIGERATED',\n    'FLATBED',\n    'WING',\n  ]),\n  needsHelper: z.boolean().default(false),\n  needsLiftGate: z.boolean().default(false),\n  temperature: z.string().optional(),\n  specialInstructions: z.string().optional(),\n  \n  budget: z.number().positive('予算は正の数である必要があります'),\n})\n\n// オファー作成\nexport const createOfferSchema = z.object({\n  shipmentId: z.string().min(1, '配送案件IDが必要です'),\n  proposedPrice: z.number().positive('提案金額は正の数である必要があります'),\n  message: z.string().optional(),\n  vehicleInfo: z.string().optional(),\n  estimatedPickupTime: z.string().optional(),\n  estimatedDeliveryTime: z.string().optional(),\n})\n\nexport type RegisterInput = z.infer<typeof registerSchema>\nexport type LoginInput = z.infer<typeof loginSchema>\nexport type CreateShipmentInput = z.infer<typeof createShipmentSchema>\nexport type CreateOfferInput = z.infer<typeof createOfferSchema>\n\n","size_bytes":3424},"src/app/shipments/search/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Search, \n  MapPin, \n  Calendar, \n  Weight, \n  DollarSign, \n  Truck, \n  Filter,\n  Star,\n  Clock,\n  User,\n  Phone,\n  Mail,\n  Eye,\n  Heart,\n  Share2,\n  ArrowRight,\n  Package,\n  X,\n  CheckCircle2\n} from 'lucide-react'\n\ninterface Shipment {\n  id: string\n  title: string\n  description: string\n  shipper: {\n    id: string\n    companyName: string\n    contactPerson: string\n    rating: number\n    creditScore: number\n  }\n  pickupLocation: {\n    prefecture: string\n    address: string\n    dateTime: string\n  }\n  deliveryLocation: {\n    prefecture: string\n    address: string\n    dateTime: string\n  }\n  cargo: {\n    type: string\n    weight: number\n    size: string\n    specialRequirements?: string\n  }\n  vehicleType: string\n  price: number\n  urgency: 'urgent' | 'high' | 'normal' | 'low'\n  status: 'available' | 'matched' | 'in_transit' | 'delivered'\n  createdAt: string\n  aiMatchScore?: number\n  isBookmarked?: boolean\n}\n\nexport default function ShipmentSearchPage() {\n  const router = useRouter()\n  const [shipments, setShipments] = useState<Shipment[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchForm, setSearchForm] = useState({\n    pickupPrefecture: '',\n    deliveryPrefecture: '',\n    cargoType: '',\n    vehicleType: '',\n    urgency: '',\n    minPrice: '',\n    maxPrice: '',\n    dateRange: ''\n  })\n  const [sortBy, setSortBy] = useState('newest')\n  const [showFilters, setShowFilters] = useState(false)\n  const [showOfferModal, setShowOfferModal] = useState(false)\n  const [selectedShipment, setSelectedShipment] = useState<Shipment | null>(null)\n  const [offerForm, setOfferForm] = useState({\n    proposedPrice: '',\n    message: '',\n    estimatedPickupTime: '',\n    estimatedDeliveryTime: ''\n  })\n  const [shareMessage, setShareMessage] = useState('')\n\n  useEffect(() => {\n    loadShipments()\n    loadBookmarks()\n  }, [])\n\n  const loadBookmarks = () => {\n    const bookmarks = localStorage.getItem('shipment_bookmarks')\n    if (bookmarks) {\n      const bookmarkedIds = JSON.parse(bookmarks)\n      setShipments(prev => prev.map(shipment => ({\n        ...shipment,\n        isBookmarked: bookmarkedIds.includes(shipment.id)\n      })))\n    }\n  }\n\n  const loadShipments = async () => {\n    setLoading(true)\n    try {\n      const sampleShipments: Shipment[] = [\n        {\n          id: '1',\n          title: '東京から大阪への大型貨物配送',\n          description: '大型機械の輸送をお願いします。取り扱いには注意が必要です。',\n          shipper: {\n            id: 'shipper-1',\n            companyName: 'サンプル商事株式会社',\n            contactPerson: '佐藤太郎',\n            rating: 4.5,\n            creditScore: 90\n          },\n          pickupLocation: {\n            prefecture: '東京都',\n            address: '品川区大崎1-2-3',\n            dateTime: '2024-01-20 09:00'\n          },\n          deliveryLocation: {\n            prefecture: '大阪府',\n            address: '大阪市北区梅田1-1-1',\n            dateTime: '2024-01-21 15:00'\n          },\n          cargo: {\n            type: '大型機械',\n            weight: 5000,\n            size: '300cm × 200cm × 150cm',\n            specialRequirements: '取り扱い注意、クレーン作業必要'\n          },\n          vehicleType: '大型トラック',\n          price: 150000,\n          urgency: 'normal',\n          status: 'available',\n          createdAt: '2024-01-15',\n          aiMatchScore: 95,\n          isBookmarked: false\n        },\n        {\n          id: '2',\n          title: '名古屋から福岡への冷蔵貨物配送',\n          description: '生鮮食品の冷蔵輸送をお願いします。温度管理が重要です。',\n          shipper: {\n            id: 'shipper-2',\n            companyName: 'フレッシュフーズ株式会社',\n            contactPerson: '田中花子',\n            rating: 4.8,\n            creditScore: 95\n          },\n          pickupLocation: {\n            prefecture: '愛知県',\n            address: '名古屋市中区栄2-3-4',\n            dateTime: '2024-01-22 08:00'\n          },\n          deliveryLocation: {\n            prefecture: '福岡県',\n            address: '福岡市博多区博多駅前1-1-1',\n            dateTime: '2024-01-23 12:00'\n          },\n          cargo: {\n            type: '生鮮食品',\n            weight: 2000,\n            size: '200cm × 150cm × 100cm',\n            specialRequirements: '冷蔵輸送必須、温度-2℃以下'\n          },\n          vehicleType: '冷蔵車',\n          price: 120000,\n          urgency: 'high',\n          status: 'available',\n          createdAt: '2024-01-16',\n          aiMatchScore: 87,\n          isBookmarked: false\n        },\n        {\n          id: '3',\n          title: '札幌から東京への急便配送',\n          description: '緊急書類の配送をお願いします。時間厳守でお願いします。',\n          shipper: {\n            id: 'shipper-3',\n            companyName: '北海道物流株式会社',\n            contactPerson: '鈴木一郎',\n            rating: 4.2,\n            creditScore: 85\n          },\n          pickupLocation: {\n            prefecture: '北海道',\n            address: '札幌市中央区大通西1-1-1',\n            dateTime: '2024-01-18 10:00'\n          },\n          deliveryLocation: {\n            prefecture: '東京都',\n            address: '千代田区丸の内1-1-1',\n            dateTime: '2024-01-19 16:00'\n          },\n          cargo: {\n            type: '書類',\n            weight: 5,\n            size: '30cm × 20cm × 5cm',\n            specialRequirements: '時間厳守、受取人確認必須'\n          },\n          vehicleType: '軽トラック',\n          price: 80000,\n          urgency: 'urgent',\n          status: 'available',\n          createdAt: '2024-01-17',\n          aiMatchScore: 92,\n          isBookmarked: false\n        }\n      ]\n\n      setShipments(sampleShipments)\n      loadBookmarks()\n    } catch (error) {\n      console.error('Error loading shipments:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault()\n    loadShipments()\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setSearchForm(prev => ({ ...prev, [field]: value }))\n  }\n\n  const handleBookmark = (shipmentId: string) => {\n    const bookmarks = localStorage.getItem('shipment_bookmarks')\n    let bookmarkedIds: string[] = bookmarks ? JSON.parse(bookmarks) : []\n    \n    if (bookmarkedIds.includes(shipmentId)) {\n      bookmarkedIds = bookmarkedIds.filter(id => id !== shipmentId)\n    } else {\n      bookmarkedIds.push(shipmentId)\n    }\n    \n    localStorage.setItem('shipment_bookmarks', JSON.stringify(bookmarkedIds))\n    \n    setShipments(prev => prev.map(shipment => \n      shipment.id === shipmentId \n        ? { ...shipment, isBookmarked: !shipment.isBookmarked }\n        : shipment\n    ))\n  }\n\n  const handleShare = async (shipment: Shipment) => {\n    const url = `${window.location.origin}/shipments/${shipment.id}`\n    try {\n      await navigator.clipboard.writeText(url)\n      setShareMessage('URLをコピーしました！')\n      setTimeout(() => setShareMessage(''), 3000)\n    } catch (error) {\n      console.error('Failed to copy:', error)\n    }\n  }\n\n  const handleViewDetails = (shipmentId: string) => {\n    router.push(`/shipments/${shipmentId}`)\n  }\n\n  const handleOfferClick = (shipment: Shipment) => {\n    setSelectedShipment(shipment)\n    setShowOfferModal(true)\n  }\n\n  const handleSubmitOffer = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    try {\n      const token = localStorage.getItem('token')\n      if (!token) {\n        alert('ログインが必要です')\n        router.push('/login')\n        return\n      }\n\n      // TODO: API実装\n      console.log('Submitting offer:', {\n        shipmentId: selectedShipment?.id,\n        ...offerForm\n      })\n\n      alert('応募が完了しました！')\n      setShowOfferModal(false)\n      setOfferForm({\n        proposedPrice: '',\n        message: '',\n        estimatedPickupTime: '',\n        estimatedDeliveryTime: ''\n      })\n    } catch (error) {\n      console.error('Error submitting offer:', error)\n      alert('応募に失敗しました')\n    }\n  }\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'urgent': return 'text-red-600 bg-red-100'\n      case 'high': return 'text-orange-600 bg-orange-100'\n      case 'normal': return 'text-blue-600 bg-blue-100'\n      case 'low': return 'text-green-600 bg-green-100'\n      default: return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  const getUrgencyText = (urgency: string) => {\n    switch (urgency) {\n      case 'urgent': return '緊急'\n      case 'high': return '高'\n      case 'normal': return '通常'\n      case 'low': return '低'\n      default: return '不明'\n    }\n  }\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'\n        }`}\n      />\n    ))\n  }\n\n  const prefectures = [\n    '北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県',\n    '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',\n    '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県',\n    '静岡県', '愛知県', '三重県', '滋賀県', '京都府', '大阪府', '兵庫県',\n    '奈良県', '和歌山県', '鳥取県', '島根県', '岡山県', '広島県', '山口県',\n    '徳島県', '香川県', '愛媛県', '高知県', '福岡県', '佐賀県', '長崎県',\n    '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'\n  ]\n\n  const cargoTypes = [\n    '一般貨物', '冷蔵・冷凍', '危険物', '生鮮食品', '精密機器', '美術品', '医薬品', 'その他'\n  ]\n\n  const vehicleTypes = [\n    '軽トラック', '小型トラック', '中型トラック', '大型トラック', 'トレーラー', '冷凍車', '冷蔵車', 'その他'\n  ]\n\n  const urgencyLevels = [\n    { value: 'urgent', label: '緊急（24時間以内）' },\n    { value: 'high', label: '高（3日以内）' },\n    { value: 'normal', label: '通常（1週間以内）' },\n    { value: 'low', label: '低（2週間以内）' }\n  ]\n\n  return (\n    <DashboardLayout>\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">荷物検索</h1>\n          <p className=\"text-gray-600\">条件に合う配送案件を検索できます</p>\n        </div>\n\n        {/* 共有メッセージ */}\n        {shareMessage && (\n          <div className=\"mb-6 bg-green-50 border border-green-200 rounded-lg p-4 flex items-center animate-fade-in\">\n            <CheckCircle2 className=\"h-5 w-5 text-green-600 mr-3\" />\n            <p className=\"text-sm text-green-700\">{shareMessage}</p>\n          </div>\n        )}\n\n        {/* 検索フォーム */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-6 mb-8\">\n          <form onSubmit={handleSearch} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">集荷都道府県</label>\n                <select\n                  value={searchForm.pickupPrefecture}\n                  onChange={(e) => handleInputChange('pickupPrefecture', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"\">選択してください</option>\n                  {prefectures.map(pref => (\n                    <option key={pref} value={pref}>{pref}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">配送先都道府県</label>\n                <select\n                  value={searchForm.deliveryPrefecture}\n                  onChange={(e) => handleInputChange('deliveryPrefecture', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"\">選択してください</option>\n                  {prefectures.map(pref => (\n                    <option key={pref} value={pref}>{pref}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">荷物の種類</label>\n                <select\n                  value={searchForm.cargoType}\n                  onChange={(e) => handleInputChange('cargoType', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"\">選択してください</option>\n                  {cargoTypes.map(type => (\n                    <option key={type} value={type}>{type}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">車両タイプ</label>\n                <select\n                  value={searchForm.vehicleType}\n                  onChange={(e) => handleInputChange('vehicleType', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"\">選択してください</option>\n                  {vehicleTypes.map(type => (\n                    <option key={type} value={type}>{type}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            <div className=\"flex flex-wrap gap-4\">\n              <button\n                type=\"button\"\n                onClick={() => setShowFilters(!showFilters)}\n                className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                <Filter className=\"h-4 w-4\" />\n                <span>詳細フィルター</span>\n              </button>\n              <button\n                type=\"submit\"\n                className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n              >\n                <Search className=\"h-4 w-4\" />\n                <span>検索</span>\n              </button>\n            </div>\n\n            {showFilters && (\n              <div className=\"border-t pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">緊急度</label>\n                    <select\n                      value={searchForm.urgency}\n                      onChange={(e) => handleInputChange('urgency', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      <option value=\"\">すべて</option>\n                      {urgencyLevels.map(level => (\n                        <option key={level.value} value={level.value}>{level.label}</option>\n                      ))}\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">最低価格</label>\n                    <input\n                      type=\"number\"\n                      value={searchForm.minPrice}\n                      onChange={(e) => handleInputChange('minPrice', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"0\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">最高価格</label>\n                    <input\n                      type=\"number\"\n                      value={searchForm.maxPrice}\n                      onChange={(e) => handleInputChange('maxPrice', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"1000000\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n          </form>\n        </div>\n\n        {/* 検索結果 */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            検索結果 ({shipments.length}件)\n          </h2>\n          <div className=\"flex items-center space-x-4\">\n            <select\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            >\n              <option value=\"newest\">新しい順</option>\n              <option value=\"oldest\">古い順</option>\n              <option value=\"price_high\">価格の高い順</option>\n              <option value=\"price_low\">価格の安い順</option>\n              <option value=\"urgency\">緊急度順</option>\n            </select>\n          </div>\n        </div>\n\n        {loading ? (\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">検索中...</p>\n          </div>\n        ) : shipments.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p className=\"text-gray-600\">該当する荷物はありません</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {shipments.map((shipment) => (\n              <div key={shipment.id} className=\"bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow\">\n                <div className=\"p-6\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-lg font-semibold text-gray-900\">{shipment.title}</h3>\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getUrgencyColor(shipment.urgency)}`}>\n                          {getUrgencyText(shipment.urgency)}\n                        </span>\n                        {shipment.aiMatchScore && (\n                          <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-purple-100 text-purple-800\">\n                            AIマッチング: {shipment.aiMatchScore}%\n                          </span>\n                        )}\n                      </div>\n                      <p className=\"text-gray-600 mb-3\">{shipment.description}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <button\n                        onClick={() => handleBookmark(shipment.id)}\n                        className={`p-2 rounded-lg transition-colors ${\n                          shipment.isBookmarked ? 'text-red-600 bg-red-100' : 'text-gray-400 hover:text-red-600 hover:bg-red-50'\n                        }`}\n                        title=\"ブックマーク\"\n                      >\n                        <Heart className={`h-5 w-5 ${shipment.isBookmarked ? 'fill-current' : ''}`} />\n                      </button>\n                      <button \n                        onClick={() => handleShare(shipment)}\n                        className=\"p-2 rounded-lg text-gray-400 hover:text-gray-600 hover:bg-gray-50\"\n                        title=\"共有\"\n                      >\n                        <Share2 className=\"h-5 w-5\" />\n                      </button>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-4\">\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-700 mb-2\">集荷情報</h4>\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm text-gray-600\">\n                          <MapPin className=\"h-4 w-4 inline mr-1\" />\n                          {shipment.pickupLocation.prefecture} {shipment.pickupLocation.address}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          <Calendar className=\"h-4 w-4 inline mr-1\" />\n                          {new Date(shipment.pickupLocation.dateTime).toLocaleString('ja-JP')}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-700 mb-2\">配送先情報</h4>\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm text-gray-600\">\n                          <MapPin className=\"h-4 w-4 inline mr-1\" />\n                          {shipment.deliveryLocation.prefecture} {shipment.deliveryLocation.address}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          <Calendar className=\"h-4 w-4 inline mr-1\" />\n                          {new Date(shipment.deliveryLocation.dateTime).toLocaleString('ja-JP')}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-700 mb-2\">荷物情報</h4>\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm text-gray-600\">\n                          <Package className=\"h-4 w-4 inline mr-1\" />\n                          {shipment.cargo.type}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          <Weight className=\"h-4 w-4 inline mr-1\" />\n                          {shipment.cargo.weight}kg\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          サイズ: {shipment.cargo.size}\n                        </p>\n                        {shipment.cargo.specialRequirements && (\n                          <p className=\"text-sm text-orange-600\">\n                            特記事項: {shipment.cargo.specialRequirements}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-700 mb-2\">運送情報</h4>\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm text-gray-600\">\n                          <Truck className=\"h-4 w-4 inline mr-1\" />\n                          {shipment.vehicleType}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          <Clock className=\"h-4 w-4 inline mr-1\" />\n                          投稿日: {new Date(shipment.createdAt).toLocaleDateString('ja-JP')}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-700 mb-2\">荷主情報</h4>\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm text-gray-600\">\n                          <User className=\"h-4 w-4 inline mr-1\" />\n                          {shipment.shipper.companyName}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          担当: {shipment.shipper.contactPerson}\n                        </p>\n                        <div className=\"flex items-center space-x-1\">\n                          {renderStars(shipment.shipper.rating)}\n                          <span className=\"text-sm text-gray-600\">({shipment.shipper.rating})</span>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">\n                          信用スコア: {shipment.shipper.creditScore}点\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between items-center pt-4 border-t border-gray-200\">\n                    <div className=\"text-2xl font-bold text-gray-900\">\n                      ¥{shipment.price?.toLocaleString() || '未設定'}\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <button \n                        onClick={() => handleViewDetails(shipment.id)}\n                        className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 flex items-center space-x-2 transition-colors\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                        <span>詳細を見る</span>\n                      </button>\n                      <button \n                        onClick={() => handleOfferClick(shipment)}\n                        className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 transition-colors\"\n                      >\n                        <span>応募する</span>\n                        <ArrowRight className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 応募モーダル */}\n      {showOfferModal && selectedShipment && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-bold text-gray-900\">配送案件に応募</h2>\n                <button\n                  onClick={() => setShowOfferModal(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <X className=\"h-6 w-6\" />\n                </button>\n              </div>\n\n              <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">{selectedShipment.title}</h3>\n                <p className=\"text-sm text-gray-600 mb-2\">{selectedShipment.description}</p>\n                <div className=\"text-lg font-bold text-gray-900\">\n                  予算: ¥{selectedShipment.price?.toLocaleString() || '未設定'}\n                </div>\n              </div>\n\n              <form onSubmit={handleSubmitOffer} className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    提案金額 (円) <span className=\"text-red-500\">*</span>\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={offerForm.proposedPrice}\n                    onChange={(e) => setOfferForm(prev => ({ ...prev, proposedPrice: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"例: 100000\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">メッセージ</label>\n                  <textarea\n                    value={offerForm.message}\n                    onChange={(e) => setOfferForm(prev => ({ ...prev, message: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    rows={4}\n                    placeholder=\"運送会社からのメッセージをご記入ください\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">集荷予定時間</label>\n                    <input\n                      type=\"datetime-local\"\n                      value={offerForm.estimatedPickupTime}\n                      onChange={(e) => setOfferForm(prev => ({ ...prev, estimatedPickupTime: e.target.value }))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">配送予定時間</label>\n                    <input\n                      type=\"datetime-local\"\n                      value={offerForm.estimatedDeliveryTime}\n                      onChange={(e) => setOfferForm(prev => ({ ...prev, estimatedDeliveryTime: e.target.value }))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-3 pt-4\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowOfferModal(false)}\n                    className=\"px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\n                  >\n                    キャンセル\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n                  >\n                    応募する\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      )}\n    </DashboardLayout>\n  )\n}\n","size_bytes":31071},"src/app/dashboard/limited-shipments/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Package, \n  Search, \n  Filter, \n  Star, \n  Clock, \n  MapPin, \n  Calendar, \n  Weight, \n  Truck, \n  DollarSign, \n  Eye, \n  Bookmark,\n  Building2,\n  User,\n  Phone,\n  Mail,\n  AlertCircle,\n  CheckCircle,\n  Crown,\n  Zap\n} from 'lucide-react'\n\ninterface LimitedShipment {\n  id: string\n  cargoName: string\n  cargoDescription: string\n  status: 'OPEN' | 'MATCHED' | 'IN_TRANSIT' | 'DELIVERED' | 'CANCELLED'\n  pickupPrefecture: string\n  pickupCity: string\n  deliveryPrefecture: string\n  deliveryCity: string\n  pickupDate: string\n  deliveryDate: string\n  cargoWeight: number\n  requiredVehicleType: string\n  budget: number\n  specialConditions: string[]\n  priority: 'high' | 'medium' | 'low'\n  isUrgent: boolean\n  isPremium: boolean\n  isBookmarked?: boolean\n  shipper: {\n    companyName: string\n    contactPerson: string\n    phone: string\n    email: string\n  }\n  createdAt: string\n  expiresAt: string\n}\n\nexport default function LimitedShipmentsPage() {\n  const router = useRouter()\n  const [shipments, setShipments] = useState<LimitedShipment[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [priorityFilter, setPriorityFilter] = useState<'all' | 'high' | 'medium' | 'low'>('all')\n  const [typeFilter, setTypeFilter] = useState<'all' | 'urgent' | 'premium' | 'special'>('all')\n\n  useEffect(() => {\n    loadLimitedShipments()\n  }, [])\n\n  const loadLimitedShipments = async () => {\n    try {\n      const bookmarks = localStorage.getItem('limited_shipment_bookmarks')\n      const bookmarkedIds: string[] = bookmarks ? JSON.parse(bookmarks) : []\n      \n      // サンプルデータ\n      const sampleShipments: LimitedShipment[] = [\n        {\n          id: '1',\n          cargoName: '医療機器（緊急輸送）',\n          cargoDescription: '手術用医療機器の緊急輸送。温度管理必須。',\n          status: 'OPEN',\n          pickupPrefecture: '東京都',\n          pickupCity: '港区',\n          deliveryPrefecture: '大阪府',\n          deliveryCity: '大阪市',\n          pickupDate: '2024-01-20',\n          deliveryDate: '2024-01-20',\n          cargoWeight: 50,\n          requiredVehicleType: '冷蔵車',\n          budget: 150000,\n          specialConditions: ['緊急輸送', '温度管理', '医療機器', '24時間対応'],\n          priority: 'high',\n          isUrgent: true,\n          isPremium: true,\n          shipper: {\n            companyName: 'メディカルサプライ株式会社',\n            contactPerson: '山田太郎',\n            phone: '03-1234-5678',\n            email: 'yamada@medical-supply.co.jp'\n          },\n          createdAt: '2024-01-19T10:00:00',\n          expiresAt: '2024-01-20T18:00:00'\n        },\n        {\n          id: '2',\n          cargoName: '美術品（特別輸送）',\n          cargoDescription: '高価な美術品の特別輸送。専用車両・警備員付き。',\n          status: 'OPEN',\n          pickupPrefecture: '京都府',\n          pickupCity: '京都市',\n          deliveryPrefecture: '東京都',\n          deliveryCity: '渋谷区',\n          pickupDate: '2024-01-25',\n          deliveryDate: '2024-01-25',\n          cargoWeight: 200,\n          requiredVehicleType: '特別車両',\n          budget: 500000,\n          specialConditions: ['美術品輸送', '警備員付き', '専用車両', '保険必須'],\n          priority: 'high',\n          isUrgent: false,\n          isPremium: true,\n          shipper: {\n            companyName: 'アートギャラリー京都',\n            contactPerson: '佐藤花子',\n            phone: '075-1234-5678',\n            email: 'sato@art-gallery-kyoto.co.jp'\n          },\n          createdAt: '2024-01-18T14:00:00',\n          expiresAt: '2024-01-24T17:00:00'\n        },\n        {\n          id: '3',\n          cargoName: '危険物（化学薬品）',\n          cargoDescription: '化学薬品の輸送。危険物輸送資格必須。',\n          status: 'OPEN',\n          pickupPrefecture: '愛知県',\n          pickupCity: '名古屋市',\n          deliveryPrefecture: '神奈川県',\n          deliveryCity: '横浜市',\n          pickupDate: '2024-01-22',\n          deliveryDate: '2024-01-23',\n          cargoWeight: 1000,\n          requiredVehicleType: '危険物輸送車',\n          budget: 200000,\n          specialConditions: ['危険物輸送', '資格必須', '専用車両', '安全対策'],\n          priority: 'medium',\n          isUrgent: false,\n          isPremium: false,\n          shipper: {\n            companyName: 'ケミカル工業株式会社',\n            contactPerson: '田中次郎',\n            phone: '052-1234-5678',\n            email: 'tanaka@chemical-industry.co.jp'\n          },\n          createdAt: '2024-01-17T09:00:00',\n          expiresAt: '2024-01-21T17:00:00'\n        },\n        {\n          id: '4',\n          cargoName: '生鮮食品（深夜配送）',\n          cargoDescription: '生鮮食品の深夜配送。早朝到着必須。',\n          status: 'OPEN',\n          pickupPrefecture: '青森県',\n          pickupCity: '青森市',\n          deliveryPrefecture: '東京都',\n          deliveryCity: '中央区',\n          pickupDate: '2024-01-21',\n          deliveryDate: '2024-01-22',\n          cargoWeight: 300,\n          requiredVehicleType: '冷蔵車',\n          budget: 80000,\n          specialConditions: ['深夜配送', '早朝到着', '冷蔵輸送', '鮮度保持'],\n          priority: 'medium',\n          isUrgent: true,\n          isPremium: false,\n          shipper: {\n            companyName: '青森フルーツ農協',\n            contactPerson: '鈴木一郎',\n            phone: '017-1234-5678',\n            email: 'suzuki@aomori-fruits.co.jp'\n          },\n          createdAt: '2024-01-16T16:00:00',\n          expiresAt: '2024-01-20T20:00:00'\n        }\n      ]\n      \n      // ブックマーク状態を適用\n      const shipmentsWithBookmarks = sampleShipments.map(shipment => ({\n        ...shipment,\n        isBookmarked: bookmarkedIds.includes(shipment.id)\n      }))\n      \n      setShipments(shipmentsWithBookmarks)\n    } catch (error) {\n      console.error('Error loading limited shipments:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getPriorityInfo = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return { label: '高優先度', color: 'bg-red-100 text-red-800', icon: AlertCircle }\n      case 'medium':\n        return { label: '中優先度', color: 'bg-yellow-100 text-yellow-800', icon: Clock }\n      case 'low':\n        return { label: '低優先度', color: 'bg-green-100 text-green-800', icon: CheckCircle }\n      default:\n        return { label: '不明', color: 'bg-gray-100 text-gray-800', icon: Clock }\n    }\n  }\n\n  const filteredShipments = shipments.filter(shipment => {\n    const matchesSearch = searchTerm === '' || \n      shipment.cargoName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      shipment.cargoDescription.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      shipment.specialConditions.some(condition => \n        condition.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    \n    const matchesPriority = priorityFilter === 'all' || shipment.priority === priorityFilter\n    \n    const matchesType = typeFilter === 'all' || \n      (typeFilter === 'urgent' && shipment.isUrgent) ||\n      (typeFilter === 'premium' && shipment.isPremium) ||\n      (typeFilter === 'special' && !shipment.isUrgent && !shipment.isPremium)\n    \n    return matchesSearch && matchesPriority && matchesType\n  })\n\n  const handleBookmark = (shipmentId: string) => {\n    const bookmarks = localStorage.getItem('limited_shipment_bookmarks')\n    let bookmarkedIds: string[] = bookmarks ? JSON.parse(bookmarks) : []\n    \n    if (bookmarkedIds.includes(shipmentId)) {\n      bookmarkedIds = bookmarkedIds.filter(id => id !== shipmentId)\n    } else {\n      bookmarkedIds.push(shipmentId)\n    }\n    \n    localStorage.setItem('limited_shipment_bookmarks', JSON.stringify(bookmarkedIds))\n    \n    // UI更新のためにshipmentsを再レンダリング\n    loadLimitedShipments()\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">限定荷物</h1>\n        <p className=\"text-gray-600\">特別な条件や緊急度の高い荷物をご確認いただけます</p>\n      </div>\n\n      {/* 検索フィルター */}\n      <div className=\"bg-white rounded-lg shadow-sm border mb-6\">\n        <div className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"荷物名、条件で検索...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div>\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"h-4 w-4 text-gray-500\" />\n                <select\n                  value={priorityFilter}\n                  onChange={(e) => setPriorityFilter(e.target.value as any)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">すべての優先度</option>\n                  <option value=\"high\">高優先度</option>\n                  <option value=\"medium\">中優先度</option>\n                  <option value=\"low\">低優先度</option>\n                </select>\n              </div>\n            </div>\n            <div>\n              <select\n                value={typeFilter}\n                onChange={(e) => setTypeFilter(e.target.value as any)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"all\">すべてのタイプ</option>\n                <option value=\"urgent\">緊急</option>\n                <option value=\"premium\">プレミアム</option>\n                <option value=\"special\">特別条件</option>\n              </select>\n            </div>\n            <div>\n              <button\n                onClick={() => {\n                  setSearchTerm('')\n                  setPriorityFilter('all')\n                  setTypeFilter('all')\n                }}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 text-gray-700\"\n              >\n                フィルターをクリア\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 限定荷物一覧 */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            限定荷物一覧 ({filteredShipments.length}件)\n          </h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : filteredShipments.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>条件に一致する限定荷物はありません</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {filteredShipments.map((shipment) => {\n              const priorityInfo = getPriorityInfo(shipment.priority)\n              const PriorityIcon = priorityInfo.icon\n              \n              return (\n                <div key={shipment.id} className=\"p-6 hover:bg-gray-50\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-lg font-medium text-gray-900\">\n                          {shipment.cargoName}\n                        </h3>\n                        {shipment.isUrgent && (\n                          <span className=\"flex items-center px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800\">\n                            <Zap className=\"h-3 w-3 mr-1\" />\n                            緊急\n                          </span>\n                        )}\n                        {shipment.isPremium && (\n                          <span className=\"flex items-center px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800\">\n                            <Crown className=\"h-3 w-3 mr-1\" />\n                            プレミアム\n                          </span>\n                        )}\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full flex items-center space-x-1 ${priorityInfo.color}`}>\n                          <PriorityIcon className=\"h-3 w-3\" />\n                          <span>{priorityInfo.label}</span>\n                        </span>\n                      </div>\n                      \n                      <p className=\"text-sm text-gray-600 mb-3\">{shipment.cargoDescription}</p>\n                      \n                      {/* 特別条件 */}\n                      <div className=\"mb-3\">\n                        <h4 className=\"text-sm font-medium text-gray-800 mb-2\">特別条件</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {shipment.specialConditions.map((condition, index) => (\n                            <span\n                              key={index}\n                              className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\"\n                            >\n                              {condition}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* 基本情報 */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-600 mb-4\">\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>{shipment.pickupPrefecture} → {shipment.deliveryPrefecture}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>{new Date(shipment.pickupDate).toLocaleDateString()}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Weight className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>{shipment.cargoWeight}kg</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>¥{shipment.budget.toLocaleString()}</span>\n                        </div>\n                      </div>\n\n                      {/* 荷主情報 */}\n                      <div className=\"border-t border-gray-100 pt-3 mb-3\">\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">荷主情報</h4>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-700\">\n                          <div className=\"flex items-center\">\n                            <Building2 className=\"h-4 w-4 mr-2 text-gray-500\" />\n                            <span>{shipment.shipper.companyName}</span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <User className=\"h-4 w-4 mr-2 text-gray-500\" />\n                            <span>{shipment.shipper.contactPerson}</span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Phone className=\"h-4 w-4 mr-2 text-gray-500\" />\n                            <span>{shipment.shipper.phone}</span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Mail className=\"h-4 w-4 mr-2 text-gray-500\" />\n                            <span>{shipment.shipper.email}</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                        <span>登録日: {new Date(shipment.createdAt).toLocaleString('ja-JP')}</span>\n                        <span className=\"text-red-500\">\n                          期限: {new Date(shipment.expiresAt).toLocaleString('ja-JP')}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 ml-4\">\n                      <button\n                        onClick={() => router.push(`/shipments/${shipment.id}`)}\n                        className=\"p-2 text-gray-400 hover:text-blue-600 transition-colors\"\n                        title=\"詳細を見る\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n                      <button\n                        onClick={() => handleBookmark(shipment.id)}\n                        className={`p-2 transition-colors ${\n                          shipment.isBookmarked \n                            ? 'text-yellow-600 bg-yellow-100' \n                            : 'text-gray-400 hover:text-yellow-600 hover:bg-yellow-50'\n                        }`}\n                        title={shipment.isBookmarked ? 'ブックマーク解除' : 'ブックマーク'}\n                      >\n                        <Bookmark className={`h-4 w-4 ${shipment.isBookmarked ? 'fill-current' : ''}`} />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":18646},"src/app/about/page.tsx":{"content":"'use client'\n\nimport Link from 'next/link'\nimport Logo from '@/components/Logo'\nimport { ArrowLeft, MapPin, Phone, Mail, Globe, Building, Users, Target, Award } from 'lucide-react'\n\nexport default function AboutPage() {\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      {/* ヘッダー */}\n      <header className=\"glass sticky top-0 z-50 border-b border-white/20\">\n        <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <Logo width={200} height={60} className=\"w-[150px] h-[45px] sm:w-[200px] sm:h-[60px]\" linkable={false} />\n            </Link>\n            <div className=\"flex items-center space-x-2 sm:space-x-6\">\n              <Link\n                href=\"/login\"\n                className=\"text-slate-700 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-all duration-300 hover:scale-105\"\n              >\n                ログイン\n              </Link>\n              <Link\n                href=\"/register\"\n                className=\"btn-primary text-sm px-6 py-3\"\n              >\n                新規登録\n              </Link>\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* メインコンテンツ */}\n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"mb-8\">\n          <Link \n            href=\"/\" \n            className=\"inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors duration-300 mb-6\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            トップページに戻る\n          </Link>\n          \n          <h1 className=\"text-4xl sm:text-5xl font-bold text-slate-800 mb-4\">\n            会社概要\n          </h1>\n          <p className=\"text-lg text-slate-600\">\n            合同会社SIN JAPANについて\n          </p>\n        </div>\n\n        <div className=\"space-y-8\">\n          {/* 会社基本情報 */}\n          <div className=\"floating-card\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-6 flex items-center\">\n              <Building className=\"h-6 w-6 mr-3 text-blue-600\" />\n              会社基本情報\n            </h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Building className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">会社名</h3>\n                    <p className=\"text-slate-600\">合同会社SIN JAPAN</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <MapPin className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">本社所在地</h3>\n                    <p className=\"text-slate-600\">〒243-0303</p>\n                    <p className=\"text-slate-600\">神奈川県愛甲郡愛川町中津７２８７</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Phone className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">電話番号</h3>\n                    <p className=\"text-slate-600\">046-212-2325</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Phone className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">FAX</h3>\n                    <p className=\"text-slate-600\">046-212-2326</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Mail className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">メールアドレス</h3>\n                    <p className=\"text-slate-600\">info@sinjapan.jp</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Globe className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">ホームページ</h3>\n                    <a \n                      href=\"https://sinjapan.work/\" \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-blue-600 hover:text-blue-700 transition-colors duration-300\"\n                    >\n                      https://sinjapan.work/\n                    </a>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Users className=\"h-5 w-5 text-blue-600 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-slate-800\">事業内容</h3>\n                    <p className=\"text-slate-600\">一般貨物・軽貨物運送</p>\n                    <p className=\"text-slate-600\">物流AIマッチング</p>\n                    <p className=\"text-slate-600\">マーケティング支援</p>\n                    <p className=\"text-slate-600\">WEB制作</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* 企業理念 */}\n          <div className=\"floating-card\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-6 flex items-center\">\n              <Target className=\"h-6 w-6 mr-3 text-blue-600\" />\n              企業理念\n            </h2>\n            \n            <div className=\"space-y-6\">\n              <div className=\"bg-gradient-to-r from-blue-50 to-cyan-50 p-6 rounded-lg\">\n                <h3 className=\"text-xl font-bold text-slate-800 mb-3\">「断らない物流」を実現する</h3>\n                <p className=\"text-slate-700 leading-relaxed\">\n                  私たちは「荷物を断られる…そんな当たり前を変えたい。」という想いから、<br />\n                  「断らない物流」を実現する総合物流企業として、人とITの力で全国に届けられる仕組みを構築しています。\n                </p>\n              </div>\n\n              <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 p-6 rounded-lg\">\n                <h3 className=\"text-xl font-bold text-slate-800 mb-3\">人を大切に、物流を止めない</h3>\n                <p className=\"text-slate-700 leading-relaxed\">\n                  人を大切にし、物流を止めないことが私たちの使命です。<br />\n                  複雑な業務もシンプルに、誰でも使えるシステムを設計し、持続可能な社会をITから支えます。\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* 事業内容詳細 */}\n          <div className=\"floating-card\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-6 flex items-center\">\n              <Award className=\"h-6 w-6 mr-3 text-blue-600\" />\n              事業内容\n            </h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"border-l-4 border-blue-500 pl-4\">\n                  <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">一般貨物・軽貨物輸送</h3>\n                  <p className=\"text-slate-600 text-sm\">\n                    神奈川県愛甲郡愛川町を拠点とした運送事業。関東圏を中心とした軽貨物配送と一般貨物輸送を、自社車両保有＋協力会社ネットワークにより柔軟に対応します。\n                  </p>\n                </div>\n\n                <div className=\"border-l-4 border-green-500 pl-4\">\n                  <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">物流AIマッチング</h3>\n                  <p className=\"text-slate-600 text-sm\">\n                    AIを活用した求荷求車システムの開発・運営。荷主と運送会社を効率的にマッチングし、「断らない物流」を実現します。\n                  </p>\n                </div>\n\n                <div className=\"border-l-4 border-purple-500 pl-4\">\n                  <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">マーケティング支援</h3>\n                  <p className=\"text-slate-600 text-sm\">\n                    ランディングページ・ECサイト構築、SNS広告・SEO・LPO対策など、総合的なマーケティング支援を提供します。\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"border-l-4 border-orange-500 pl-4\">\n                  <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">WEB制作</h3>\n                  <p className=\"text-slate-600 text-sm\">\n                    企業のデジタル化を支援するWEBサイト制作・システム開発を行います。誰でも簡単に使えるシステムを設計します。\n                  </p>\n                </div>\n\n                <div className=\"border-l-4 border-red-500 pl-4\">\n                  <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">海外事業展開</h3>\n                  <p className=\"text-slate-600 text-sm\">\n                    フィリピンを中心とした海外事業展開支援。現地法人設立・店舗ビジネスサポート、美容・医療クリニック運営を行います。\n                  </p>\n                </div>\n\n                <div className=\"border-l-4 border-teal-500 pl-4\">\n                  <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">その他事業</h3>\n                  <p className=\"text-slate-600 text-sm\">\n                    不動産仲介・貸会議室運営、中古車販売（商用車中心）、ライブチャットシステム構築・運用など、多岐にわたる事業を展開しています。\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* お問い合わせ */}\n          <div className=\"floating-card\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-6\">お問い合わせ</h2>\n            <p className=\"text-slate-600 mb-6\">\n              ご質問・ご相談がございましたら、お気軽にお問い合わせください。\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Link \n                href=\"/contact\" \n                className=\"btn-primary text-center\"\n              >\n                お問い合わせフォーム\n              </Link>\n              <Link \n                href=\"/help\" \n                className=\"btn-secondary text-center\"\n              >\n                よくあるご質問\n              </Link>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":11329},"src/app/api/shipments/route.ts":{"content":"import { NextRequest } from 'next/server'\nexport const dynamic = 'force-dynamic'\nimport { getUserFromRequest } from '@/lib/auth'\nimport { createShipmentSchema } from '@/lib/validators'\nimport {\n  successResponse,\n  errorResponse,\n  unauthorizedResponse,\n  forbiddenResponse,\n} from '@/lib/api-response'\nimport prisma from '@/lib/prisma'\n\n// 配送案件一覧取得\nexport async function GET(request: NextRequest) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    const { searchParams } = new URL(request.url)\n    const status = searchParams.get('status')\n    const pickupPrefecture = searchParams.get('pickupPrefecture')\n    const deliveryPrefecture = searchParams.get('deliveryPrefecture')\n    \n    const where: any = {}\n    \n    // 荷主の場合は自分の案件のみ表示\n    if (user.userType === 'SHIPPER') {\n      where.shipperId = user.userId\n    }\n    \n    // ステータスフィルター\n    if (status) {\n      where.status = status\n    }\n    \n    // 集荷地フィルター\n    if (pickupPrefecture) {\n      where.pickupPrefecture = pickupPrefecture\n    }\n    \n    // 配送地フィルター\n    if (deliveryPrefecture) {\n      where.deliveryPrefecture = deliveryPrefecture\n    }\n    \n    const shipments = await prisma.shipment.findMany({\n      where,\n      include: {\n        shipper: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n            phone: true,\n          },\n        },\n        carrier: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n            phone: true,\n          },\n        },\n        offers: {\n          include: {\n            carrier: {\n              select: {\n                id: true,\n                companyName: true,\n                contactPerson: true,\n              },\n            },\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    })\n    \n    return successResponse(shipments)\n  } catch (error) {\n    console.error('Get shipments error:', error)\n    return errorResponse('配送案件の取得に失敗しました', 500)\n  }\n}\n\n// 配送案件作成\nexport async function POST(request: NextRequest) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    // 荷主のみ作成可能\n    if (user.userType !== 'SHIPPER') {\n      return forbiddenResponse('荷主のみが配送案件を作成できます')\n    }\n    \n    // 許可証承認済みユーザーのみ作成可能\n    const userProfile = await prisma.user.findUnique({\n      where: { id: user.userId },\n      select: { verificationStatus: true }\n    })\n    \n    if (userProfile?.verificationStatus !== 'APPROVED') {\n      return forbiddenResponse('許可証が承認されるまで、配送案件を作成できません')\n    }\n    \n    const body = await request.json()\n    \n    // バリデーション\n    const validatedData = createShipmentSchema.parse(body)\n    \n    // 配送案件作成\n    const shipment = await prisma.shipment.create({\n      data: {\n        shipperId: user.userId,\n        cargoName: validatedData.cargoName,\n        cargoDescription: validatedData.cargoDescription,\n        cargoWeight: validatedData.cargoWeight,\n        cargoVolume: validatedData.cargoVolume,\n        cargoValue: validatedData.cargoValue,\n        \n        pickupAddress: validatedData.pickupAddress,\n        pickupCity: validatedData.pickupCity,\n        pickupPrefecture: validatedData.pickupPrefecture,\n        pickupPostalCode: validatedData.pickupPostalCode,\n        pickupDate: new Date(validatedData.pickupDate),\n        pickupTimeFrom: validatedData.pickupTimeFrom,\n        pickupTimeTo: validatedData.pickupTimeTo,\n        \n        deliveryAddress: validatedData.deliveryAddress,\n        deliveryCity: validatedData.deliveryCity,\n        deliveryPrefecture: validatedData.deliveryPrefecture,\n        deliveryPostalCode: validatedData.deliveryPostalCode,\n        deliveryDate: new Date(validatedData.deliveryDate),\n        deliveryTimeFrom: validatedData.deliveryTimeFrom,\n        deliveryTimeTo: validatedData.deliveryTimeTo,\n        \n        requiredVehicleType: validatedData.requiredVehicleType,\n        needsHelper: validatedData.needsHelper,\n        needsLiftGate: validatedData.needsLiftGate,\n        temperature: validatedData.temperature,\n        specialInstructions: validatedData.specialInstructions,\n        \n        budget: validatedData.budget,\n      },\n      include: {\n        shipper: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n            phone: true,\n          },\n        },\n      },\n    })\n    \n    return successResponse(shipment, 201)\n  } catch (error: any) {\n    if (error.name === 'ZodError') {\n      return errorResponse(error.errors[0].message)\n    }\n    console.error('Create shipment error:', error)\n    return errorResponse('配送案件の作成に失敗しました', 500)\n  }\n}\n\n","size_bytes":5107},"src/app/layout.tsx":{"content":"import type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata: Metadata = {\n  title: 'SIN JAPAN LOGI MATCH - 物流マッチングプラットフォーム',\n  description: '荷主と運送会社をつなぐ物流マッチングプラットフォーム',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"ja\">\n      <body className={inter.className}>{children}</body>\n    </html>\n  )\n}\n\n","size_bytes":560},"src/app/dashboard/settings/contract/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  FileText, \n  Calendar, \n  DollarSign, \n  CheckCircle, \n  AlertCircle, \n  Download, \n  Upload,\n  Edit,\n  Save,\n  X,\n  Clock,\n  Shield,\n  User\n} from 'lucide-react'\n\ninterface Contract {\n  id: string\n  contractType: string\n  contractNumber: string\n  startDate: string\n  endDate: string\n  status: 'active' | 'expired' | 'pending' | 'terminated'\n  monthlyFee: number\n  paymentMethod: string\n  autoRenewal: boolean\n  terms: string\n  specialConditions: string\n  contactPerson: string\n  lastUpdated: string\n}\n\nexport default function ContractPage() {\n  const [contracts, setContracts] = useState<Contract[]>([])\n  const [editingContract, setEditingContract] = useState<Contract | null>(null)\n  const [showAddModal, setShowAddModal] = useState(false)\n  const [formData, setFormData] = useState({\n    contractType: '',\n    contractNumber: '',\n    startDate: '',\n    endDate: '',\n    status: 'active' as 'active' | 'expired' | 'pending' | 'terminated',\n    monthlyFee: '',\n    paymentMethod: '',\n    autoRenewal: false,\n    terms: '',\n    specialConditions: '',\n    contactPerson: ''\n  })\n\n  useEffect(() => {\n    loadContracts()\n  }, [])\n\n  const loadContracts = async () => {\n    // サンプルデータ\n    const sampleContracts: Contract[] = [\n      {\n        id: '1',\n        contractType: '基本プラン',\n        contractNumber: 'CNT-2024-001',\n        startDate: '2024-01-01',\n        endDate: '2024-12-31',\n        status: 'active',\n        monthlyFee: 50000,\n        paymentMethod: 'クレジットカード',\n        autoRenewal: true,\n        terms: '月額利用料金に基づく基本サービス契約',\n        specialConditions: '大型貨物輸送の割引適用',\n        contactPerson: '田中太郎',\n        lastUpdated: '2024-01-15'\n      },\n      {\n        id: '2',\n        contractType: 'プレミアムプラン',\n        contractNumber: 'CNT-2024-002',\n        startDate: '2024-02-01',\n        endDate: '2025-01-31',\n        status: 'active',\n        monthlyFee: 100000,\n        paymentMethod: '銀行振込',\n        autoRenewal: true,\n        terms: 'プレミアム機能を含む包括的サービス契約',\n        specialConditions: '24時間サポート、優先マッチング',\n        contactPerson: '佐藤花子',\n        lastUpdated: '2024-01-20'\n      }\n    ]\n\n    setContracts(sampleContracts)\n  }\n\n  const handleAddContract = () => {\n    setFormData({\n      contractType: '',\n      contractNumber: '',\n      startDate: '',\n      endDate: '',\n      status: 'active',\n      monthlyFee: '',\n      paymentMethod: '',\n      autoRenewal: false,\n      terms: '',\n      specialConditions: '',\n      contactPerson: ''\n    })\n    setEditingContract(null)\n    setShowAddModal(true)\n  }\n\n  const handleEditContract = (contract: Contract) => {\n    setFormData({\n      contractType: contract.contractType,\n      contractNumber: contract.contractNumber,\n      startDate: contract.startDate,\n      endDate: contract.endDate,\n      status: contract.status,\n      monthlyFee: contract.monthlyFee.toString(),\n      paymentMethod: contract.paymentMethod,\n      autoRenewal: contract.autoRenewal,\n      terms: contract.terms,\n      specialConditions: contract.specialConditions,\n      contactPerson: contract.contactPerson\n    })\n    setEditingContract(contract)\n    setShowAddModal(true)\n  }\n\n  const handleSaveContract = () => {\n    if (editingContract) {\n      // 編集\n      setContracts(prev => prev.map(contract => \n        contract.id === editingContract.id \n          ? { ...contract, ...formData, monthlyFee: parseFloat(formData.monthlyFee), lastUpdated: new Date().toISOString().split('T')[0] }\n          : contract\n      ))\n    } else {\n      // 新規追加\n      const newContract: Contract = {\n        id: Date.now().toString(),\n        ...formData,\n        monthlyFee: parseFloat(formData.monthlyFee),\n        lastUpdated: new Date().toISOString().split('T')[0]\n      }\n      setContracts(prev => [...prev, newContract])\n    }\n    setShowAddModal(false)\n    setEditingContract(null)\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100'\n      case 'expired': return 'text-red-600 bg-red-100'\n      case 'pending': return 'text-yellow-600 bg-yellow-100'\n      case 'terminated': return 'text-gray-600 bg-gray-100'\n      default: return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active': return '有効'\n      case 'expired': return '期限切れ'\n      case 'pending': return '承認待ち'\n      case 'terminated': return '終了'\n      default: return '不明'\n    }\n  }\n\n  const contractTypes = [\n    '基本プラン', 'スタンダードプラン', 'プレミアムプラン', 'エンタープライズプラン', 'カスタムプラン'\n  ]\n\n  const paymentMethods = [\n    'クレジットカード', '銀行振込', '口座振替', '電子マネー', 'コンビニ払い'\n  ]\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">契約内容</h1>\n            <p className=\"text-gray-600\">契約の詳細情報を管理できます</p>\n          </div>\n          <button\n            onClick={handleAddContract}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n          >\n            <FileText className=\"h-4 w-4\" />\n            <span>契約を追加</span>\n          </button>\n        </div>\n      </div>\n\n      {/* 契約一覧 */}\n      <div className=\"space-y-6\">\n        {contracts.map((contract) => (\n          <div key={contract.id} className=\"bg-white rounded-lg shadow-sm border\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h2 className=\"text-lg font-semibold text-gray-900\">{contract.contractType}</h2>\n                  <p className=\"text-sm text-gray-600\">契約番号: {contract.contractNumber}</p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(contract.status)}`}>\n                    {getStatusText(contract.status)}\n                  </span>\n                  <button\n                    onClick={() => handleEditContract(contract)}\n                    className=\"text-blue-600 hover:text-blue-800\"\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">契約期間</h3>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm text-gray-900\">\n                      <Calendar className=\"h-4 w-4 inline mr-1\" />\n                      開始: {new Date(contract.startDate).toLocaleDateString('ja-JP')}\n                    </p>\n                    <p className=\"text-sm text-gray-900\">\n                      <Calendar className=\"h-4 w-4 inline mr-1\" />\n                      終了: {new Date(contract.endDate).toLocaleDateString('ja-JP')}\n                    </p>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">料金情報</h3>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm text-gray-900\">\n                      <DollarSign className=\"h-4 w-4 inline mr-1\" />\n                      月額料金: ¥{contract.monthlyFee.toLocaleString()}\n                    </p>\n                    <p className=\"text-sm text-gray-900\">\n                      支払い方法: {contract.paymentMethod}\n                    </p>\n                    <p className=\"text-sm text-gray-900\">\n                      自動更新: {contract.autoRenewal ? '有効' : '無効'}\n                    </p>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">連絡先</h3>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm text-gray-900\">\n                      <User className=\"h-4 w-4 inline mr-1\" />\n                      担当者: {contract.contactPerson}\n                    </p>\n                    <p className=\"text-sm text-gray-900\">\n                      <Clock className=\"h-4 w-4 inline mr-1\" />\n                      最終更新: {new Date(contract.lastUpdated).toLocaleDateString('ja-JP')}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-6 space-y-4\">\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">契約条件</h3>\n                  <p className=\"text-sm text-gray-900 bg-gray-50 p-3 rounded-lg\">{contract.terms}</p>\n                </div>\n\n                {contract.specialConditions && (\n                  <div>\n                    <h3 className=\"text-sm font-medium text-gray-700 mb-2\">特別条件</h3>\n                    <p className=\"text-sm text-gray-900 bg-blue-50 p-3 rounded-lg\">{contract.specialConditions}</p>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"mt-6 flex justify-end space-x-2\">\n                <button className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 flex items-center space-x-2\">\n                  <Download className=\"h-4 w-4\" />\n                  <span>契約書をダウンロード</span>\n                </button>\n                <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\">\n                  <Upload className=\"h-4 w-4\" />\n                  <span>契約書をアップロード</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* 追加・編集モーダル */}\n      {showAddModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">\n                  {editingContract ? '契約を編集' : '契約を追加'}\n                </h2>\n                <button\n                  onClick={() => {\n                    setShowAddModal(false)\n                    setEditingContract(null)\n                  }}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <X className=\"h-6 w-6\" />\n                </button>\n              </div>\n            </div>\n\n            <div className=\"p-6 space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">契約タイプ *</label>\n                  <select\n                    value={formData.contractType}\n                    onChange={(e) => setFormData(prev => ({ ...prev, contractType: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">選択してください</option>\n                    {contractTypes.map(type => (\n                      <option key={type} value={type}>{type}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">契約番号 *</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.contractNumber}\n                    onChange={(e) => setFormData(prev => ({ ...prev, contractNumber: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"CNT-2024-001\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">開始日 *</label>\n                  <input\n                    type=\"date\"\n                    required\n                    value={formData.startDate}\n                    onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">終了日 *</label>\n                  <input\n                    type=\"date\"\n                    required\n                    value={formData.endDate}\n                    onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">ステータス *</label>\n                  <select\n                    value={formData.status}\n                    onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as any }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"active\">有効</option>\n                    <option value=\"expired\">期限切れ</option>\n                    <option value=\"pending\">承認待ち</option>\n                    <option value=\"terminated\">終了</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">月額料金 (円) *</label>\n                  <input\n                    type=\"number\"\n                    required\n                    min=\"0\"\n                    value={formData.monthlyFee}\n                    onChange={(e) => setFormData(prev => ({ ...prev, monthlyFee: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"50000\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">支払い方法 *</label>\n                  <select\n                    value={formData.paymentMethod}\n                    onChange={(e) => setFormData(prev => ({ ...prev, paymentMethod: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">選択してください</option>\n                    {paymentMethods.map(method => (\n                      <option key={method} value={method}>{method}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">担当者 *</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.contactPerson}\n                    onChange={(e) => setFormData(prev => ({ ...prev, contactPerson: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"田中太郎\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">自動更新</label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.autoRenewal}\n                    onChange={(e) => setFormData(prev => ({ ...prev, autoRenewal: e.target.checked }))}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-700\">自動更新を有効にする</span>\n                </label>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">契約条件 *</label>\n                <textarea\n                  required\n                  value={formData.terms}\n                  onChange={(e) => setFormData(prev => ({ ...prev, terms: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  rows={3}\n                  placeholder=\"契約の詳細条件を記載してください\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">特別条件</label>\n                <textarea\n                  value={formData.specialConditions}\n                  onChange={(e) => setFormData(prev => ({ ...prev, specialConditions: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  rows={3}\n                  placeholder=\"特別な条件や特記事項があれば記載してください\"\n                />\n              </div>\n            </div>\n\n            <div className=\"px-6 py-4 border-t border-gray-200 flex justify-end space-x-2\">\n              <button\n                onClick={() => {\n                  setShowAddModal(false)\n                  setEditingContract(null)\n                }}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\n              >\n                キャンセル\n              </button>\n              <button\n                onClick={handleSaveContract}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n              >\n                <Save className=\"h-4 w-4\" />\n                <span>{editingContract ? '更新' : '追加'}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </DashboardLayout>\n  )\n}\n\n","size_bytes":19394},"src/app/shipments/new/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Navbar from '@/components/Navbar'\nimport { \n  Package, \n  MapPin, \n  Calendar, \n  Truck, \n  DollarSign, \n  Brain, \n  Target, \n  Star, \n  Shield, \n  Clock, \n  TrendingUp, \n  Award,\n  CheckCircle,\n  ArrowRight\n} from 'lucide-react'\n\ninterface RecommendedCarrier {\n  id: string\n  companyName: string\n  contactPerson: string\n  phone: string\n  email: string\n  rating: number\n  creditScore: number\n  specialties: string[]\n  responseTime: number\n  reliabilityScore: number\n  aiMatchScore: number\n  aiRecommendationReason: string\n  estimatedDeliveryTime: number\n  costEfficiency: number\n}\n\ninterface AISearchResult {\n  carriers: RecommendedCarrier[]\n  aiInsights: {\n    totalMatches: number\n    averageMatchScore: number\n    topSpecialties: string[]\n    marketTrends: string\n  }\n}\n\nexport default function NewShipmentPage() {\n  const router = useRouter()\n  const [user, setUser] = useState<any>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [aiSearching, setAiSearching] = useState(false)\n  const [aiResults, setAiResults] = useState<AISearchResult | null>(null)\n  const [showAIResults, setShowAIResults] = useState(false)\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    pickupLocation: '',\n    pickupPrefecture: '',\n    pickupDateTime: '',\n    deliveryLocation: '',\n    deliveryPrefecture: '',\n    deliveryDateTime: '',\n    cargoType: '',\n    cargoWeight: '',\n    cargoSize: '',\n    requiredVehicleType: 'SMALL_TRUCK',\n    price: '',\n    notes: '',\n    urgency: 'normal',\n    specialRequirements: ''\n  })\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const userData = localStorage.getItem('user')\n    \n    if (!token || !userData) {\n      router.push('/login')\n      return\n    }\n\n    const parsedUser = JSON.parse(userData)\n    if (parsedUser.userType !== 'SHIPPER') {\n      router.push('/dashboard')\n      return\n    }\n\n    setUser(parsedUser)\n  }, [router])\n\n  const performAISearch = async () => {\n    if (!formData.cargoWeight || !formData.cargoType || !formData.pickupPrefecture || !formData.deliveryPrefecture) {\n      alert('AI検索には荷物の重量、種類、集荷・配送先の都道府県が必要です')\n      return\n    }\n\n    setAiSearching(true)\n    try {\n      // AI検索のシミュレーション\n      const mockAISearchResult: AISearchResult = {\n        carriers: [\n          {\n            id: 'carrier-1',\n            companyName: '株式会社トランスロジック',\n            contactPerson: '山田花子',\n            phone: '03-1234-5678',\n            email: 'yamada@translogic.co.jp',\n            rating: 4.8,\n            creditScore: 95,\n            specialties: ['大型貨物', '関東圏', '急便対応'],\n            responseTime: 15,\n            reliabilityScore: 98,\n            aiMatchScore: 95,\n            aiRecommendationReason: '荷物の重量と緊急度に最適な運送会社。過去の実績と高い信用スコアで信頼性が高い。',\n            estimatedDeliveryTime: 6,\n            costEfficiency: 92\n          },\n          {\n            id: 'carrier-2',\n            companyName: '関西物流株式会社',\n            contactPerson: '鈴木一郎',\n            phone: '06-9876-5432',\n            email: 'suzuki@kansai-logistics.co.jp',\n            rating: 4.6,\n            creditScore: 88,\n            specialties: ['冷蔵輸送', '関西圏', '生鮮食品'],\n            responseTime: 25,\n            reliabilityScore: 94,\n            aiMatchScore: 87,\n            aiRecommendationReason: '冷蔵輸送に特化した運送会社で、生鮮食品の輸送実績が豊富。',\n            estimatedDeliveryTime: 8,\n            costEfficiency: 85\n          },\n          {\n            id: 'carrier-3',\n            companyName: '中部運送株式会社',\n            contactPerson: '田村四郎',\n            phone: '052-5555-1234',\n            email: 'tamura@chubu-transport.co.jp',\n            rating: 4.4,\n            creditScore: 82,\n            specialties: ['一般貨物', '中部圏', 'コスト重視'],\n            responseTime: 30,\n            reliabilityScore: 89,\n            aiMatchScore: 78,\n            aiRecommendationReason: 'コストパフォーマンスが良く、中小規模の荷物に適している。',\n            estimatedDeliveryTime: 12,\n            costEfficiency: 95\n          }\n        ],\n        aiInsights: {\n          totalMatches: 3,\n          averageMatchScore: 87,\n          topSpecialties: ['大型貨物', '冷蔵輸送', '関東圏'],\n          marketTrends: '現在、大型貨物の需要が高く、冷蔵輸送の需要も増加傾向にあります。'\n        }\n      }\n      \n      // 実際のAPI呼び出しをシミュレート\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      setAiResults(mockAISearchResult)\n      setShowAIResults(true)\n    } catch (error) {\n      console.error('Error performing AI search:', error)\n      alert('AI検索に失敗しました')\n    } finally {\n      setAiSearching(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError('')\n    setLoading(true)\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/shipments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          ...formData,\n          cargoWeight: parseFloat(formData.cargoWeight),\n          price: parseFloat(formData.price),\n        }),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || '案件の投稿に失敗しました')\n      }\n\n      router.push('/shipments')\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const prefectures = [\n    '北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県',\n    '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',\n    '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県',\n    '岐阜県', '静岡県', '愛知県', '三重県',\n    '滋賀県', '京都府', '大阪府', '兵庫県', '奈良県', '和歌山県',\n    '鳥取県', '島根県', '岡山県', '広島県', '山口県',\n    '徳島県', '香川県', '愛媛県', '高知県',\n    '福岡県', '佐賀県', '長崎県', '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'\n  ]\n\n  const vehicleTypes = [\n    { value: 'LIGHT_TRUCK', label: '軽トラック' },\n    { value: 'SMALL_TRUCK', label: '小型トラック' },\n    { value: 'MEDIUM_TRUCK', label: '中型トラック' },\n    { value: 'LARGE_TRUCK', label: '大型トラック' },\n    { value: 'TRAILER', label: 'トレーラー' },\n    { value: 'REFRIGERATED', label: '冷凍・冷蔵車' },\n    { value: 'FLATBED', label: '平ボディ' },\n    { value: 'WING', label: 'ウィング車' },\n  ]\n\n  const urgencyLevels = [\n    { value: 'urgent', label: '緊急（24時間以内）', color: 'text-red-600' },\n    { value: 'high', label: '高（3日以内）', color: 'text-orange-600' },\n    { value: 'normal', label: '通常（1週間以内）', color: 'text-blue-600' },\n    { value: 'low', label: '低（2週間以内）', color: 'text-green-600' }\n  ]\n\n  const getCreditScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-600 bg-green-100'\n    if (score >= 80) return 'text-blue-600 bg-blue-100'\n    if (score >= 70) return 'text-yellow-600 bg-yellow-100'\n    return 'text-red-600 bg-red-100'\n  }\n\n  const getMatchScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-600'\n    if (score >= 80) return 'text-blue-600'\n    if (score >= 70) return 'text-yellow-600'\n    return 'text-red-600'\n  }\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'\n        }`}\n      />\n    ))\n  }\n\n  if (!user) {\n    return null\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white\">\n      <Navbar />\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12\">\n        <div className=\"mb-8 fade-in-up\">\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-2\">\n            新規案件を投稿\n          </h1>\n          <p className=\"text-gray-600\">\n            配送案件の詳細を入力してください\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-xl\">\n              {error}\n            </div>\n          )}\n\n          {/* 基本情報 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.1s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-blue-600 to-cyan-500 p-3 rounded-xl\">\n                <Package className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">基本情報</h2>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  案件タイトル *\n                </label>\n                <input\n                  type=\"text\"\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"例: 東京から大阪への荷物配送\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  詳細説明 *\n                </label>\n                <textarea\n                  required\n                  rows={4}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"配送内容の詳細を記載してください\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 集荷情報 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.2s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-green-600 to-emerald-500 p-3 rounded-xl\">\n                <MapPin className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">集荷情報</h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  集荷都道府県 *\n                </label>\n                <select\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  value={formData.pickupPrefecture}\n                  onChange={(e) => setFormData({ ...formData, pickupPrefecture: e.target.value })}\n                >\n                  <option value=\"\">選択してください</option>\n                  {prefectures.map((pref) => (\n                    <option key={pref} value={pref}>{pref}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  集荷住所 *\n                </label>\n                <input\n                  type=\"text\"\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"市区町村以降の住所\"\n                  value={formData.pickupLocation}\n                  onChange={(e) => setFormData({ ...formData, pickupLocation: e.target.value })}\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  集荷希望日時 *\n                </label>\n                <input\n                  type=\"datetime-local\"\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  value={formData.pickupDateTime}\n                  onChange={(e) => setFormData({ ...formData, pickupDateTime: e.target.value })}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 配送先情報 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.3s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-purple-600 to-pink-500 p-3 rounded-xl\">\n                <MapPin className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">配送先情報</h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  配送先都道府県 *\n                </label>\n                <select\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  value={formData.deliveryPrefecture}\n                  onChange={(e) => setFormData({ ...formData, deliveryPrefecture: e.target.value })}\n                >\n                  <option value=\"\">選択してください</option>\n                  {prefectures.map((pref) => (\n                    <option key={pref} value={pref}>{pref}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  配送先住所 *\n                </label>\n                <input\n                  type=\"text\"\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"市区町村以降の住所\"\n                  value={formData.deliveryLocation}\n                  onChange={(e) => setFormData({ ...formData, deliveryLocation: e.target.value })}\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  配送希望日時 *\n                </label>\n                <input\n                  type=\"datetime-local\"\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  value={formData.deliveryDateTime}\n                  onChange={(e) => setFormData({ ...formData, deliveryDateTime: e.target.value })}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 荷物情報 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.4s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-orange-600 to-yellow-500 p-3 rounded-xl\">\n                <Truck className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">荷物情報</h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  荷物の種類 *\n                </label>\n                <input\n                  type=\"text\"\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"例: 電化製品、食品、建材など\"\n                  value={formData.cargoType}\n                  onChange={(e) => setFormData({ ...formData, cargoType: e.target.value })}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  重量 (kg) *\n                </label>\n                <input\n                  type=\"number\"\n                  required\n                  step=\"0.01\"\n                  min=\"0\"\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"100\"\n                  value={formData.cargoWeight}\n                  onChange={(e) => setFormData({ ...formData, cargoWeight: e.target.value })}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  サイズ *\n                </label>\n                <input\n                  type=\"text\"\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"例: 100cm × 50cm × 30cm\"\n                  value={formData.cargoSize}\n                  onChange={(e) => setFormData({ ...formData, cargoSize: e.target.value })}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  必要な車両タイプ *\n                </label>\n                <select\n                  required\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  value={formData.requiredVehicleType}\n                  onChange={(e) => setFormData({ ...formData, requiredVehicleType: e.target.value })}\n                >\n                  {vehicleTypes.map((type) => (\n                    <option key={type.value} value={type.value}>{type.label}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* AI検索用フィールド */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.5s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-purple-600 to-blue-500 p-3 rounded-xl\">\n                <Brain className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">AI おすすめ検索</h2>\n              <span className=\"px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full\">NEW</span>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    緊急度\n                  </label>\n                  <select\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 transition\"\n                    value={formData.urgency}\n                    onChange={(e) => setFormData({ ...formData, urgency: e.target.value })}\n                  >\n                    {urgencyLevels.map(level => (\n                      <option key={level.value} value={level.value}>{level.label}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    特別な要件\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 transition\"\n                    placeholder=\"例: 温度管理、危険物輸送資格、24時間対応など\"\n                    value={formData.specialRequirements}\n                    onChange={(e) => setFormData({ ...formData, specialRequirements: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <button\n                  type=\"button\"\n                  onClick={performAISearch}\n                  disabled={aiSearching}\n                  className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-3 rounded-xl hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n                >\n                  {aiSearching ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      <span>AI検索中...</span>\n                    </>\n                  ) : (\n                    <>\n                      <Brain className=\"h-4 w-4\" />\n                      <span>AI おすすめ運送会社を検索</span>\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* AI検索結果 */}\n          {showAIResults && aiResults && (\n            <div className=\"card fade-in-up\" style={{animationDelay: '0.6s'}}>\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"bg-gradient-to-r from-green-600 to-emerald-500 p-3 rounded-xl\">\n                  <Target className=\"h-6 w-6 text-white\" />\n                </div>\n                <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">AI おすすめ運送会社</h2>\n              </div>\n\n              {/* AIインサイト */}\n              <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-6 mb-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-purple-600\">{aiResults.aiInsights.totalMatches}件</div>\n                    <div className=\"text-sm text-gray-600\">マッチング数</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{aiResults.aiInsights.averageMatchScore}%</div>\n                    <div className=\"text-sm text-gray-600\">平均マッチング率</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-sm text-gray-600\">市場動向</div>\n                    <div className=\"text-xs text-gray-500 mt-1\">{aiResults.aiInsights.marketTrends}</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* おすすめ運送会社一覧 */}\n              <div className=\"space-y-4\">\n                {aiResults.carriers.map((carrier, index) => (\n                  <div key={carrier.id} className=\"border border-gray-200 rounded-xl p-6 hover:shadow-md transition-shadow\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <span className=\"bg-purple-100 text-purple-800 text-xs font-medium px-2 py-1 rounded-full\">\n                            #{index + 1} おすすめ\n                          </span>\n                          <h3 className=\"text-lg font-semibold text-gray-900\">{carrier.companyName}</h3>\n                          <span className={`px-2 py-1 text-xs font-medium rounded-full ${getMatchScoreColor(carrier.aiMatchScore)}`}>\n                            <Target className=\"h-3 w-3 inline mr-1\" />\n                            マッチング率: {carrier.aiMatchScore}%\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-3\">{carrier.aiRecommendationReason}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700\">担当者</p>\n                        <p className=\"text-sm text-gray-600\">{carrier.contactPerson}</p>\n                        <p className=\"text-sm text-gray-600\">TEL: {carrier.phone}</p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">評価</span>\n                          <div className=\"flex items-center\">\n                            {renderStars(carrier.rating)}\n                            <span className=\"ml-1 text-sm text-gray-600\">({carrier.rating})</span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">信用スコア</span>\n                          <span className={`px-2 py-1 text-xs font-medium rounded-full ${getCreditScoreColor(carrier.creditScore)}`}>\n                            {carrier.creditScore}点\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">信頼性</span>\n                          <span className=\"text-sm text-gray-600\">{carrier.reliabilityScore}%</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-1 mb-4\">\n                      {carrier.specialties.map((specialty, idx) => (\n                        <span key={idx} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                          {specialty}\n                        </span>\n                      ))}\n                    </div>\n\n                    <div className=\"bg-blue-50 p-4 rounded-lg mb-4\">\n                      <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center\">\n                        <Brain className=\"h-4 w-4 mr-2\" />\n                        AI 予測情報\n                      </h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-2 text-blue-500\" />\n                          <span className=\"text-gray-700\">予想配送時間: {carrier.estimatedDeliveryTime}時間</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <TrendingUp className=\"h-4 w-4 mr-2 text-green-500\" />\n                          <span className=\"text-gray-700\">コスト効率: {carrier.costEfficiency}%</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Shield className=\"h-4 w-4 mr-2 text-purple-500\" />\n                          <span className=\"text-gray-700\">レスポンス時間: {carrier.responseTime}分</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 text-sm\">\n                        詳細を見る\n                      </button>\n                      <button className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-blue-700 text-sm\">\n                        AI おすすめで依頼\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* 料金・備考 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.7s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-teal-600 to-cyan-500 p-3 rounded-xl\">\n                <DollarSign className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">料金・備考</h2>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  希望運賃 (円) *\n                </label>\n                <input\n                  type=\"number\"\n                  required\n                  min=\"0\"\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"50000\"\n                  value={formData.price}\n                  onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  備考・特記事項\n                </label>\n                <textarea\n                  rows={3}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"その他、特別な要望や注意事項があれば記載してください\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 送信ボタン */}\n          <div className=\"flex flex-col sm:flex-row gap-4 fade-in-up\" style={{animationDelay: '0.8s'}}>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"flex-1 btn-primary py-4 text-lg disabled:opacity-50\"\n            >\n              {loading ? '投稿中...' : '案件を投稿'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => router.push('/dashboard')}\n              className=\"flex-1 btn-secondary py-4 text-lg\"\n            >\n              キャンセル\n            </button>\n          </div>\n        </form>\n      </main>\n    </div>\n  )\n}\n","size_bytes":31695},"src/app/api/offers/[id]/reject/route.ts":{"content":"import { NextRequest } from 'next/server'\nimport { getUserFromRequest } from '@/lib/auth'\nimport {\n  successResponse,\n  errorResponse,\n  unauthorizedResponse,\n  forbiddenResponse,\n  notFoundResponse,\n} from '@/lib/api-response'\nimport prisma from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\n// オファー拒否\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    // オファー取得\n    const offer = await prisma.offer.findUnique({\n      where: { id: params.id },\n      include: {\n        shipment: true,\n      },\n    })\n    \n    if (!offer) {\n      return notFoundResponse('オファーが見つかりません')\n    }\n    \n    // 荷主のみが拒否可能\n    if (offer.shipment.shipperId !== user.userId) {\n      return forbiddenResponse('このオファーを拒否する権限がありません')\n    }\n    \n    // オファーを拒否\n    const updatedOffer = await prisma.offer.update({\n      where: { id: params.id },\n      data: { status: 'REJECTED' },\n    })\n    \n    return successResponse(updatedOffer)\n  } catch (error) {\n    console.error('Reject offer error:', error)\n    return errorResponse('オファーの拒否に失敗しました', 500)\n  }\n}\n\n","size_bytes":1357},"src/app/profile/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Navbar from '@/components/Navbar'\nimport { User, Building2, Phone, Mail, MapPin, Edit, Save, X } from 'lucide-react'\n\nexport default function ProfilePage() {\n  const router = useRouter()\n  const [user, setUser] = useState<any>(null)\n  const [isEditing, setIsEditing] = useState(false)\n  const [formData, setFormData] = useState({\n    companyName: '',\n    contactPerson: '',\n    phone: '',\n    postalCode: '',\n    address: '',\n  })\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const userData = localStorage.getItem('user')\n\n    if (!token || !userData) {\n      router.push('/login')\n      return\n    }\n\n    const userObj = JSON.parse(userData)\n    setUser(userObj)\n    setFormData({\n      companyName: userObj.companyName || '',\n      contactPerson: userObj.contactPerson || '',\n      phone: userObj.phone || '',\n      postalCode: userObj.postalCode || '',\n      address: userObj.address || '',\n    })\n    setLoading(false)\n  }, [])\n\n  const handleSave = async () => {\n    setSaving(true)\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/auth/me', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(formData),\n      })\n\n      if (!response.ok) throw new Error('更新に失敗しました')\n\n      const updatedUser = { ...user, ...formData }\n      setUser(updatedUser)\n      localStorage.setItem('user', JSON.stringify(updatedUser))\n      setIsEditing(false)\n    } catch (error) {\n      console.error('Error updating profile:', error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const handleCancel = () => {\n    setFormData({\n      companyName: user?.companyName || '',\n      contactPerson: user?.contactPerson || '',\n      phone: user?.phone || '',\n      postalCode: user?.postalCode || '',\n      address: user?.address || '',\n    })\n    setIsEditing(false)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navbar userType={user?.userType} />\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-gray-600 text-lg\">読み込み中...</div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar userType={user?.userType} />\n\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">プロフィール</h1>\n          <p className=\"text-gray-600 mt-2 text-sm sm:text-base\">アカウント情報を管理できます</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* プロフィール情報 */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"card\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">基本情報</h2>\n                {!isEditing ? (\n                  <button\n                    onClick={() => setIsEditing(true)}\n                    className=\"flex items-center space-x-2 text-blue-600 hover:text-blue-700 transition\"\n                  >\n                    <Edit className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                    <span className=\"text-sm sm:text-base\">編集</span>\n                  </button>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <button\n                      onClick={handleSave}\n                      disabled={saving}\n                      className=\"flex items-center space-x-1 bg-blue-600 text-white px-3 py-1 rounded-lg hover:bg-blue-700 transition text-sm disabled:opacity-50\"\n                    >\n                      <Save className=\"h-4 w-4\" />\n                      <span>{saving ? '保存中...' : '保存'}</span>\n                    </button>\n                    <button\n                      onClick={handleCancel}\n                      className=\"flex items-center space-x-1 bg-gray-500 text-white px-3 py-1 rounded-lg hover:bg-gray-600 transition text-sm\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                      <span>キャンセル</span>\n                    </button>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-4 sm:space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    <Building2 className=\"inline h-4 w-4 mr-2\" />\n                    会社名\n                  </label>\n                  {isEditing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.companyName}\n                      onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900 text-sm sm:text-base\">{user?.companyName || '未設定'}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    <User className=\"inline h-4 w-4 mr-2\" />\n                    担当者名\n                  </label>\n                  {isEditing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.contactPerson}\n                      onChange={(e) => setFormData({ ...formData, contactPerson: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900 text-sm sm:text-base\">{user?.contactPerson || '未設定'}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    <Phone className=\"inline h-4 w-4 mr-2\" />\n                    電話番号\n                  </label>\n                  {isEditing ? (\n                    <input\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900 text-sm sm:text-base\">{user?.phone || '未設定'}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    <Mail className=\"inline h-4 w-4 mr-2\" />\n                    メールアドレス\n                  </label>\n                  <p className=\"text-gray-900 text-sm sm:text-base\">{user?.email}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">メールアドレスは変更できません</p>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    <MapPin className=\"inline h-4 w-4 mr-2\" />\n                    郵便番号\n                  </label>\n                  {isEditing ? (\n                    <input\n                      type=\"text\"\n                      value={formData.postalCode}\n                      onChange={(e) => setFormData({ ...formData, postalCode: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                      placeholder=\"例: 1000001\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900 text-sm sm:text-base\">{user?.postalCode || '未設定'}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    <MapPin className=\"inline h-4 w-4 mr-2\" />\n                    住所\n                  </label>\n                  {isEditing ? (\n                    <textarea\n                      value={formData.address}\n                      onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                      rows={3}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                      placeholder=\"住所を入力してください\"\n                    />\n                  ) : (\n                    <p className=\"text-gray-900 text-sm sm:text-base\">{user?.address || '未設定'}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* サイドバー */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"card\">\n              <h3 className=\"text-lg font-bold text-gray-900 mb-4\">アカウント情報</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">アカウント種別</span>\n                  <span className=\"text-sm font-semibold text-blue-600\">\n                    {user?.userType === 'SHIPPER' ? '荷主' : '運送会社'}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">登録日</span>\n                  <span className=\"text-sm text-gray-900\">\n                    {user?.createdAt ? new Date(user.createdAt).toLocaleDateString('ja-JP') : '不明'}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"card mt-6\">\n              <h3 className=\"text-lg font-bold text-gray-900 mb-4\">アカウント設定</h3>\n              <div className=\"space-y-3\">\n                <button className=\"w-full text-left text-sm text-blue-600 hover:text-blue-700 transition\">\n                  パスワードを変更\n                </button>\n                <button className=\"w-full text-left text-sm text-blue-600 hover:text-blue-700 transition\">\n                  通知設定\n                </button>\n                <button className=\"w-full text-left text-sm text-red-600 hover:text-red-700 transition\">\n                  アカウントを削除\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":11199},"src/app/login/page.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport Logo from '@/components/Logo'\n\nexport default function LoginPage() {\n  const router = useRouter()\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  })\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError('')\n    setLoading(true)\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'ログインに失敗しました')\n      }\n\n      // トークンとユーザー情報をローカルストレージに保存\n      localStorage.setItem('token', data.data.token)\n      localStorage.setItem('user', JSON.stringify(data.data.user))\n\n      // ダッシュボードにリダイレクト\n      router.push('/dashboard')\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen gradient-bg flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full\">\n        {/* タイトル */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-slate-800 mb-2\">\n            ログイン\n          </h1>\n          <p className=\"text-slate-600\">\n            アカウントにログインしてください\n          </p>\n        </div>\n\n        {/* ログインフォーム */}\n        <div className=\"floating-card\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-xl text-sm\">\n                {error}\n              </div>\n            )}\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-semibold text-slate-700 mb-2\">\n                メールアドレス\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                required\n                className=\"w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                placeholder=\"email@example.com\"\n                value={formData.email}\n                onChange={(e) =>\n                  setFormData({ ...formData, email: e.target.value })\n                }\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-semibold text-slate-700 mb-2\">\n                パスワード\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                required\n                className=\"w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300\"\n                placeholder=\"パスワード\"\n                value={formData.password}\n                onChange={(e) =>\n                  setFormData({ ...formData, password: e.target.value })\n                }\n              />\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full btn-primary py-3 text-lg disabled:opacity-50\"\n            >\n              {loading ? 'ログイン中...' : 'ログイン'}\n            </button>\n\n            <div className=\"text-center\">\n              <span className=\"text-slate-600\">アカウントをお持ちでない方は </span>\n              <Link href=\"/register\" className=\"text-blue-600 hover:text-blue-700 font-semibold hover:scale-105 transition-transform\">\n                新規登録\n              </Link>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":4206},"src/app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 15, 23, 42;\n  --background-start: #f8fafc;\n  --background-end: #e2e8f0;\n  --primary-blue: #0ea5e9;\n  --primary-blue-dark: #0284c7;\n  --accent-blue: #38bdf8;\n  --light-blue: #e0f2fe;\n  --gradient-primary: linear-gradient(135deg, #0ea5e9 0%, #38bdf8 50%, #7dd3fc 100%);\n  --gradient-secondary: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n  --gradient-hero: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: var(--gradient-secondary);\n  min-height: 100vh;\n  overflow-x: hidden;\n  font-feature-settings: \"rlig\" 1, \"calt\" 1;\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n  \n  .gradient-text {\n    background: var(--gradient-primary);\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    animation: shimmer 3s ease-in-out infinite;\n    background-size: 200% 200%;\n  }\n  \n  .floating {\n    animation: floating 6s ease-in-out infinite;\n  }\n  \n  .slide-in-left {\n    animation: slideInLeft 0.8s ease-out;\n  }\n  \n  .slide-in-right {\n    animation: slideInRight 0.8s ease-out;\n  }\n  \n  .fade-in-up {\n    animation: fadeInUp 1s ease-out;\n  }\n  \n  .slide-in-up {\n    animation: slideInUp 0.8s ease-out;\n  }\n  \n  .scale-in {\n    animation: scaleIn 0.6s ease-out;\n  }\n  \n  .rotate-in {\n    animation: rotateIn 1s ease-out;\n  }\n  \n  .pulse-slow {\n    animation: pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  .bounce {\n    animation: bounce 1s ease-in-out infinite;\n  }\n  \n  .shake {\n    animation: shake 0.5s ease-in-out;\n  }\n  \n  .flip {\n    animation: flip 1s ease-in-out;\n  }\n  \n  .zoom-in {\n    animation: zoomIn 0.5s ease-out;\n  }\n  \n  .zoom-out {\n    animation: zoomOut 0.5s ease-out;\n  }\n  \n  .glow-pulse {\n    animation: glowPulse 2s ease-in-out infinite;\n  }\n  \n  .wiggle {\n    animation: wiggle 0.5s ease-in-out;\n  }\n  \n  .heartbeat {\n    animation: heartbeat 1.5s ease-in-out infinite;\n  }\n  \n  .slide-in-down {\n    animation: slideInDown 0.8s ease-out;\n  }\n  \n  .fade-in {\n    animation: fadeIn 1s ease-out;\n  }\n  \n  .spin-slow {\n    animation: spinSlow 3s linear infinite;\n  }\n  \n  /* スタッガーアニメーション用 */\n  .stagger-1 {\n    animation-delay: 0.1s;\n  }\n  \n  .stagger-2 {\n    animation-delay: 0.2s;\n  }\n  \n  .stagger-3 {\n    animation-delay: 0.3s;\n  }\n  \n  .stagger-4 {\n    animation-delay: 0.4s;\n  }\n  \n  .stagger-5 {\n    animation-delay: 0.5s;\n  }\n}\n\n@layer components {\n  .card {\n    @apply bg-white/80 backdrop-blur-sm rounded-3xl shadow-xl p-8 hover:shadow-2xl transition-all duration-500 hover:scale-105 border border-white/20;\n    background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(248,250,252,0.8) 100%);\n  }\n  \n  .btn-primary {\n    background: var(--gradient-primary);\n    @apply text-white px-8 py-4 rounded-2xl font-semibold transition-all duration-500 shadow-lg hover:shadow-xl hover:scale-105 active:scale-95;\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .btn-primary::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n    transition: left 0.5s;\n  }\n  \n  .btn-primary:hover::before {\n    left: 100%;\n  }\n  \n  .btn-secondary {\n    @apply bg-white/90 backdrop-blur-sm text-blue-600 border-2 border-blue-500/30 px-8 py-4 rounded-2xl font-semibold transition-all duration-500 hover:bg-blue-50/80 hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl;\n  }\n  \n  .hero-gradient {\n    background: var(--gradient-hero);\n    background-size: 400% 400%;\n    animation: gradientShift 8s ease infinite;\n  }\n  \n  .glass {\n    @apply bg-white/10 backdrop-blur-xl border border-white/20;\n    background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);\n  }\n  \n  .gradient-bg {\n    background: var(--gradient-secondary);\n  }\n  \n  .floating-card {\n    @apply card;\n    animation: floatingCard 6s ease-in-out infinite;\n  }\n  \n  .glow-effect {\n    box-shadow: 0 0 20px rgba(14, 165, 233, 0.3);\n  }\n  \n  .text-glow {\n    text-shadow: 0 0 10px rgba(14, 165, 233, 0.5);\n  }\n}\n\n@keyframes shimmer {\n  0% { background-position: -200% center; }\n  100% { background-position: 200% center; }\n}\n\n@keyframes floating {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes slideInLeft {\n  0% { transform: translateX(-100%); opacity: 0; }\n  100% { transform: translateX(0); opacity: 1; }\n}\n\n@keyframes slideInRight {\n  0% { transform: translateX(100%); opacity: 0; }\n  100% { transform: translateX(0); opacity: 1; }\n}\n\n@keyframes fadeInUp {\n  0% { transform: translateY(30px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes gradientShift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n@keyframes floatingCard {\n  0%, 100% { \n    transform: translateY(0px) rotate(0deg); \n  }\n  25% { \n    transform: translateY(-10px) rotate(0.5deg); \n  }\n  50% { \n    transform: translateY(-20px) rotate(0deg); \n  }\n  75% { \n    transform: translateY(-10px) rotate(-0.5deg); \n  }\n}\n\n@keyframes slideInUp {\n  0% { \n    transform: translateY(50px); \n    opacity: 0; \n  }\n  100% { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n@keyframes scaleIn {\n  0% { \n    transform: scale(0.8); \n    opacity: 0; \n  }\n  100% { \n    transform: scale(1); \n    opacity: 1; \n  }\n}\n\n@keyframes rotateIn {\n  0% { \n    transform: rotate(-180deg) scale(0.5); \n    opacity: 0; \n  }\n  100% { \n    transform: rotate(0deg) scale(1); \n    opacity: 1; \n  }\n}\n\n@keyframes bounce {\n  0%, 100% { \n    transform: translateY(0); \n  }\n  50% { \n    transform: translateY(-25px); \n  }\n}\n\n@keyframes shake {\n  0%, 100% { \n    transform: translateX(0); \n  }\n  10%, 30%, 50%, 70%, 90% { \n    transform: translateX(-10px); \n  }\n  20%, 40%, 60%, 80% { \n    transform: translateX(10px); \n  }\n}\n\n@keyframes flip {\n  0% {\n    transform: perspective(400px) rotateY(0);\n  }\n  100% {\n    transform: perspective(400px) rotateY(360deg);\n  }\n}\n\n@keyframes zoomIn {\n  0% {\n    transform: scale(0);\n    opacity: 0;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes zoomOut {\n  0% {\n    transform: scale(1.2);\n    opacity: 0;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes glowPulse {\n  0%, 100% {\n    box-shadow: 0 0 20px rgba(14, 165, 233, 0.4), 0 0 40px rgba(14, 165, 233, 0.2);\n  }\n  50% {\n    box-shadow: 0 0 40px rgba(14, 165, 233, 0.8), 0 0 80px rgba(14, 165, 233, 0.4);\n  }\n}\n\n@keyframes wiggle {\n  0%, 100% { \n    transform: rotate(0deg); \n  }\n  25% { \n    transform: rotate(-5deg); \n  }\n  75% { \n    transform: rotate(5deg); \n  }\n}\n\n@keyframes heartbeat {\n  0%, 100% {\n    transform: scale(1);\n  }\n  10%, 30% {\n    transform: scale(0.9);\n  }\n  20%, 40% {\n    transform: scale(1.1);\n  }\n}\n\n@keyframes slideInDown {\n  0% {\n    transform: translateY(-100%);\n    opacity: 0;\n  }\n  100% {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes ripple {\n  0% {\n    transform: scale(0);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(4);\n    opacity: 0;\n  }\n}\n\n@keyframes spinSlow {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n/* アニメーション遅延クラス */\n.animation-delay-100 {\n  animation-delay: 0.1s;\n}\n\n.animation-delay-200 {\n  animation-delay: 0.2s;\n}\n\n.animation-delay-300 {\n  animation-delay: 0.3s;\n}\n\n.animation-delay-500 {\n  animation-delay: 0.5s;\n}\n\n.animation-delay-1000 {\n  animation-delay: 1s;\n}\n\n.animation-delay-2000 {\n  animation-delay: 2s;\n}\n\n.animation-delay-4000 {\n  animation-delay: 4s;\n}\n\n/* レスポンシブ対応 */\n@media (max-width: 768px) {\n  .card {\n    @apply p-4;\n  }\n\n  .btn-primary, .btn-secondary {\n    @apply px-4 py-2 text-sm;\n  }\n\n  /* モバイルでのアニメーション軽減 */\n  .floating {\n    animation: none;\n  }\n\n  .pulse-slow {\n    animation: none;\n  }\n}\n\n/* 430×932 サイズ最適化 */\n@media (max-width: 430px) {\n  /* フォントサイズ調整 */\n  .text-4xl {\n    font-size: 1.75rem;\n  }\n\n  .text-5xl {\n    font-size: 2rem;\n  }\n\n  .text-6xl {\n    font-size: 2.25rem;\n  }\n\n  .text-7xl {\n    font-size: 2.5rem;\n  }\n\n  .text-3xl {\n    font-size: 1.5rem;\n  }\n\n  .text-2xl {\n    font-size: 1.25rem;\n  }\n\n  .text-xl {\n    font-size: 1.125rem;\n  }\n\n  .text-lg {\n    font-size: 1rem;\n  }\n\n  /* カードのパディング調整 */\n  .card {\n    @apply p-3;\n  }\n\n  /* ボタンサイズ調整 */\n  .btn-primary, .btn-secondary {\n    @apply px-3 py-2 text-sm;\n  }\n\n  /* スペーシング調整 */\n  .space-x-6 > :not([hidden]) ~ :not([hidden]) {\n    margin-left: 1rem;\n  }\n\n  .space-x-4 > :not([hidden]) ~ :not([hidden]) {\n    margin-left: 0.75rem;\n  }\n\n  /* グリッド調整 */\n  .grid-cols-1 {\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n  }\n\n  /* ナビゲーション調整 */\n  nav .flex {\n    @apply flex-col space-y-2 space-x-0;\n  }\n\n  /* ヒーローセクション調整 */\n  .hero-gradient {\n    min-height: 60vh;\n  }\n\n  /* 統計カードの調整 */\n  .stats-grid {\n    @apply grid-cols-1 gap-4;\n  }\n\n  /* フッター調整 */\n  footer .flex {\n    @apply flex-col space-y-2 space-x-0;\n  }\n}\n\n@media (max-width: 640px) {\n  .text-4xl {\n    font-size: 2rem;\n  }\n\n  .text-5xl {\n    font-size: 2.5rem;\n  }\n\n  .text-6xl {\n    font-size: 3rem;\n  }\n\n  .text-7xl {\n    font-size: 3.5rem;\n  }\n}\n\n","size_bytes":9690},"src/app/api/vehicles/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    \n    // 検索パラメータを取得\n    const vehicleType = searchParams.get('vehicleType') || ''\n    const prefecture = searchParams.get('prefecture') || ''\n    const status = searchParams.get('status') || 'AVAILABLE'\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '20')\n    const offset = (page - 1) * limit\n\n    // 検索条件を構築\n    const where: any = {}\n\n    // 車両タイプ\n    if (vehicleType) {\n      where.vehicleType = vehicleType\n    }\n\n    // 都道府県（JSON配列内を検索）\n    if (prefecture) {\n      where.availablePrefectures = {\n        contains: prefecture\n      }\n    }\n\n    // ステータス\n    if (status) {\n      where.status = status\n    }\n\n    // 現在日時でフィルタリング（利用可能な期間内）\n    const now = new Date()\n    where.availableFrom = {\n      lte: now\n    }\n    where.availableTo = {\n      gte: now\n    }\n\n    // 車両を検索\n    const [vehicles, totalCount] = await Promise.all([\n      prisma.vehicle.findMany({\n        where,\n        include: {\n          carrier: {\n            select: {\n              id: true,\n              companyName: true,\n              contactPerson: true,\n              phone: true,\n              email: true\n            }\n          }\n        },\n        orderBy: { createdAt: 'desc' },\n        skip: offset,\n        take: limit\n      }),\n      prisma.vehicle.count({ where })\n    ])\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        vehicles,\n        pagination: {\n          page,\n          limit,\n          totalCount,\n          totalPages: Math.ceil(totalCount / limit)\n        }\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching vehicles:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch vehicles' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json(\n        { success: false, error: 'Authorization token required' },\n        { status: 401 }\n      )\n    }\n\n    // トークンからユーザーIDを取得\n    const { verifyToken } = await import('@/lib/auth')\n    const decoded = await verifyToken(token)\n    \n    if (!decoded) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid token' },\n        { status: 401 }\n      )\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { id: decoded.userId },\n      select: {\n        id: true,\n        userType: true,\n        verificationStatus: true\n      }\n    })\n\n    if (!user) {\n      return NextResponse.json(\n        { success: false, error: 'User not found' },\n        { status: 404 }\n      )\n    }\n\n    // 許可証承認済みユーザーのみ作成可能\n    if (user.verificationStatus !== 'APPROVED') {\n      return NextResponse.json(\n        { success: false, error: '許可証が承認されるまで、車両を登録できません' },\n        { status: 403 }\n      )\n    }\n\n    // 都道府県配列をJSON文字列に変換\n    const availablePrefectures = JSON.stringify(body.availablePrefectures || [])\n\n    // 車両を作成\n    const vehicle = await prisma.vehicle.create({\n      data: {\n        carrierId: user.id,\n        vehicleType: body.vehicleType,\n        vehicleNumber: body.vehicleNumber,\n        driverName: body.driverName,\n        driverPhone: body.driverPhone,\n        maxWeight: parseFloat(body.maxWeight),\n        maxVolume: body.maxVolume ? parseFloat(body.maxVolume) : null,\n        length: body.length ? parseFloat(body.length) : null,\n        width: body.width ? parseFloat(body.width) : null,\n        height: body.height ? parseFloat(body.height) : null,\n        hasLiftGate: body.hasLiftGate || false,\n        hasRefrigeration: body.hasRefrigeration || false,\n        hasTemperatureControl: body.hasTemperatureControl || false,\n        canLoadUnload: body.canLoadUnload !== false,\n        availablePrefectures,\n        availableFrom: new Date(body.availableFrom),\n        availableTo: new Date(body.availableTo),\n        basePrice: body.basePrice ? parseFloat(body.basePrice) : null,\n        minPrice: body.minPrice ? parseFloat(body.minPrice) : null,\n        status: body.status || 'AVAILABLE',\n        notes: body.notes || null\n      },\n      include: {\n        carrier: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n            phone: true,\n            email: true\n          }\n        }\n      }\n    })\n\n    return NextResponse.json({\n      success: true,\n      data: vehicle\n    })\n  } catch (error) {\n    console.error('Error creating vehicle:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to create vehicle' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":5194},"src/app/api/user/my-posts/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { getUserFromRequest } from '@/lib/auth';\n\nexport const dynamic = 'force-dynamic'\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = getUserFromRequest(request);\n\n    if (!user) {\n      return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = params;\n\n    // 荷物か空車かを判定して削除\n    const shipment = await prisma.shipment.findFirst({\n      where: { id, shipperId: user.userId }\n    });\n\n    if (shipment) {\n      await prisma.shipment.delete({\n        where: { id }\n      });\n    } else {\n      const vehicle = await prisma.vehicle.findFirst({\n        where: { id, carrierId: user.userId }\n      });\n\n      if (vehicle) {\n        await prisma.vehicle.delete({\n          where: { id }\n        });\n      } else {\n        return NextResponse.json({ success: false, message: 'Post not found' }, { status: 404 });\n      }\n    }\n\n    return NextResponse.json({ success: true, message: 'Post deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting post:', error);\n    return NextResponse.json({ \n      success: false, \n      message: 'Failed to delete post', \n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n","size_bytes":1428},"src/app/api/offers/[id]/accept/route.ts":{"content":"import { NextRequest } from 'next/server'\nimport { getUserFromRequest } from '@/lib/auth'\nimport {\n  successResponse,\n  errorResponse,\n  unauthorizedResponse,\n  forbiddenResponse,\n  notFoundResponse,\n} from '@/lib/api-response'\nimport prisma from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\n// オファー承認\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    // オファー取得\n    const offer = await prisma.offer.findUnique({\n      where: { id: params.id },\n      include: {\n        shipment: true,\n      },\n    })\n    \n    if (!offer) {\n      return notFoundResponse('オファーが見つかりません')\n    }\n    \n    // 荷主のみが承認可能\n    if (offer.shipment.shipperId !== user.userId) {\n      return forbiddenResponse('このオファーを承認する権限がありません')\n    }\n    \n    // オファーを承認してマッチング\n    const [updatedOffer, updatedShipment] = await prisma.$transaction([\n      // オファーを承認\n      prisma.offer.update({\n        where: { id: params.id },\n        data: { status: 'ACCEPTED' },\n      }),\n      // 配送案件をマッチング済みに更新\n      prisma.shipment.update({\n        where: { id: offer.shipmentId },\n        data: {\n          status: 'MATCHED',\n          carrierId: offer.carrierId,\n        },\n      }),\n      // 他のオファーを拒否\n      prisma.offer.updateMany({\n        where: {\n          shipmentId: offer.shipmentId,\n          id: { not: params.id },\n          status: 'PENDING',\n        },\n        data: { status: 'REJECTED' },\n      }),\n    ])\n    \n    return successResponse({\n      offer: updatedOffer,\n      shipment: updatedShipment,\n    })\n  } catch (error) {\n    console.error('Accept offer error:', error)\n    return errorResponse('オファーの承認に失敗しました', 500)\n  }\n}\n\n","size_bytes":2004},"prisma/migrations/migration_lock.toml":{"content":"# Please do not edit this file manually\n# It should be added in your version-control system (i.e. Git)\nprovider = \"sqlite\"","size_bytes":122},"src/app/dashboard/company-search/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Building2, \n  Search, \n  MapPin, \n  Phone, \n  Mail, \n  User, \n  Star,\n  Filter,\n  Plus,\n  Eye,\n  MessageCircle,\n  Truck,\n  Package,\n  Calendar,\n  CheckCircle\n} from 'lucide-react'\n\ninterface Company {\n  id: string\n  companyName: string\n  contactPerson: string\n  email: string\n  phone: string\n  address: string\n  postalCode: string\n  userType: 'SHIPPER' | 'CARRIER'\n  rating: number\n  totalShipments: number\n  completedShipments: number\n  joinedDate: string\n  description?: string\n  specialties?: string[]\n}\n\nexport default function CompanySearchPage() {\n  const [companies, setCompanies] = useState<Company[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [userTypeFilter, setUserTypeFilter] = useState<'all' | 'SHIPPER' | 'CARRIER'>('all')\n  const [ratingFilter, setRatingFilter] = useState<'all' | '4+' | '3+' | '2+'>('all')\n\n  useEffect(() => {\n    loadCompanies()\n  }, [])\n\n  const loadCompanies = async () => {\n    try {\n      // サンプルデータ\n      const sampleCompanies: Company[] = [\n        {\n          id: '1',\n          companyName: '株式会社トランスロジック',\n          contactPerson: '田中太郎',\n          email: 'tanaka@translogic.co.jp',\n          phone: '03-1234-5678',\n          address: '東京都港区六本木1-1-1',\n          postalCode: '106-0032',\n          userType: 'CARRIER',\n          rating: 4.8,\n          totalShipments: 156,\n          completedShipments: 148,\n          joinedDate: '2023-01-15',\n          description: '関東圏を中心とした物流サービスを提供。冷凍・冷蔵輸送に強みがあります。',\n          specialties: ['冷凍輸送', '関東圏', '急便対応']\n        },\n        {\n          id: '2',\n          companyName: '山田運送株式会社',\n          contactPerson: '山田花子',\n          email: 'yamada@yamada-transport.co.jp',\n          phone: '06-9876-5432',\n          address: '大阪府大阪市北区梅田2-2-2',\n          postalCode: '530-0001',\n          userType: 'CARRIER',\n          rating: 4.5,\n          totalShipments: 89,\n          completedShipments: 85,\n          joinedDate: '2023-03-20',\n          description: '関西圏の一般貨物輸送を専門としています。',\n          specialties: ['一般貨物', '関西圏', '大型トラック']\n        },\n        {\n          id: '3',\n          companyName: '株式会社グリーンロジスティクス',\n          contactPerson: '佐藤次郎',\n          email: 'sato@greenlogistics.co.jp',\n          phone: '052-1111-2222',\n          address: '愛知県名古屋市中区栄3-3-3',\n          postalCode: '460-0008',\n          userType: 'SHIPPER',\n          rating: 4.2,\n          totalShipments: 234,\n          completedShipments: 220,\n          joinedDate: '2022-11-10',\n          description: '環境に配慮した物流ソリューションを提供。',\n          specialties: ['エコ物流', '中部圏', 'BtoB']\n        },\n        {\n          id: '4',\n          companyName: 'スピード物流株式会社',\n          contactPerson: '鈴木一郎',\n          email: 'suzuki@speedlogistics.co.jp',\n          phone: '092-3333-4444',\n          address: '福岡県福岡市博多区博多駅前4-4-4',\n          postalCode: '812-0011',\n          userType: 'CARRIER',\n          rating: 4.7,\n          totalShipments: 312,\n          completedShipments: 298,\n          joinedDate: '2022-08-05',\n          description: '九州全域の高速輸送サービス。24時間対応可能。',\n          specialties: ['高速輸送', '九州圏', '24時間対応']\n        }\n      ]\n      \n      setCompanies(sampleCompanies)\n    } catch (error) {\n      console.error('Error loading companies:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const filteredCompanies = companies.filter(company => {\n    const matchesSearch = searchTerm === '' || \n      company.companyName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      company.contactPerson.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      company.description?.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesUserType = userTypeFilter === 'all' || company.userType === userTypeFilter\n    \n    const matchesRating = ratingFilter === 'all' || \n      (ratingFilter === '4+' && company.rating >= 4) ||\n      (ratingFilter === '3+' && company.rating >= 3) ||\n      (ratingFilter === '2+' && company.rating >= 2)\n    \n    return matchesSearch && matchesUserType && matchesRating\n  })\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'\n        }`}\n      />\n    ))\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">企業検索</h1>\n        <p className=\"text-gray-600\">取引先企業を検索して連絡先を確認できます</p>\n      </div>\n\n      {/* 検索フィルター */}\n      <div className=\"bg-white rounded-lg shadow-sm border mb-6\">\n        <div className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"会社名、担当者名で検索...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div>\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"h-4 w-4 text-gray-500\" />\n                <select\n                  value={userTypeFilter}\n                  onChange={(e) => setUserTypeFilter(e.target.value as any)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">すべての企業</option>\n                  <option value=\"SHIPPER\">荷主企業</option>\n                  <option value=\"CARRIER\">運送業者</option>\n                </select>\n              </div>\n            </div>\n            <div>\n              <select\n                value={ratingFilter}\n                onChange={(e) => setRatingFilter(e.target.value as any)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"all\">すべての評価</option>\n                <option value=\"4+\">4.0以上</option>\n                <option value=\"3+\">3.0以上</option>\n                <option value=\"2+\">2.0以上</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 企業一覧 */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            企業一覧 ({filteredCompanies.length}件)\n          </h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : filteredCompanies.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <Building2 className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>条件に一致する企業が見つかりません</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {filteredCompanies.map((company) => (\n              <div key={company.id} className=\"p-6 hover:bg-gray-50\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"text-lg font-medium text-gray-900\">\n                        {company.companyName}\n                      </h3>\n                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n                        company.userType === 'SHIPPER' \n                          ? 'bg-blue-100 text-blue-800' \n                          : 'bg-green-100 text-green-800'\n                      }`}>\n                        {company.userType === 'SHIPPER' ? '荷主企業' : '運送業者'}\n                      </span>\n                    </div>\n                    \n                    {company.description && (\n                      <p className=\"text-sm text-gray-600 mb-3\">{company.description}</p>\n                    )}\n\n                    {/* 評価と実績 */}\n                    <div className=\"flex items-center space-x-4 mb-3\">\n                      <div className=\"flex items-center space-x-1\">\n                        {renderStars(company.rating)}\n                        <span className=\"text-sm text-gray-600 ml-1\">({company.rating})</span>\n                      </div>\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                        <span className=\"flex items-center\">\n                          <Package className=\"h-4 w-4 mr-1\" />\n                          総荷物数: {company.totalShipments}\n                        </span>\n                        <span className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          完了: {company.completedShipments}\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* 連絡先情報 */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-700 mb-3\">\n                      <div className=\"flex items-center\">\n                        <User className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <span>{company.contactPerson}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Phone className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <span>{company.phone}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Mail className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <span>{company.email}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <span>{company.postalCode} {company.address}</span>\n                      </div>\n                    </div>\n\n                    {/* 専門分野 */}\n                    {company.specialties && company.specialties.length > 0 && (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {company.specialties.map((specialty, index) => (\n                          <span\n                            key={index}\n                            className=\"px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full\"\n                          >\n                            {specialty}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n\n                    <div className=\"mt-3 text-xs text-gray-400\">\n                      登録日: {new Date(company.joinedDate).toLocaleDateString('ja-JP')}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <button\n                      className=\"p-2 text-gray-400 hover:text-blue-600\"\n                      title=\"詳細を見る\"\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      className=\"p-2 text-gray-400 hover:text-green-600\"\n                      title=\"メッセージを送る\"\n                    >\n                      <MessageCircle className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      className=\"p-2 text-gray-400 hover:text-purple-600\"\n                      title=\"取引先に追加\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":12940},"src/app/page.tsx":{"content":"'use client'\n\nimport Link from 'next/link'\nimport Logo from '@/components/Logo'\nimport CountUpAnimation from '@/components/CountUpAnimation'\nimport { Package, Users, TrendingUp, Shield, Clock, BarChart, Truck } from 'lucide-react'\nimport { useScrollAnimation } from '@/hooks/useScrollAnimation'\n\nexport default function HomePage() {\n  const { ref: featuresRef, isVisible: featuresVisible } = useScrollAnimation()\n  const { ref: statsRef, isVisible: statsVisible } = useScrollAnimation()\n  return (\n    <div className=\"min-h-screen\">\n      {/* ヘッダー */}\n      <header className=\"glass sticky top-0 z-50 border-b border-white/20\">\n        <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <Logo width={200} height={60} className=\"w-[150px] h-[45px] sm:w-[200px] sm:h-[60px] scale-in\" />\n            <div className=\"flex items-center space-x-2 sm:space-x-6\">\n              <Link\n                href=\"/login\"\n                className=\"text-slate-700 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-all duration-300 hover:scale-105\"\n              >\n                ログイン\n              </Link>\n              <Link\n                href=\"/register\"\n                className=\"btn-primary text-sm px-6 py-3 scale-in\"\n                style={{animationDelay: '0.1s'}}\n              >\n                新規登録\n              </Link>\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* ヒーローセクション */}\n      <section className=\"relative overflow-hidden min-h-screen flex items-center gradient-bg\">\n        {/* アニメーション背景 */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-20 left-10 w-32 h-32 sm:w-96 sm:h-96 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-pulse-slow glow-effect\"></div>\n          <div className=\"absolute top-40 right-10 w-32 h-32 sm:w-96 sm:h-96 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-pulse-slow animation-delay-2000 glow-effect\"></div>\n          <div className=\"absolute -bottom-8 left-20 w-32 h-32 sm:w-96 sm:h-96 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-pulse-slow animation-delay-4000 glow-effect\"></div>\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 sm:w-[500px] sm:h-[500px] bg-gradient-to-r from-white/20 to-blue-100/30 rounded-full filter blur-3xl animate-pulse-slow animation-delay-1000\"></div>\n        </div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 sm:py-24 w-full\">\n          <div className=\"text-center\">\n            <div className=\"fade-in-up\">\n              <h1 className=\"text-4xl sm:text-5xl lg:text-8xl font-bold mb-6 sm:mb-8 leading-tight\">\n                <span className=\"text-slate-800\">物流を</span>\n                <span className=\"gradient-text text-glow\">もっとスマート</span>\n                <span className=\"text-slate-800\">に</span>\n              </h1>\n            </div>\n            \n            <div className=\"slide-in-left\">\n              <p className=\"text-lg sm:text-xl lg:text-3xl text-slate-600 mb-8 sm:mb-12 max-w-5xl mx-auto leading-relaxed px-4 font-medium\">\n                「断らない物流」を実現する、次世代求荷求車サービス<br className=\"hidden sm:block\" />\n                荷物や空きトラックがAIによってすぐ決まる！\n              </p>\n            </div>\n            \n            <div className=\"slide-in-right\">\n              <div className=\"flex justify-center mb-12 sm:mb-16 px-4\">\n                <Link href=\"/register\" className=\"btn-primary text-lg sm:text-xl px-12 py-4 sm:px-20 lg:px-24 floating glow-effect\">\n                  無料お試しに申し込む\n                </Link>\n              </div>\n            </div>\n            \n            {/* リアルタイム情報 */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6 sm:gap-8 mt-12 sm:mt-16 max-w-4xl mx-auto px-4\">\n              <div className=\"floating-card text-center scale-in glow-effect\" style={{animationDelay: '0.1s'}}>\n                <div className=\"text-3xl sm:text-4xl lg:text-6xl font-bold gradient-text mb-3 text-glow\">\n                  <CountUpAnimation end={10247} duration={2500} />\n                </div>\n                <div className=\"text-slate-600 text-sm sm:text-lg font-medium\">現在の荷物数</div>\n                <div className=\"text-xs text-slate-500 mt-1\">リアルタイム更新</div>\n              </div>\n              <div className=\"floating-card text-center scale-in glow-effect\" style={{animationDelay: '0.15s'}}>\n                <div className=\"text-3xl sm:text-4xl lg:text-6xl font-bold gradient-text mb-3 text-glow\">\n                  <CountUpAnimation end={856} duration={2500} />\n                </div>\n                <div className=\"text-slate-600 text-sm sm:text-lg font-medium\">現在の空車数</div>\n                <div className=\"text-xs text-slate-500 mt-1\">リアルタイム更新</div>\n              </div>\n            </div>\n            \n            {/* 統計情報 */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8 lg:gap-10 mt-8 sm:mt-12 max-w-6xl mx-auto px-4\">\n              <div className=\"floating-card text-center scale-in glow-effect\" style={{animationDelay: '0.2s'}}>\n                <div className=\"text-3xl sm:text-4xl lg:text-6xl font-bold gradient-text mb-3 text-glow\">\n                  <CountUpAnimation end={1000} duration={3000} suffix=\"+\" />\n                </div>\n                <div className=\"text-slate-600 text-sm sm:text-lg font-medium\">登録企業数</div>\n              </div>\n              <div className=\"floating-card text-center scale-in glow-effect\" style={{animationDelay: '0.4s'}}>\n                <div className=\"text-3xl sm:text-4xl lg:text-6xl font-bold gradient-text mb-3 text-glow\">\n                  <CountUpAnimation end={5000} duration={3000} suffix=\"+\" />\n                </div>\n                <div className=\"text-slate-600 text-sm sm:text-lg font-medium\">月間マッチング数</div>\n              </div>\n              <div className=\"floating-card text-center scale-in glow-effect sm:col-span-2 lg:col-span-1\" style={{animationDelay: '0.6s'}}>\n                <div className=\"text-3xl sm:text-4xl lg:text-6xl font-bold gradient-text mb-3 text-glow\">\n                  <CountUpAnimation end={98} duration={2000} suffix=\"%\" />\n                </div>\n                <div className=\"text-slate-600 text-sm sm:text-lg font-medium\">顧客満足度</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* 特徴セクション */}\n      <section ref={featuresRef} className=\"gradient-bg py-24 lg:py-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className={`text-center mb-20 ${featuresVisible ? 'zoom-in' : 'opacity-0'}`}>\n            <h2 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold text-slate-800 mb-8\">\n              SIN JAPAN LOGI MATCHの特徴\n            </h2>\n            <p className=\"text-xl sm:text-2xl text-slate-600 max-w-4xl mx-auto leading-relaxed font-medium\">\n              最先端のテクノロジーで物流業界に革新をもたらします\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-10\">\n            <div className={`floating-card group ${featuresVisible ? 'zoom-in stagger-1' : 'opacity-0'} hover:glow-pulse`}>\n              <div className=\"bg-gradient-to-br from-blue-600 to-cyan-600 w-20 h-20 rounded-3xl flex items-center justify-center mb-8 group-hover:scale-110 group-hover:wiggle transition-all duration-500 glow-pulse\">\n                <Package className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-6 text-slate-800\">簡単な案件投稿</h3>\n              <p className=\"text-slate-600 leading-relaxed text-base sm:text-lg\">\n                荷主は数分で配送案件を投稿可能。詳細な条件設定で、最適な運送会社とマッチングします。\n              </p>\n            </div>\n\n            <div className={`floating-card group ${featuresVisible ? 'zoom-in stagger-2' : 'opacity-0'} hover:glow-pulse`}>\n              <div className=\"bg-gradient-to-br from-purple-600 to-pink-600 w-20 h-20 rounded-3xl flex items-center justify-center mb-8 group-hover:scale-110 group-hover:wiggle transition-all duration-500 glow-pulse\">\n                <Users className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-6 text-slate-800\">効率的なマッチング</h3>\n              <p className=\"text-slate-600 leading-relaxed text-base sm:text-lg\">\n                運送会社は条件に合う案件を検索し、自由にオファーを提案。双方が納得する条件で取引できます。\n              </p>\n            </div>\n\n            <div className={`floating-card group ${featuresVisible ? 'zoom-in stagger-3' : 'opacity-0'} hover:glow-pulse`}>\n              <div className=\"bg-gradient-to-br from-green-600 to-emerald-600 w-20 h-20 rounded-3xl flex items-center justify-center mb-8 group-hover:scale-110 group-hover:wiggle transition-all duration-500 glow-pulse\">\n                <TrendingUp className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-6 text-slate-800\">コスト削減</h3>\n              <p className=\"text-slate-600 leading-relaxed text-base sm:text-lg\">\n                複数の運送会社から相見積もりが可能。競争原理により、適正価格での取引を実現します。\n              </p>\n            </div>\n\n            <div className={`floating-card group ${featuresVisible ? 'zoom-in stagger-4' : 'opacity-0'} hover:glow-pulse`}>\n              <div className=\"bg-gradient-to-br from-orange-600 to-yellow-600 w-20 h-20 rounded-3xl flex items-center justify-center mb-8 group-hover:scale-110 group-hover:wiggle transition-all duration-500 glow-pulse\">\n                <Shield className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-6 text-slate-800\">安全・安心</h3>\n              <p className=\"text-slate-600 leading-relaxed text-base sm:text-lg\">\n                厳格な審査を通過した運送会社のみが登録。安心して取引できる環境を提供します。\n              </p>\n            </div>\n\n            <div className={`floating-card group ${featuresVisible ? 'zoom-in stagger-5' : 'opacity-0'} hover:glow-pulse`}>\n              <div className=\"bg-gradient-to-br from-indigo-600 to-blue-600 w-20 h-20 rounded-3xl flex items-center justify-center mb-8 group-hover:scale-110 group-hover:wiggle transition-all duration-500 glow-pulse\">\n                <Clock className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-6 text-slate-800\">24時間対応</h3>\n              <p className=\"text-slate-600 leading-relaxed text-base sm:text-lg\">\n                いつでもどこでも案件の投稿・検索が可能。リアルタイムで状況を確認できます。\n              </p>\n            </div>\n\n            <div className={`floating-card group ${featuresVisible ? 'zoom-in animation-delay-500' : 'opacity-0'} hover:glow-pulse`}>\n              <div className=\"bg-gradient-to-br from-teal-600 to-cyan-600 w-20 h-20 rounded-3xl flex items-center justify-center mb-8 group-hover:scale-110 group-hover:wiggle transition-all duration-500 glow-pulse\">\n                <BarChart className=\"h-10 w-10 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-6 text-slate-800\">データ分析</h3>\n              <p className=\"text-slate-600 leading-relaxed text-base sm:text-lg\">\n                過去の取引データを分析し、最適な価格設定や運送ルートを提案します。\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n      {/* フッター */}\n      <footer className=\"bg-gradient-to-r from-slate-900 via-slate-800 to-slate-900 text-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"mb-8\">\n              <h3 className=\"text-2xl sm:text-3xl font-bold mb-4 gradient-text text-glow\">\n                SIN JAPAN LOGI MATCH\n              </h3>\n              <p className=\"text-slate-300 text-lg max-w-2xl mx-auto leading-relaxed\">\n                「断らない物流」を実現する、次世代求荷求車サービス\n              </p>\n            </div>\n            <p className=\"text-slate-400 mb-8 text-lg\">\n              © 2025 SIN JAPAN LLC All rights reserved\n            </p>\n            <div className=\"flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-8 text-base text-slate-400\">\n              <Link href=\"/help\" className=\"hover:text-white transition-all duration-300 hover:scale-105 hover:text-glow\">ヘルプ</Link>\n              <Link href=\"/terms\" className=\"hover:text-white transition-all duration-300 hover:scale-105 hover:text-glow\">利用規約</Link>\n              <Link href=\"/privacy\" className=\"hover:text-white transition-all duration-300 hover:scale-105 hover:text-glow\">プライバシーポリシー</Link>\n              <Link href=\"/contact\" className=\"hover:text-white transition-all duration-300 hover:scale-105 hover:text-glow\">お問い合わせ</Link>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  )\n}\n\n","size_bytes":13949},"src/app/api/user/my-posts/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { getUserFromRequest } from '@/lib/auth';\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = getUserFromRequest(request);\n\n    if (!user) {\n      return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });\n    }\n\n    // ユーザーの荷物投稿を取得\n    const shipments = await prisma.shipment.findMany({\n      where: { shipperId: user.userId },\n      select: {\n        id: true,\n        cargoName: true,\n        cargoDescription: true,\n        status: true,\n        createdAt: true,\n        updatedAt: true,\n        pickupPrefecture: true,\n        pickupCity: true,\n        deliveryPrefecture: true,\n        deliveryCity: true,\n        pickupDate: true,\n        cargoWeight: true,\n        requiredVehicleType: true,\n        budget: true,\n      },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    // ユーザーの空車投稿を取得\n    const vehicles = await prisma.vehicle.findMany({\n      where: { carrierId: user.userId },\n      select: {\n        id: true,\n        vehicleType: true,\n        status: true,\n        createdAt: true,\n        updatedAt: true,\n        maxWeight: true,\n        availablePrefectures: true,\n        availableFrom: true,\n        availableTo: true,\n      },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    // 統一された形式に変換\n    const posts = [\n      ...shipments.map(shipment => ({\n        id: shipment.id,\n        type: 'shipment' as const,\n        title: shipment.cargoName,\n        description: shipment.cargoDescription,\n        status: shipment.status,\n        createdAt: shipment.createdAt,\n        updatedAt: shipment.updatedAt,\n        data: {\n          pickupPrefecture: shipment.pickupPrefecture,\n          pickupCity: shipment.pickupCity,\n          deliveryPrefecture: shipment.deliveryPrefecture,\n          deliveryCity: shipment.deliveryCity,\n          pickupDate: shipment.pickupDate,\n          cargoWeight: shipment.cargoWeight,\n          requiredVehicleType: shipment.requiredVehicleType,\n          budget: shipment.budget,\n        }\n      })),\n      ...vehicles.map(vehicle => ({\n        id: vehicle.id,\n        type: 'vehicle' as const,\n        title: vehicle.vehicleType,\n        description: `${vehicle.vehicleType} - 最大積載重量: ${vehicle.maxWeight}kg`,\n        status: vehicle.status,\n        createdAt: vehicle.createdAt,\n        updatedAt: vehicle.updatedAt,\n        data: {\n          vehicleType: vehicle.vehicleType,\n          maxWeight: vehicle.maxWeight,\n          availablePrefectures: vehicle.availablePrefectures,\n          availableFrom: vehicle.availableFrom,\n          availableTo: vehicle.availableTo,\n        }\n      }))\n    ].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n    return NextResponse.json({ success: true, data: posts });\n  } catch (error) {\n    console.error('Error fetching user posts:', error);\n    return NextResponse.json({ \n      success: false, \n      message: 'Failed to fetch posts', \n      error: error instanceof Error ? error.message : 'Unknown error' \n    }, { status: 500 });\n  }\n}\n","size_bytes":3241},"src/app/api/user/profile/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { getUserFromRequest } from '@/lib/auth';\n\nexport const dynamic = 'force-dynamic'\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const user = getUserFromRequest(request);\n\n    if (!user) {\n      return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const {\n      contactPerson,\n      email,\n      phone,\n      companyName,\n      postalCode,\n      address,\n    } = body;\n\n    // ユーザー情報を更新\n    const updatedUser = await prisma.user.update({\n      where: { id: user.userId },\n      data: {\n        contactPerson,\n        email,\n        phone,\n        companyName,\n        postalCode,\n        address,\n      },\n      select: {\n        id: true,\n        contactPerson: true,\n        email: true,\n        phone: true,\n        companyName: true,\n        postalCode: true,\n        address: true,\n        userType: true,\n        createdAt: true,\n      },\n    });\n\n    return NextResponse.json({ success: true, data: updatedUser });\n  } catch (error) {\n    console.error('Error updating user profile:', error);\n    return NextResponse.json({ \n      success: false, \n      message: 'Failed to update profile', \n      error: error instanceof Error ? error.message : 'Unknown error' \n    }, { status: 500 });\n  }\n}\n","size_bytes":1419},"src/app/dashboard/contracted-shipments/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  CheckCircle, \n  MapPin, \n  Calendar, \n  Weight, \n  Truck, \n  DollarSign, \n  Eye, \n  Phone,\n  Mail,\n  Building2,\n  User,\n  Clock,\n  AlertCircle,\n  Filter,\n  Search\n} from 'lucide-react'\n\ninterface ContractedShipment {\n  id: string\n  cargoName: string\n  cargoDescription: string\n  status: 'MATCHED' | 'IN_TRANSIT' | 'DELIVERED'\n  pickupPrefecture: string\n  pickupCity: string\n  deliveryPrefecture: string\n  deliveryCity: string\n  pickupDate: string\n  deliveryDate: string\n  cargoWeight: number\n  requiredVehicleType: string\n  budget: number\n  createdAt: string\n  updatedAt: string\n  carrier?: {\n    companyName: string\n    contactPerson: string\n    phone: string\n    email: string\n  }\n  shipper?: {\n    companyName: string\n    contactPerson: string\n    phone: string\n    email: string\n  }\n}\n\nexport default function ContractedShipmentsPage() {\n  const router = useRouter()\n  const [shipments, setShipments] = useState<ContractedShipment[]>([])\n  const [loading, setLoading] = useState(true)\n  const [filter, setFilter] = useState<'all' | 'MATCHED' | 'IN_TRANSIT' | 'DELIVERED'>('all')\n  const [searchTerm, setSearchTerm] = useState('')\n\n  useEffect(() => {\n    loadContractedShipments()\n  }, [])\n\n  const loadContractedShipments = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/user/my-posts', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n\n      if (!response.ok) throw new Error('Failed to load shipments')\n      \n      const data = await response.json()\n      // 成約済みの荷物のみをフィルタリング\n      const contractedShipments = data.data?.filter((post: any) => \n        post.type === 'shipment' && \n        ['MATCHED', 'IN_TRANSIT', 'DELIVERED'].includes(post.status)\n      ) || []\n      setShipments(contractedShipments)\n    } catch (error) {\n      console.error('Error loading contracted shipments:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case 'MATCHED':\n        return { label: '成約済み', color: 'bg-green-100 text-green-800', icon: CheckCircle }\n      case 'IN_TRANSIT':\n        return { label: '輸送中', color: 'bg-yellow-100 text-yellow-800', icon: Truck }\n      case 'DELIVERED':\n        return { label: '完了', color: 'bg-gray-100 text-gray-800', icon: CheckCircle }\n      default:\n        return { label: '不明', color: 'bg-gray-100 text-gray-800', icon: Clock }\n    }\n  }\n\n  const filteredShipments = shipments.filter(shipment => {\n    const matchesFilter = filter === 'all' || shipment.status === filter\n    const matchesSearch = searchTerm === '' || \n      shipment.cargoName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      shipment.cargoDescription.toLowerCase().includes(searchTerm.toLowerCase())\n    return matchesFilter && matchesSearch\n  })\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">成約した荷物</h1>\n        <p className=\"text-gray-600\">成約が完了した荷物の一覧です</p>\n      </div>\n\n      {/* フィルターと検索 */}\n      <div className=\"bg-white rounded-lg shadow-sm border mb-6\">\n        <div className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"荷物名や説明で検索...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"h-4 w-4 text-gray-500\" />\n              <select\n                value={filter}\n                onChange={(e) => setFilter(e.target.value as any)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"all\">すべて</option>\n                <option value=\"MATCHED\">成約済み</option>\n                <option value=\"IN_TRANSIT\">輸送中</option>\n                <option value=\"DELIVERED\">完了</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 荷物一覧 */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            成約した荷物一覧 ({filteredShipments.length}件)\n          </h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : filteredShipments.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <CheckCircle className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>成約した荷物はありません</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {filteredShipments.map((shipment) => {\n              const statusInfo = getStatusInfo(shipment.status)\n              const StatusIcon = statusInfo.icon\n              \n              return (\n                <div key={shipment.id} className=\"p-6 hover:bg-gray-50\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-lg font-medium text-gray-900\">\n                          {shipment.cargoName}\n                        </h3>\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full flex items-center space-x-1 ${statusInfo.color}`}>\n                          <StatusIcon className=\"h-3 w-3\" />\n                          <span>{statusInfo.label}</span>\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-500 mb-4\">\n                        {shipment.cargoDescription}\n                      </p>\n                      \n                      {/* 荷物詳細情報 */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-600 mb-4\">\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>{shipment.pickupPrefecture} → {shipment.deliveryPrefecture}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>{new Date(shipment.pickupDate).toLocaleDateString()}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Weight className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>{shipment.cargoWeight}kg</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          <span>¥{shipment.budget.toLocaleString()}</span>\n                        </div>\n                      </div>\n\n                      {/* 取引先情報 */}\n                      {shipment.carrier && (\n                        <div className=\"border-t border-gray-100 pt-4\">\n                          <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center\">\n                            <Truck className=\"h-4 w-4 mr-2\" />\n                            運送業者情報\n                          </h4>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-700\">\n                            <div className=\"flex items-center\">\n                              <Building2 className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{shipment.carrier.companyName}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <User className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{shipment.carrier.contactPerson}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Phone className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{shipment.carrier.phone}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Mail className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{shipment.carrier.email}</span>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      <div className=\"mt-3 text-xs text-gray-400\">\n                        成約日: {new Date(shipment.updatedAt).toLocaleString('ja-JP')}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2 ml-4\">\n                      <button\n                        onClick={() => router.push(`/shipments/${shipment.id}`)}\n                        className=\"p-2 text-gray-400 hover:text-blue-600\"\n                        title=\"詳細を見る\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":10278},"src/app/dashboard/payment/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { CreditCard, Building2, Repeat, CheckCircle, ArrowRight, Shield } from 'lucide-react'\n\nexport default function PaymentPage() {\n  const router = useRouter()\n  const [selectedMethod, setSelectedMethod] = useState<'bank_transfer' | 'card' | 'direct_debit' | null>(null)\n  const [amount, setAmount] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const [user, setUser] = useState<any>(null)\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      setUser(JSON.parse(userData))\n    }\n  }, [])\n\n  const paymentMethods = [\n    {\n      id: 'bank_transfer',\n      name: '銀行振込',\n      icon: Building2,\n      description: '銀行口座への振込でお支払い',\n      color: 'blue',\n      processingTime: '1-3営業日',\n      fee: '無料（振込手数料はお客様負担）'\n    },\n    {\n      id: 'card',\n      name: 'カード決済',\n      icon: CreditCard,\n      description: 'Square決済でクレジットカード払い',\n      color: 'green',\n      processingTime: '即時',\n      fee: '3.25%'\n    },\n    {\n      id: 'direct_debit',\n      name: '口座振替',\n      icon: Repeat,\n      description: '会費ペイで自動引き落とし',\n      color: 'purple',\n      processingTime: '即時',\n      fee: '無料'\n    }\n  ]\n\n  const handlePayment = async () => {\n    if (!selectedMethod || !amount) {\n      setMessage('支払い方法と金額を入力してください')\n      return\n    }\n\n    const parsedAmount = parseFloat(amount)\n    if (isNaN(parsedAmount) || parsedAmount <= 0) {\n      setMessage('有効な金額を入力してください')\n      return\n    }\n\n    setLoading(true)\n    setMessage('')\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/payments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          amount: parsedAmount,\n          paymentMethod: selectedMethod\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error('決済の開始に失敗しました')\n      }\n\n      const data = await response.json()\n      \n      if (selectedMethod === 'bank_transfer') {\n        setMessage('振込情報を下記にてご確認ください。振込完了後、処理に1-3営業日かかります。')\n      } else if (selectedMethod === 'card') {\n        if (data.data.paymentUrl) {\n          window.location.href = data.data.paymentUrl\n        } else {\n          setMessage('Square決済ページへの移動準備中...')\n        }\n      } else if (selectedMethod === 'direct_debit') {\n        if (data.data.paymentUrl) {\n          window.location.href = data.data.paymentUrl\n        } else {\n          setMessage('会費ペイページへの移動準備中...')\n        }\n      }\n    } catch (error) {\n      console.error('Payment error:', error)\n      setMessage('決済の開始に失敗しました。再度お試しください。')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"max-w-5xl mx-auto p-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">お支払い</h1>\n          <p className=\"text-gray-600\">ご利用いただける決済方法をお選びください</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* メインコンテンツ */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* 金額入力 */}\n            <div className=\"bg-white rounded-lg shadow-md p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">お支払い金額</h2>\n              <div className=\"relative max-w-md\">\n                <input\n                  type=\"number\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg\"\n                  placeholder=\"10000\"\n                  min=\"1\"\n                  step=\"1\"\n                />\n                <span className=\"absolute right-4 top-3.5 text-gray-500 text-lg\">円</span>\n              </div>\n            </div>\n\n            {/* 支払い方法選択 */}\n            <div className=\"bg-white rounded-lg shadow-md p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">お支払い方法を選択</h2>\n              <div className=\"space-y-4\">\n                {paymentMethods.map((method) => {\n                  const Icon = method.icon\n                  return (\n                    <div\n                      key={method.id}\n                      onClick={() => setSelectedMethod(method.id as any)}\n                      className={`relative border-2 rounded-lg p-4 cursor-pointer transition-all hover:shadow-md ${\n                        selectedMethod === method.id\n                          ? `border-${method.color}-500 bg-${method.color}-50`\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className={`p-3 rounded-lg bg-${method.color}-100`}>\n                            <Icon className={`w-6 h-6 text-${method.color}-600`} />\n                          </div>\n                          <div className=\"flex-1\">\n                            <h3 className=\"text-lg font-semibold text-gray-900\">{method.name}</h3>\n                            <p className=\"text-sm text-gray-600 mt-1\">{method.description}</p>\n                            <div className=\"flex items-center gap-4 mt-2\">\n                              <span className=\"text-xs text-gray-500\">処理時間: {method.processingTime}</span>\n                              <span className=\"text-xs text-gray-500\">手数料: {method.fee}</span>\n                            </div>\n                          </div>\n                        </div>\n                        {selectedMethod === method.id && (\n                          <CheckCircle className={`w-6 h-6 text-${method.color}-600`} />\n                        )}\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n\n            {/* メッセージ表示 */}\n            {message && (\n              <div className={`p-4 rounded-lg ${\n                message.includes('失敗') ? 'bg-red-50 border border-red-200 text-red-800' : 'bg-blue-50 border border-blue-200 text-blue-800'\n              }`}>\n                <p>{message}</p>\n              </div>\n            )}\n\n            {/* 決済詳細情報 */}\n            {selectedMethod === 'bank_transfer' && (\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n                <h3 className=\"text-lg font-semibold text-blue-900 mb-4 flex items-center\">\n                  <Building2 className=\"w-5 h-5 mr-2\" />\n                  振込先情報\n                </h3>\n                <div className=\"bg-white rounded-lg p-4 space-y-3\">\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <span className=\"font-medium text-gray-700\">金融機関名：</span>\n                    <span className=\"col-span-2 text-gray-900\">相愛信用組合</span>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <span className=\"font-medium text-gray-700\">支店名：</span>\n                    <span className=\"col-span-2 text-gray-900\">本店営業部</span>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <span className=\"font-medium text-gray-700\">口座種別：</span>\n                    <span className=\"col-span-2 text-gray-900\">普通</span>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <span className=\"font-medium text-gray-700\">口座番号：</span>\n                    <span className=\"col-span-2 text-gray-900 text-xl font-bold\">0170074</span>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <span className=\"font-medium text-gray-700\">口座名義：</span>\n                    <span className=\"col-span-2 text-gray-900\">ド）シン ジャパン</span>\n                  </div>\n                </div>\n                <div className=\"mt-4 p-4 bg-blue-100 rounded-md\">\n                  <p className=\"text-sm text-blue-900\">\n                    ⚠️ 振込手数料はお客様のご負担となります<br />\n                    ⚠️ お振込み名義は必ず登録されている会社名でお願いします<br />\n                    ⚠️ 振込完了後、処理に1-3営業日かかります\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {selectedMethod === 'card' && (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n                <h3 className=\"text-lg font-semibold text-green-900 mb-4 flex items-center\">\n                  <CreditCard className=\"w-5 h-5 mr-2\" />\n                  Square決済について\n                </h3>\n                <div className=\"space-y-3 text-green-800\">\n                  <p>✓ 各種クレジットカードがご利用いただけます</p>\n                  <p className=\"ml-4 text-sm\">（VISA、MasterCard、JCB、American Express、Diners Club）</p>\n                  <p>✓ 安全なSquare決済システムを使用しています</p>\n                  <p>✓ 決済完了後、即座に領収書が発行されます</p>\n                  <p>✓ 手数料: 決済金額の3.25%</p>\n                </div>\n              </div>\n            )}\n\n            {selectedMethod === 'direct_debit' && (\n              <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-6\">\n                <h3 className=\"text-lg font-semibold text-purple-900 mb-4 flex items-center\">\n                  <Repeat className=\"w-5 h-5 mr-2\" />\n                  会費ペイについて\n                </h3>\n                <div className=\"space-y-3 text-purple-800\">\n                  <p>✓ 毎月自動で口座から引き落とされます</p>\n                  <p>✓ 会費ペイのシステムを使用した安全な口座振替です</p>\n                  <p>✓ 初回のみ口座情報の登録が必要です</p>\n                  <p>✓ 手数料無料でご利用いただけます</p>\n                </div>\n              </div>\n            )}\n\n            {/* 支払いボタン */}\n            <div className=\"flex gap-4\">\n              <button\n                onClick={() => router.push('/dashboard')}\n                className=\"flex-1 px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors font-medium\"\n              >\n                戻る\n              </button>\n              <button\n                onClick={handlePayment}\n                disabled={!selectedMethod || !amount || loading}\n                className=\"flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium flex items-center justify-center gap-2\"\n              >\n                {loading ? (\n                  '処理中...'\n                ) : selectedMethod === 'bank_transfer' ? (\n                  <>振込情報を確認</>\n                ) : (\n                  <>\n                    お支払いへ進む\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n\n          {/* サイドバー */}\n          <div className=\"space-y-6\">\n            {/* セキュリティ情報 */}\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n              <div className=\"flex items-start\">\n                <Shield className=\"h-6 w-6 text-green-600 mr-3 flex-shrink-0\" />\n                <div>\n                  <h3 className=\"text-sm font-semibold text-green-900 mb-2\">セキュアな決済</h3>\n                  <p className=\"text-sm text-green-700\">\n                    すべての決済はSSL/TLS暗号化により保護されています。お客様の情報は安全に処理されます。\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* お問い合わせ */}\n            <div className=\"bg-white rounded-lg shadow-md p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">お支払いについて</h3>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                決済に関するご質問やお困りのことがございましたら、お気軽にお問い合わせください。\n              </p>\n              <button\n                onClick={() => router.push('/contact')}\n                className=\"w-full px-4 py-2 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition-colors text-sm font-medium\"\n              >\n                お問い合わせ\n              </button>\n            </div>\n\n            {/* 利用規約 */}\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <p className=\"text-xs text-gray-600\">\n                お支払いを行うことで、\n                <a href=\"/terms\" className=\"text-blue-600 hover:underline\">利用規約</a>\n                および\n                <a href=\"/privacy\" className=\"text-blue-600 hover:underline\">プライバシーポリシー</a>\n                に同意したものとみなされます。\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":14223},"src/app/shipments/[id]/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect, Suspense } from 'react'\nimport { useRouter, useParams, useSearchParams } from 'next/navigation'\nimport Link from 'next/link'\nimport Navbar from '@/components/Navbar'\nimport { \n  Package, MapPin, Calendar, Truck, DollarSign, User, \n  Phone, Mail, Edit, Trash, ArrowLeft, Send \n} from 'lucide-react'\n\nfunction ShipmentDetailContent() {\n  const router = useRouter()\n  const params = useParams()\n  const searchParams = useSearchParams()\n  const shipmentId = params.id as string\n  const action = searchParams.get('action')\n\n  const [user, setUser] = useState<any>(null)\n  const [shipment, setShipment] = useState<any>(null)\n  const [offers, setOffers] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [showOfferForm, setShowOfferForm] = useState(action === 'offer')\n  const [offerData, setOfferData] = useState({\n    proposedPrice: '',\n    proposedDeliveryDate: '',\n    message: '',\n  })\n  const [submitting, setSubmitting] = useState(false)\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const userData = localStorage.getItem('user')\n    \n    if (!token || !userData) {\n      router.push('/login')\n      return\n    }\n\n    setUser(JSON.parse(userData))\n    fetchShipmentDetail(token)\n  }, [shipmentId, router])\n\n  const fetchShipmentDetail = async (token: string) => {\n    try {\n      const [shipmentRes, offersRes] = await Promise.all([\n        fetch(`/api/shipments/${shipmentId}`, {\n          headers: { 'Authorization': `Bearer ${token}` },\n        }),\n        fetch(`/api/offers?shipmentId=${shipmentId}`, {\n          headers: { 'Authorization': `Bearer ${token}` },\n        }),\n      ])\n\n      if (shipmentRes.ok) {\n        const shipmentData = await shipmentRes.json()\n        setShipment(shipmentData.data)\n      }\n\n      if (offersRes.ok) {\n        const offersData = await offersRes.json()\n        setOffers(offersData.data)\n      }\n    } catch (error) {\n      console.error('Failed to fetch shipment:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSubmitOffer = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setSubmitting(true)\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/offers', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          shipmentId,\n          proposedPrice: parseFloat(offerData.proposedPrice),\n          proposedDeliveryDate: offerData.proposedDeliveryDate,\n          message: offerData.message,\n        }),\n      })\n\n      if (response.ok) {\n        setShowOfferForm(false)\n        setOfferData({ proposedPrice: '', proposedDeliveryDate: '', message: '' })\n        if (token) fetchShipmentDetail(token)\n      }\n    } catch (error) {\n      console.error('Failed to submit offer:', error)\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  const handleDeleteShipment = async () => {\n    if (!confirm('本当にこの案件を削除しますか？')) return\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch(`/api/shipments/${shipmentId}`, {\n        method: 'DELETE',\n        headers: { 'Authorization': `Bearer ${token}` },\n      })\n\n      if (response.ok) {\n        router.push('/shipments')\n      }\n    } catch (error) {\n      console.error('Failed to delete shipment:', error)\n    }\n  }\n\n  const getStatusBadge = (status: string) => {\n    const badges: Record<string, { bg: string; text: string; label: string }> = {\n      OPEN: { bg: 'bg-green-100', text: 'text-green-800', label: '募集中' },\n      MATCHED: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'マッチング済' },\n      IN_TRANSIT: { bg: 'bg-purple-100', text: 'text-purple-800', label: '輸送中' },\n      DELIVERED: { bg: 'bg-gray-100', text: 'text-gray-800', label: '配達完了' },\n      CANCELLED: { bg: 'bg-red-100', text: 'text-red-800', label: 'キャンセル' },\n    }\n    const badge = badges[status] || badges.OPEN\n    return (\n      <span className={`px-4 py-2 rounded-full text-sm font-semibold ${badge.bg} ${badge.text}`}>\n        {badge.label}\n      </span>\n    )\n  }\n\n  const getVehicleTypeLabel = (type: string) => {\n    const types: Record<string, string> = {\n      LIGHT_TRUCK: '軽トラック',\n      SMALL_TRUCK: '小型トラック',\n      MEDIUM_TRUCK: '中型トラック',\n      LARGE_TRUCK: '大型トラック',\n      TRAILER: 'トレーラー',\n      REFRIGERATED: '冷凍・冷蔵車',\n      FLATBED: '平ボディ',\n      WING: 'ウィング車',\n    }\n    return types[type] || type\n  }\n\n  if (loading || !user || !shipment) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white\">\n        <Navbar />\n        <div className=\"flex items-center justify-center h-screen\">\n          <div className=\"text-center\">\n            <div className=\"inline-block animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent\"></div>\n            <p className=\"text-gray-600 mt-4\">読み込み中...</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const isOwner = user.id === shipment.shipperId\n  const canOffer = user.userType === 'CARRIER' && shipment.status === 'OPEN'\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white\">\n      <Navbar />\n      \n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12\">\n        {/* 戻るボタン */}\n        <button\n          onClick={() => router.back()}\n          className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900 mb-6 transition fade-in-up\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n          <span>戻る</span>\n        </button>\n\n        {/* ヘッダー */}\n        <div className=\"card mb-8 fade-in-up\" style={{animationDelay: '0.1s'}}>\n          <div className=\"flex flex-col lg:flex-row justify-between items-start gap-4 mb-6\">\n            <div className=\"flex-1\">\n              <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-3\">\n                {shipment.title}\n              </h1>\n              {getStatusBadge(shipment.status)}\n            </div>\n            \n            {isOwner && (\n              <div className=\"flex gap-3\">\n                <button\n                  onClick={() => router.push(`/shipments/${shipmentId}/edit`)}\n                  className=\"btn-secondary flex items-center space-x-2 py-2 px-4\"\n                >\n                  <Edit className=\"h-4 w-4\" />\n                  <span>編集</span>\n                </button>\n                <button\n                  onClick={handleDeleteShipment}\n                  className=\"bg-red-100 text-red-700 hover:bg-red-200 px-4 py-2 rounded-xl font-semibold transition flex items-center space-x-2\"\n                >\n                  <Trash className=\"h-4 w-4\" />\n                  <span>削除</span>\n                </button>\n              </div>\n            )}\n          </div>\n\n          <p className=\"text-gray-700 leading-relaxed\">\n            {shipment.description}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* 左側: 詳細情報 */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* ルート情報 */}\n            <div className=\"card slide-in-left\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">配送ルート</h2>\n              \n              <div className=\"space-y-6\">\n                <div className=\"bg-green-50 p-6 rounded-xl\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"bg-green-500 p-3 rounded-full\">\n                      <MapPin className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <h3 className=\"text-lg font-bold text-gray-900\">集荷地</h3>\n                  </div>\n                  <p className=\"text-xl font-semibold text-gray-900 mb-2\">\n                    {shipment.pickupPrefecture} {shipment.pickupLocation}\n                  </p>\n                  <div className=\"flex items-center space-x-2 text-gray-600\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{new Date(shipment.pickupDateTime).toLocaleString('ja-JP')}</span>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-center\">\n                  <div className=\"h-12 w-0.5 bg-gradient-to-b from-green-500 to-purple-500\"></div>\n                </div>\n\n                <div className=\"bg-purple-50 p-6 rounded-xl\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"bg-purple-500 p-3 rounded-full\">\n                      <MapPin className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <h3 className=\"text-lg font-bold text-gray-900\">配送先</h3>\n                  </div>\n                  <p className=\"text-xl font-semibold text-gray-900 mb-2\">\n                    {shipment.deliveryPrefecture} {shipment.deliveryLocation}\n                  </p>\n                  <div className=\"flex items-center space-x-2 text-gray-600\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{new Date(shipment.deliveryDateTime).toLocaleString('ja-JP')}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* 荷物情報 */}\n            <div className=\"card slide-in-left\" style={{animationDelay: '0.2s'}}>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">荷物情報</h2>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-2\">荷物の種類</p>\n                  <p className=\"text-lg font-semibold text-gray-900\">{shipment.cargoType}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-2\">重量</p>\n                  <p className=\"text-lg font-semibold text-gray-900\">{shipment.cargoWeight} kg</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-2\">サイズ</p>\n                  <p className=\"text-lg font-semibold text-gray-900\">{shipment.cargoSize}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-2\">必要な車両</p>\n                  <div className=\"flex items-center space-x-2\">\n                    <Truck className=\"h-5 w-5 text-blue-600\" />\n                    <p className=\"text-lg font-semibold text-gray-900\">\n                      {getVehicleTypeLabel(shipment.requiredVehicleType)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {shipment.notes && (\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                  <p className=\"text-sm text-gray-600 mb-2\">備考・特記事項</p>\n                  <p className=\"text-gray-900\">{shipment.notes}</p>\n                </div>\n              )}\n            </div>\n\n            {/* オファー一覧 (荷主の場合) */}\n            {isOwner && offers.length > 0 && (\n              <div className=\"card slide-in-left\" style={{animationDelay: '0.3s'}}>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n                  受け取ったオファー ({offers.length}件)\n                </h2>\n                \n                <div className=\"space-y-4\">\n                  {offers.map((offer) => (\n                    <div key={offer.id} className=\"bg-gray-50 p-4 rounded-xl\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div>\n                          <p className=\"font-bold text-gray-900\">{offer.carrier.companyName}</p>\n                          <p className=\"text-sm text-gray-600\">{offer.carrier.contactPerson}</p>\n                        </div>\n                        <span className={`px-3 py-1 rounded-full text-xs font-semibold ${\n                          offer.status === 'ACCEPTED' ? 'bg-green-100 text-green-800' :\n                          offer.status === 'REJECTED' ? 'bg-red-100 text-red-800' :\n                          'bg-yellow-100 text-yellow-800'\n                        }`}>\n                          {offer.status === 'ACCEPTED' ? '承認済み' :\n                           offer.status === 'REJECTED' ? '拒否' : '保留中'}\n                        </span>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4 mb-3\">\n                        <div>\n                          <p className=\"text-xs text-gray-600\">オファー金額</p>\n                          <p className=\"text-lg font-bold text-blue-600\">\n                            ¥{offer.proposedPrice.toLocaleString()}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-gray-600\">配送予定日</p>\n                          <p className=\"text-sm font-semibold text-gray-900\">\n                            {new Date(offer.proposedDeliveryDate).toLocaleDateString('ja-JP')}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      {offer.message && (\n                        <p className=\"text-sm text-gray-700 mb-3\">「{offer.message}」</p>\n                      )}\n                      \n                      {offer.status === 'PENDING' && (\n                        <Link href=\"/offers\" className=\"text-blue-600 hover:text-blue-700 text-sm font-semibold\">\n                          オファー管理画面で対応 →\n                        </Link>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* 右側: サイドバー */}\n          <div className=\"space-y-6\">\n            {/* 料金 */}\n            <div className=\"card slide-in-right\">\n              <div className=\"text-center\">\n                <p className=\"text-gray-600 mb-2\">希望運賃</p>\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <DollarSign className=\"h-8 w-8 text-blue-600\" />\n                  <p className=\"text-4xl font-bold text-blue-600\">\n                    ¥{shipment.budget?.toLocaleString() || '未設定'}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* 荷主情報 (運送会社の場合) */}\n            {!isOwner && shipment.shipper && (\n              <div className=\"card slide-in-right\" style={{animationDelay: '0.1s'}}>\n                <h3 className=\"text-lg font-bold text-gray-900 mb-4\">荷主情報</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <User className=\"h-5 w-5 text-gray-500\" />\n                    <div>\n                      <p className=\"text-sm text-gray-600\">会社名</p>\n                      <p className=\"font-semibold text-gray-900\">{shipment.shipper.companyName}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <User className=\"h-5 w-5 text-gray-500\" />\n                    <div>\n                      <p className=\"text-sm text-gray-600\">担当者</p>\n                      <p className=\"font-semibold text-gray-900\">{shipment.shipper.contactPerson}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Phone className=\"h-5 w-5 text-gray-500\" />\n                    <div>\n                      <p className=\"text-sm text-gray-600\">電話番号</p>\n                      <p className=\"font-semibold text-gray-900\">{shipment.shipper.phone}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* オファーボタン (運送会社の場合) */}\n            {canOffer && !showOfferForm && (\n              <button\n                onClick={() => setShowOfferForm(true)}\n                className=\"w-full btn-primary py-4 text-lg flex items-center justify-center space-x-2 slide-in-right\"\n                style={{animationDelay: '0.2s'}}\n              >\n                <Send className=\"h-5 w-5\" />\n                <span>オファーを送信</span>\n              </button>\n            )}\n\n            {/* オファーフォーム */}\n            {showOfferForm && (\n              <div className=\"card slide-in-right\" style={{animationDelay: '0.2s'}}>\n                <h3 className=\"text-lg font-bold text-gray-900 mb-4\">オファーを送信</h3>\n                <form onSubmit={handleSubmitOffer} className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                      提案金額 (円) *\n                    </label>\n                    <input\n                      type=\"number\"\n                      required\n                      min=\"0\"\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                      placeholder={shipment.budget?.toString() || '0'}\n                      value={offerData.proposedPrice}\n                      onChange={(e) => setOfferData({ ...offerData, proposedPrice: e.target.value })}\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                      配送予定日 *\n                    </label>\n                    <input\n                      type=\"date\"\n                      required\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                      value={offerData.proposedDeliveryDate}\n                      onChange={(e) => setOfferData({ ...offerData, proposedDeliveryDate: e.target.value })}\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                      メッセージ\n                    </label>\n                    <textarea\n                      rows={3}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                      placeholder=\"アピールポイントや特記事項があれば記載してください\"\n                      value={offerData.message}\n                      onChange={(e) => setOfferData({ ...offerData, message: e.target.value })}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowOfferForm(false)}\n                      className=\"btn-secondary py-3\"\n                    >\n                      キャンセル\n                    </button>\n                    <button\n                      type=\"submit\"\n                      disabled={submitting}\n                      className=\"btn-primary py-3 disabled:opacity-50\"\n                    >\n                      {submitting ? '送信中...' : '送信'}\n                    </button>\n                  </div>\n                </form>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n\nexport default function ShipmentDetailPage() {\n  return (\n    <Suspense fallback={\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-gray-600 text-lg\">読み込み中...</div>\n      </div>\n    }>\n      <ShipmentDetailContent />\n    </Suspense>\n  )\n}\n","size_bytes":20168},"src/app/dashboard/settings/account-info/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Building2, \n  CreditCard, \n  Plus, \n  Edit, \n  Trash2, \n  Save, \n  X, \n  Shield,\n  CheckCircle,\n  AlertCircle,\n  Eye,\n  EyeOff\n} from 'lucide-react'\n\ninterface AccountInfo {\n  id: string\n  accountType: 'bank' | 'credit_card' | 'digital_wallet'\n  accountName: string\n  accountNumber: string\n  bankName?: string\n  branchName?: string\n  accountHolderName: string\n  isDefault: boolean\n  isVerified: boolean\n  addedDate: string\n  lastUsed?: string\n}\n\nexport default function AccountInfoPage() {\n  const [accounts, setAccounts] = useState<AccountInfo[]>([])\n  const [editingAccount, setEditingAccount] = useState<AccountInfo | null>(null)\n  const [showAddModal, setShowAddModal] = useState(false)\n  const [showAccountNumber, setShowAccountNumber] = useState<{ [key: string]: boolean }>({})\n  const [formData, setFormData] = useState({\n    accountType: 'bank' as 'bank' | 'credit_card' | 'digital_wallet',\n    accountName: '',\n    accountNumber: '',\n    bankName: '',\n    branchName: '',\n    accountHolderName: '',\n    isDefault: false\n  })\n\n  useEffect(() => {\n    loadAccounts()\n  }, [])\n\n  const loadAccounts = async () => {\n    // サンプルデータ\n    const sampleAccounts: AccountInfo[] = [\n      {\n        id: '1',\n        accountType: 'bank',\n        accountName: 'メイン口座',\n        accountNumber: '1234567',\n        bankName: '三菱UFJ銀行',\n        branchName: '品川支店',\n        accountHolderName: '株式会社サンプル',\n        isDefault: true,\n        isVerified: true,\n        addedDate: '2024-01-01',\n        lastUsed: '2024-01-15'\n      },\n      {\n        id: '2',\n        accountType: 'credit_card',\n        accountName: '法人カード',\n        accountNumber: '****-****-****-1234',\n        accountHolderName: '株式会社サンプル',\n        isDefault: false,\n        isVerified: true,\n        addedDate: '2024-01-05',\n        lastUsed: '2024-01-14'\n      },\n      {\n        id: '3',\n        accountType: 'digital_wallet',\n        accountName: 'PayPay',\n        accountNumber: 'paypay@example.com',\n        accountHolderName: '株式会社サンプル',\n        isDefault: false,\n        isVerified: false,\n        addedDate: '2024-01-10'\n      }\n    ]\n\n    setAccounts(sampleAccounts)\n  }\n\n  const handleAddAccount = () => {\n    setFormData({\n      accountType: 'bank',\n      accountName: '',\n      accountNumber: '',\n      bankName: '',\n      branchName: '',\n      accountHolderName: '',\n      isDefault: false\n    })\n    setEditingAccount(null)\n    setShowAddModal(true)\n  }\n\n  const handleEditAccount = (account: AccountInfo) => {\n    setFormData({\n      accountType: account.accountType,\n      accountName: account.accountName,\n      accountNumber: account.accountNumber,\n      bankName: account.bankName || '',\n      branchName: account.branchName || '',\n      accountHolderName: account.accountHolderName,\n      isDefault: account.isDefault\n    })\n    setEditingAccount(account)\n    setShowAddModal(true)\n  }\n\n  const handleSaveAccount = () => {\n    if (editingAccount) {\n      // 編集\n      setAccounts(prev => prev.map(account => \n        account.id === editingAccount.id \n          ? { ...account, ...formData, isVerified: account.isVerified, addedDate: account.addedDate, lastUsed: account.lastUsed }\n          : account\n      ))\n    } else {\n      // 新規追加\n      const newAccount: AccountInfo = {\n        id: Date.now().toString(),\n        ...formData,\n        isVerified: false,\n        addedDate: new Date().toISOString().split('T')[0]\n      }\n      setAccounts(prev => [...prev, newAccount])\n    }\n    setShowAddModal(false)\n    setEditingAccount(null)\n  }\n\n  const handleDeleteAccount = (accountId: string) => {\n    if (confirm('この口座情報を削除しますか？')) {\n      setAccounts(prev => prev.filter(account => account.id !== accountId))\n    }\n  }\n\n  const handleSetDefault = (accountId: string) => {\n    setAccounts(prev => prev.map(account => ({\n      ...account,\n      isDefault: account.id === accountId\n    })))\n  }\n\n  const toggleAccountNumberVisibility = (accountId: string) => {\n    setShowAccountNumber(prev => ({\n      ...prev,\n      [accountId]: !prev[accountId]\n    }))\n  }\n\n  const getAccountTypeIcon = (type: string) => {\n    switch (type) {\n      case 'bank': return <Building2 className=\"h-5 w-5\" />\n      case 'credit_card': return <CreditCard className=\"h-5 w-5\" />\n      case 'digital_wallet': return <Shield className=\"h-5 w-5\" />\n      default: return <Building2 className=\"h-5 w-5\" />\n    }\n  }\n\n  const getAccountTypeText = (type: string) => {\n    switch (type) {\n      case 'bank': return '銀行口座'\n      case 'credit_card': return 'クレジットカード'\n      case 'digital_wallet': return '電子マネー'\n      default: return '不明'\n    }\n  }\n\n  const maskAccountNumber = (accountNumber: string, type: string) => {\n    if (type === 'credit_card') {\n      return accountNumber\n    }\n    if (type === 'digital_wallet') {\n      return accountNumber\n    }\n    return '****' + accountNumber.slice(-4)\n  }\n\n  const banks = [\n    '三菱UFJ銀行', '三井住友銀行', 'みずほ銀行', 'りそな銀行', '楽天銀行', '住信SBIネット銀行', 'その他'\n  ]\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">口座情報</h1>\n            <p className=\"text-gray-600\">支払い用の口座情報を管理できます</p>\n          </div>\n          <button\n            onClick={handleAddAccount}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            <span>口座を追加</span>\n          </button>\n        </div>\n      </div>\n\n      {/* 口座一覧 */}\n      <div className=\"space-y-6\">\n        {accounts.map((account) => (\n          <div key={account.id} className=\"bg-white rounded-lg shadow-sm border\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"text-blue-600\">\n                    {getAccountTypeIcon(account.accountType)}\n                  </div>\n                  <div>\n                    <h2 className=\"text-lg font-semibold text-gray-900\">{account.accountName}</h2>\n                    <p className=\"text-sm text-gray-600\">{getAccountTypeText(account.accountType)}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {account.isDefault && (\n                    <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">\n                      デフォルト\n                    </span>\n                  )}\n                  {account.isVerified ? (\n                    <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800 flex items-center space-x-1\">\n                      <CheckCircle className=\"h-3 w-3\" />\n                      <span>認証済み</span>\n                    </span>\n                  ) : (\n                    <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800 flex items-center space-x-1\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      <span>未認証</span>\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">口座情報</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">口座番号:</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm text-gray-900 font-mono\">\n                          {showAccountNumber[account.id] ? account.accountNumber : maskAccountNumber(account.accountNumber, account.accountType)}\n                        </span>\n                        <button\n                          onClick={() => toggleAccountNumberVisibility(account.id)}\n                          className=\"text-gray-400 hover:text-gray-600\"\n                        >\n                          {showAccountNumber[account.id] ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </button>\n                      </div>\n                    </div>\n                    {account.bankName && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">銀行名:</span>\n                        <span className=\"text-sm text-gray-900\">{account.bankName}</span>\n                      </div>\n                    )}\n                    {account.branchName && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">支店名:</span>\n                        <span className=\"text-sm text-gray-900\">{account.branchName}</span>\n                      </div>\n                    )}\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">口座名義:</span>\n                      <span className=\"text-sm text-gray-900\">{account.accountHolderName}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">利用状況</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">追加日:</span>\n                      <span className=\"text-sm text-gray-900\">{new Date(account.addedDate).toLocaleDateString('ja-JP')}</span>\n                    </div>\n                    {account.lastUsed && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">最終利用:</span>\n                        <span className=\"text-sm text-gray-900\">{new Date(account.lastUsed).toLocaleDateString('ja-JP')}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-6 flex justify-end space-x-2\">\n                {!account.isDefault && (\n                  <button\n                    onClick={() => handleSetDefault(account.id)}\n                    className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\n                  >\n                    デフォルトに設定\n                  </button>\n                )}\n                <button\n                  onClick={() => handleEditAccount(account)}\n                  className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 flex items-center space-x-2\"\n                >\n                  <Edit className=\"h-4 w-4\" />\n                  <span>編集</span>\n                </button>\n                <button\n                  onClick={() => handleDeleteAccount(account.id)}\n                  className=\"px-4 py-2 border border-red-300 rounded-lg text-red-700 hover:bg-red-50 flex items-center space-x-2\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                  <span>削除</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* 追加・編集モーダル */}\n      {showAddModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">\n                  {editingAccount ? '口座を編集' : '口座を追加'}\n                </h2>\n                <button\n                  onClick={() => {\n                    setShowAddModal(false)\n                    setEditingAccount(null)\n                  }}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <X className=\"h-6 w-6\" />\n                </button>\n              </div>\n            </div>\n\n            <div className=\"p-6 space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">口座タイプ *</label>\n                  <select\n                    value={formData.accountType}\n                    onChange={(e) => setFormData(prev => ({ ...prev, accountType: e.target.value as any }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"bank\">銀行口座</option>\n                    <option value=\"credit_card\">クレジットカード</option>\n                    <option value=\"digital_wallet\">電子マネー</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">口座名 *</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.accountName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, accountName: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"メイン口座\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">口座番号/カード番号 *</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.accountNumber}\n                    onChange={(e) => setFormData(prev => ({ ...prev, accountNumber: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"1234567 または 1234-5678-9012-3456\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">口座名義 *</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.accountHolderName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, accountHolderName: e.target.value }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"株式会社サンプル\"\n                  />\n                </div>\n\n                {formData.accountType === 'bank' && (\n                  <>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">銀行名 *</label>\n                      <select\n                        value={formData.bankName}\n                        onChange={(e) => setFormData(prev => ({ ...prev, bankName: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      >\n                        <option value=\"\">選択してください</option>\n                        {banks.map(bank => (\n                          <option key={bank} value={bank}>{bank}</option>\n                        ))}\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">支店名 *</label>\n                      <input\n                        type=\"text\"\n                        required\n                        value={formData.branchName}\n                        onChange={(e) => setFormData(prev => ({ ...prev, branchName: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"品川支店\"\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n\n              <div>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.isDefault}\n                    onChange={(e) => setFormData(prev => ({ ...prev, isDefault: e.target.checked }))}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-700\">デフォルト口座に設定する</span>\n                </label>\n              </div>\n            </div>\n\n            <div className=\"px-6 py-4 border-t border-gray-200 flex justify-end space-x-2\">\n              <button\n                onClick={() => {\n                  setShowAddModal(false)\n                  setEditingAccount(null)\n                }}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\n              >\n                キャンセル\n              </button>\n              <button\n                onClick={handleSaveAccount}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n              >\n                <Save className=\"h-4 w-4\" />\n                <span>{editingAccount ? '更新' : '追加'}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </DashboardLayout>\n  )\n}\n\n","size_bytes":18580},"src/app/api/shipments/[id]/route.ts":{"content":"import { NextRequest } from 'next/server'\nimport { getUserFromRequest } from '@/lib/auth'\nimport {\n  successResponse,\n  errorResponse,\n  unauthorizedResponse,\n  forbiddenResponse,\n  notFoundResponse,\n} from '@/lib/api-response'\nimport prisma from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\n// 配送案件詳細取得\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    const shipment = await prisma.shipment.findUnique({\n      where: { id: params.id },\n      include: {\n        shipper: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n            phone: true,\n            email: true,\n          },\n        },\n        carrier: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n            phone: true,\n            email: true,\n          },\n        },\n        offers: {\n          include: {\n            carrier: {\n              select: {\n                id: true,\n                companyName: true,\n                contactPerson: true,\n                phone: true,\n              },\n            },\n          },\n          orderBy: {\n            createdAt: 'desc',\n          },\n        },\n      },\n    })\n    \n    if (!shipment) {\n      return notFoundResponse('配送案件が見つかりません')\n    }\n    \n    return successResponse(shipment)\n  } catch (error) {\n    console.error('Get shipment error:', error)\n    return errorResponse('配送案件の取得に失敗しました', 500)\n  }\n}\n\n// 配送案件更新\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    const shipment = await prisma.shipment.findUnique({\n      where: { id: params.id },\n    })\n    \n    if (!shipment) {\n      return notFoundResponse('配送案件が見つかりません')\n    }\n    \n    // 自分の案件のみ更新可能\n    if (shipment.shipperId !== user.userId) {\n      return forbiddenResponse('この配送案件を更新する権限がありません')\n    }\n    \n    const body = await request.json()\n    \n    const updatedShipment = await prisma.shipment.update({\n      where: { id: params.id },\n      data: {\n        status: body.status,\n      },\n      include: {\n        shipper: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n          },\n        },\n        carrier: {\n          select: {\n            id: true,\n            companyName: true,\n            contactPerson: true,\n          },\n        },\n      },\n    })\n    \n    return successResponse(updatedShipment)\n  } catch (error) {\n    console.error('Update shipment error:', error)\n    return errorResponse('配送案件の更新に失敗しました', 500)\n  }\n}\n\n// 配送案件削除\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    const shipment = await prisma.shipment.findUnique({\n      where: { id: params.id },\n    })\n    \n    if (!shipment) {\n      return notFoundResponse('配送案件が見つかりません')\n    }\n    \n    // 自分の案件のみ削除可能\n    if (shipment.shipperId !== user.userId) {\n      return forbiddenResponse('この配送案件を削除する権限がありません')\n    }\n    \n    await prisma.shipment.delete({\n      where: { id: params.id },\n    })\n    \n    return successResponse({ message: '配送案件を削除しました' })\n  } catch (error) {\n    console.error('Delete shipment error:', error)\n    return errorResponse('配送案件の削除に失敗しました', 500)\n  }\n}\n\n","size_bytes":3996},"src/app/api/auth/login/route.ts":{"content":"import { NextRequest } from 'next/server'\nexport const dynamic = 'force-dynamic'\nimport { loginSchema } from '@/lib/validators'\nimport { verifyPassword, generateToken } from '@/lib/auth'\nimport { successResponse, errorResponse } from '@/lib/api-response'\nimport prisma from '@/lib/prisma'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    console.log('Login attempt for email:', body.email)\n    \n    // バリデーション\n    const validatedData = loginSchema.parse(body)\n    \n    // ユーザー検索\n    const user = await prisma.user.findUnique({\n      where: { email: validatedData.email },\n    })\n    \n    if (!user) {\n      console.log('User not found:', validatedData.email)\n      return errorResponse('メールアドレスまたはパスワードが正しくありません', 401)\n    }\n    \n    console.log('User found, verifying password...')\n    // パスワード検証\n    const isValidPassword = await verifyPassword(\n      validatedData.password,\n      user.password\n    )\n    \n    if (!isValidPassword) {\n      console.log('Password verification failed')\n      return errorResponse('メールアドレスまたはパスワードが正しくありません', 401)\n    }\n    \n    console.log('Login successful for:', user.email)\n    \n    // JWTトークン生成\n    const token = generateToken({\n      userId: user.id,\n      email: user.email,\n      userType: user.userType as 'SHIPPER' | 'CARRIER',\n    })\n    \n    return successResponse({\n      user: {\n        id: user.id,\n        email: user.email,\n        userType: user.userType as 'SHIPPER' | 'CARRIER',\n        companyName: user.companyName,\n        contactPerson: user.contactPerson,\n        phone: user.phone,\n        isAdmin: user.isAdmin,\n        verificationStatus: user.verificationStatus,\n      },\n      token,\n    })\n  } catch (error: any) {\n    if (error.name === 'ZodError') {\n      return errorResponse(error.errors[0].message)\n    }\n    console.error('Login error:', error)\n    return errorResponse('ログインに失敗しました', 500)\n  }\n}\n\n","size_bytes":2090},"src/app/register/page.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\n\nexport default function RegisterPage() {\n  const router = useRouter()\n  const [formData, setFormData] = useState({\n    userType: 'SHIPPER',\n    companyName: '',\n    contactPerson: '',\n    phone: '',\n    postalCode: '',\n    address: '',\n    email: '',\n    password: '',\n  })\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError('')\n    setLoading(true)\n\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || '登録に失敗しました')\n      }\n\n      localStorage.setItem('token', data.data.token)\n      localStorage.setItem('user', JSON.stringify(data.data.user))\n\n      router.push('/dashboard')\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen gradient-bg flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-2xl w-full\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-slate-800 mb-2\">\n            新規登録\n          </h1>\n          <p className=\"text-slate-600\">\n            アカウントを作成してご利用ください\n          </p>\n          <div className=\"mt-4 p-4 bg-blue-50 rounded-xl border border-blue-200\">\n            <p className=\"text-sm text-slate-700 leading-relaxed\">\n              運送事業法に基づく許可を受けた事業者様のみ<br />\n              マッチングが可能となります。\n            </p>\n            <p className=\"text-sm text-slate-700 leading-relaxed mt-3\">\n              無料お試し期間は14日間になっており<br />\n              継続しない場合は費用は発生しません。\n            </p>\n          </div>\n        </div>\n\n        <div className=\"floating-card\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-xl text-sm\">\n                {error}\n              </div>\n            )}\n\n            {/* ユーザータイプ選択 */}\n            <div>\n              <label className=\"block text-sm font-semibold text-slate-700 mb-3\">\n                登録タイプ <span className=\"text-red-500\">*</span>\n              </label>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <button\n                  type=\"button\"\n                  onClick={() => setFormData({ ...formData, userType: 'SHIPPER' })}\n                  className={`p-4 rounded-xl border-2 transition-all ${\n                    formData.userType === 'SHIPPER'\n                      ? 'border-blue-500 bg-blue-50 text-blue-700'\n                      : 'border-gray-300 hover:border-gray-400'\n                  }`}\n                >\n                  <div className=\"font-semibold\">荷主</div>\n                  <div className=\"text-xs text-gray-600\">配送を依頼する</div>\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setFormData({ ...formData, userType: 'CARRIER' })}\n                  className={`p-4 rounded-xl border-2 transition-all ${\n                    formData.userType === 'CARRIER'\n                      ? 'border-green-500 bg-green-50 text-green-700'\n                      : 'border-gray-300 hover:border-gray-400'\n                  }`}\n                >\n                  <div className=\"font-semibold\">運送会社</div>\n                  <div className=\"text-xs text-gray-600\">配送を請け負う</div>\n                </button>\n              </div>\n            </div>\n\n            {/* 会社情報 */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label htmlFor=\"companyName\" className=\"block text-sm font-semibold text-slate-700 mb-2\">\n                  会社名 <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  id=\"companyName\"\n                  type=\"text\"\n                  required\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"株式会社〇〇\"\n                  value={formData.companyName}\n                  onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"contactPerson\" className=\"block text-sm font-semibold text-slate-700 mb-2\">\n                  担当者名 <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  id=\"contactPerson\"\n                  type=\"text\"\n                  required\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"山田太郎\"\n                  value={formData.contactPerson}\n                  onChange={(e) => setFormData({ ...formData, contactPerson: e.target.value })}\n                />\n              </div>\n            </div>\n\n            {/* 連絡先 */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label htmlFor=\"phone\" className=\"block text-sm font-semibold text-slate-700 mb-2\">\n                  電話番号 <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  id=\"phone\"\n                  type=\"tel\"\n                  required\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"03-1234-5678\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-semibold text-slate-700 mb-2\">\n                  メールアドレス <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  required\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"email@example.com\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                />\n              </div>\n            </div>\n\n            {/* 住所 */}\n            <div>\n              <label htmlFor=\"postalCode\" className=\"block text-sm font-semibold text-slate-700 mb-2\">\n                郵便番号 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                id=\"postalCode\"\n                type=\"text\"\n                required\n                className=\"w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"123-4567\"\n                value={formData.postalCode}\n                onChange={(e) => setFormData({ ...formData, postalCode: e.target.value })}\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"address\" className=\"block text-sm font-semibold text-slate-700 mb-2\">\n                住所 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                id=\"address\"\n                type=\"text\"\n                required\n                className=\"w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"東京都〇〇区〇〇 1-2-3\"\n                value={formData.address}\n                onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n              />\n            </div>\n\n            {/* パスワード */}\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-semibold text-slate-700 mb-2\">\n                パスワード <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                id=\"password\"\n                type=\"password\"\n                required\n                minLength={8}\n                className=\"w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"8文字以上\"\n                value={formData.password}\n                onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n              />\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full btn-primary py-3 text-lg disabled:opacity-50\"\n            >\n              {loading ? '登録中...' : '登録する'}\n            </button>\n\n            <div className=\"text-center\">\n              <span className=\"text-slate-600\">既にアカウントをお持ちの方は </span>\n              <Link href=\"/login\" className=\"text-blue-600 hover:text-blue-700 font-semibold\">\n                ログイン\n              </Link>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":9849},"src/app/dashboard/partners/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Users, \n  Search, \n  Filter, \n  Plus, \n  Eye, \n  MessageCircle, \n  Phone, \n  Mail, \n  MapPin, \n  Star,\n  Calendar,\n  Package,\n  CheckCircle,\n  Trash2,\n  Edit,\n  User,\n  Building2,\n  MoreVertical,\n  Save,\n  X\n} from 'lucide-react'\n\ninterface Partner {\n  id: string\n  companyName: string\n  contactPerson: string\n  email: string\n  phone: string\n  address: string\n  postalCode: string\n  userType: 'SHIPPER' | 'CARRIER'\n  rating: number\n  totalTransactions: number\n  lastTransactionDate: string\n  addedDate: string\n  status: 'active' | 'inactive' | 'pending'\n  notes?: string\n  specialties?: string[]\n}\n\nexport default function PartnersPage() {\n  const [partners, setPartners] = useState<Partner[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive' | 'pending'>('all')\n  const [userTypeFilter, setUserTypeFilter] = useState<'all' | 'SHIPPER' | 'CARRIER'>('all')\n  const [showAddModal, setShowAddModal] = useState(false)\n  const [editingPartner, setEditingPartner] = useState<Partner | null>(null)\n  const [formData, setFormData] = useState({\n    companyName: '',\n    contactPerson: '',\n    phone: '',\n    email: '',\n    address: '',\n    postalCode: '',\n    userType: 'SHIPPER' as 'SHIPPER' | 'CARRIER',\n    status: 'active' as 'active' | 'inactive' | 'pending',\n    specialties: [] as string[],\n    notes: ''\n  })\n\n  useEffect(() => {\n    loadPartners()\n  }, [])\n\n  const loadPartners = async () => {\n    try {\n      // サンプルデータ\n      const samplePartners: Partner[] = [\n        {\n          id: '1',\n          companyName: '株式会社トランスロジック',\n          contactPerson: '田中太郎',\n          email: 'tanaka@translogic.co.jp',\n          phone: '03-1234-5678',\n          address: '東京都港区六本木1-1-1',\n          postalCode: '106-0032',\n          userType: 'CARRIER',\n          rating: 4.8,\n          totalTransactions: 15,\n          lastTransactionDate: '2024-01-10',\n          addedDate: '2023-06-15',\n          status: 'active',\n          notes: '信頼できるパートナー。冷凍輸送に強み。',\n          specialties: ['冷凍輸送', '関東圏', '急便対応']\n        },\n        {\n          id: '2',\n          companyName: '山田運送株式会社',\n          contactPerson: '山田花子',\n          email: 'yamada@yamada-transport.co.jp',\n          phone: '06-9876-5432',\n          address: '大阪府大阪市北区梅田2-2-2',\n          postalCode: '530-0001',\n          userType: 'CARRIER',\n          rating: 4.5,\n          totalTransactions: 8,\n          lastTransactionDate: '2024-01-05',\n          addedDate: '2023-08-20',\n          status: 'active',\n          notes: '関西圏の輸送でよく利用。',\n          specialties: ['一般貨物', '関西圏', '大型トラック']\n        },\n        {\n          id: '3',\n          companyName: '株式会社グリーンロジスティクス',\n          contactPerson: '佐藤次郎',\n          email: 'sato@greenlogistics.co.jp',\n          phone: '052-1111-2222',\n          address: '愛知県名古屋市中区栄3-3-3',\n          postalCode: '460-0008',\n          userType: 'SHIPPER',\n          rating: 4.2,\n          totalTransactions: 23,\n          lastTransactionDate: '2023-12-28',\n          addedDate: '2023-04-10',\n          status: 'active',\n          notes: '環境に配慮した物流を重視。',\n          specialties: ['エコ物流', '中部圏', 'BtoB']\n        },\n        {\n          id: '4',\n          companyName: 'スピード物流株式会社',\n          contactPerson: '鈴木一郎',\n          email: 'suzuki@speedlogistics.co.jp',\n          phone: '092-3333-4444',\n          address: '福岡県福岡市博多区博多駅前4-4-4',\n          postalCode: '812-0011',\n          userType: 'CARRIER',\n          rating: 4.7,\n          totalTransactions: 12,\n          lastTransactionDate: '2023-11-15',\n          addedDate: '2023-09-05',\n          status: 'inactive',\n          notes: '九州圏の高速輸送。最近取引なし。',\n          specialties: ['高速輸送', '九州圏', '24時間対応']\n        }\n      ]\n      \n      setPartners(samplePartners)\n    } catch (error) {\n      console.error('Error loading partners:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAddPartner = () => {\n    setFormData({\n      companyName: '',\n      contactPerson: '',\n      phone: '',\n      email: '',\n      address: '',\n      postalCode: '',\n      userType: 'SHIPPER',\n      status: 'active',\n      specialties: [],\n      notes: ''\n    })\n    setShowAddModal(true)\n  }\n\n  const handleEditPartner = (partner: Partner) => {\n    setFormData({\n      companyName: partner.companyName,\n      contactPerson: partner.contactPerson,\n      phone: partner.phone,\n      email: partner.email,\n      address: partner.address,\n      postalCode: partner.postalCode,\n      userType: partner.userType,\n      status: partner.status,\n      specialties: partner.specialties || [],\n      notes: partner.notes || ''\n    })\n    setEditingPartner(partner)\n    setShowAddModal(true)\n  }\n\n  const handleSavePartner = () => {\n    if (editingPartner) {\n      // 編集\n      setPartners(prev => prev.map(partner => \n        partner.id === editingPartner.id \n          ? { ...partner, ...formData, rating: partner.rating, totalTransactions: partner.totalTransactions, lastTransactionDate: partner.lastTransactionDate, addedDate: partner.addedDate }\n          : partner\n      ))\n    } else {\n      // 新規追加\n      const newPartner: Partner = {\n        id: Date.now().toString(),\n        ...formData,\n        rating: 0,\n        totalTransactions: 0,\n        lastTransactionDate: '',\n        addedDate: new Date().toISOString().split('T')[0]\n      }\n      setPartners(prev => [...prev, newPartner])\n    }\n    setShowAddModal(false)\n    setEditingPartner(null)\n  }\n\n  const handleDeletePartner = (partnerId: string) => {\n    if (!confirm('この取引先を削除しますか？')) return\n    setPartners(prev => prev.filter(p => p.id !== partnerId))\n  }\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  const handleSpecialtyToggle = (specialty: string) => {\n    setFormData(prev => ({\n      ...prev,\n      specialties: prev.specialties.includes(specialty)\n        ? prev.specialties.filter(s => s !== specialty)\n        : [...prev.specialties, specialty]\n    }))\n  }\n\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case 'active':\n        return { label: 'アクティブ', color: 'bg-green-100 text-green-800' }\n      case 'inactive':\n        return { label: '非アクティブ', color: 'bg-gray-100 text-gray-800' }\n      case 'pending':\n        return { label: '承認待ち', color: 'bg-yellow-100 text-yellow-800' }\n      default:\n        return { label: '不明', color: 'bg-gray-100 text-gray-800' }\n    }\n  }\n\n  const filteredPartners = partners.filter(partner => {\n    const matchesSearch = searchTerm === '' || \n      partner.companyName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      partner.contactPerson.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === 'all' || partner.status === statusFilter\n    const matchesUserType = userTypeFilter === 'all' || partner.userType === userTypeFilter\n    \n    return matchesSearch && matchesStatus && matchesUserType\n  })\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'\n        }`}\n      />\n    ))\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">取引先管理</h1>\n            <p className=\"text-gray-600\">取引先企業の管理と連絡先情報を確認できます</p>\n          </div>\n            <button\n              onClick={handleAddPartner}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              <span>取引先を追加</span>\n            </button>\n        </div>\n      </div>\n\n      {/* 検索フィルター */}\n      <div className=\"bg-white rounded-lg shadow-sm border mb-6\">\n        <div className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"会社名、担当者名で検索...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div>\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"h-4 w-4 text-gray-500\" />\n                <select\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value as any)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">すべてのステータス</option>\n                  <option value=\"active\">アクティブ</option>\n                  <option value=\"inactive\">非アクティブ</option>\n                  <option value=\"pending\">承認待ち</option>\n                </select>\n              </div>\n            </div>\n            <div>\n              <select\n                value={userTypeFilter}\n                onChange={(e) => setUserTypeFilter(e.target.value as any)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"all\">すべての企業タイプ</option>\n                <option value=\"SHIPPER\">荷主企業</option>\n                <option value=\"CARRIER\">運送業者</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 取引先一覧 */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            取引先一覧 ({filteredPartners.length}件)\n          </h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : filteredPartners.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <Users className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>取引先はありません</p>\n            <button\n              className=\"mt-4 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n            >\n              最初の取引先を追加する\n            </button>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {filteredPartners.map((partner) => {\n              const statusInfo = getStatusInfo(partner.status)\n              \n              return (\n                <div key={partner.id} className=\"p-6 hover:bg-gray-50\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-lg font-medium text-gray-900\">\n                          {partner.companyName}\n                        </h3>\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n                          partner.userType === 'SHIPPER' \n                            ? 'bg-blue-100 text-blue-800' \n                            : 'bg-green-100 text-green-800'\n                        }`}>\n                          {partner.userType === 'SHIPPER' ? '荷主企業' : '運送業者'}\n                        </span>\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusInfo.color}`}>\n                          {statusInfo.label}\n                        </span>\n                      </div>\n                      \n                      {/* 評価と取引実績 */}\n                      <div className=\"flex items-center space-x-4 mb-3\">\n                        <div className=\"flex items-center space-x-1\">\n                          {renderStars(partner.rating)}\n                          <span className=\"text-sm text-gray-600 ml-1\">({partner.rating})</span>\n                        </div>\n                        <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                          <span className=\"flex items-center\">\n                            <Package className=\"h-4 w-4 mr-1\" />\n                            取引回数: {partner.totalTransactions}回\n                          </span>\n                          <span className=\"flex items-center\">\n                            <Calendar className=\"h-4 w-4 mr-1\" />\n                            最終取引: {new Date(partner.lastTransactionDate).toLocaleDateString('ja-JP')}\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* 連絡先情報 */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-700 mb-3\">\n                        <div className=\"flex items-center\">\n                          <User className=\"h-4 w-4 mr-2 text-gray-500\" />\n                          <span>{partner.contactPerson}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Phone className=\"h-4 w-4 mr-2 text-gray-500\" />\n                          <span>{partner.phone}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Mail className=\"h-4 w-4 mr-2 text-gray-500\" />\n                          <span>{partner.email}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                          <span>{partner.postalCode} {partner.address}</span>\n                        </div>\n                      </div>\n\n                      {/* メモ */}\n                      {partner.notes && (\n                        <div className=\"mb-3\">\n                          <p className=\"text-sm text-gray-600 bg-gray-50 p-2 rounded\">\n                            <strong>メモ:</strong> {partner.notes}\n                          </p>\n                        </div>\n                      )}\n\n                      {/* 専門分野 */}\n                      {partner.specialties && partner.specialties.length > 0 && (\n                        <div className=\"flex flex-wrap gap-2 mb-3\">\n                          {partner.specialties.map((specialty, index) => (\n                            <span\n                              key={index}\n                              className=\"px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full\"\n                            >\n                              {specialty}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n\n                      <div className=\"text-xs text-gray-400\">\n                        追加日: {new Date(partner.addedDate).toLocaleDateString('ja-JP')}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 ml-4\">\n                      <button\n                        className=\"p-2 text-gray-400 hover:text-blue-600\"\n                        title=\"詳細を見る\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n                      <button\n                        className=\"p-2 text-gray-400 hover:text-green-600\"\n                        title=\"メッセージを送る\"\n                      >\n                        <MessageCircle className=\"h-4 w-4\" />\n                      </button>\n                      <button\n                        onClick={() => handleEditPartner(partner)}\n                        className=\"p-2 text-gray-400 hover:text-purple-600\"\n                        title=\"編集\"\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </button>\n                      <button\n                        onClick={() => handleDeletePartner(partner.id)}\n                        className=\"p-2 text-gray-400 hover:text-red-600\"\n                        title=\"削除\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* 追加・編集モーダル */}\n      {showAddModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">\n                  {editingPartner ? '取引先を編集' : '取引先を追加'}\n                </h2>\n                <button\n                  onClick={() => {\n                    setShowAddModal(false)\n                    setEditingPartner(null)\n                  }}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <X className=\"h-6 w-6\" />\n                </button>\n              </div>\n            </div>\n\n            <div className=\"p-6 space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">会社名 *</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.companyName}\n                    onChange={(e) => handleInputChange('companyName', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"株式会社サンプル\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">担当者名 *</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.contactPerson}\n                    onChange={(e) => handleInputChange('contactPerson', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"山田太郎\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">電話番号 *</label>\n                  <input\n                    type=\"tel\"\n                    required\n                    value={formData.phone}\n                    onChange={(e) => handleInputChange('phone', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"03-1234-5678\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">メールアドレス *</label>\n                  <input\n                    type=\"email\"\n                    required\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"yamada@example.com\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">郵便番号</label>\n                  <input\n                    type=\"text\"\n                    value={formData.postalCode}\n                    onChange={(e) => handleInputChange('postalCode', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"106-0032\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">住所 *</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"東京都渋谷区恵比寿1-2-3\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">タイプ *</label>\n                  <select\n                    value={formData.userType}\n                    onChange={(e) => handleInputChange('userType', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"SHIPPER\">荷主</option>\n                    <option value=\"CARRIER\">運送会社</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">ステータス *</label>\n                  <select\n                    value={formData.status}\n                    onChange={(e) => handleInputChange('status', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"active\">アクティブ</option>\n                    <option value=\"inactive\">非アクティブ</option>\n                    <option value=\"pending\">承認待ち</option>\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">専門分野</label>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                  {['大型貨物', '小型貨物', '冷蔵輸送', '冷凍輸送', '危険物', '生鮮食品', '精密機器', '美術品', '関東圏', '関西圏', '中部圏', '九州圏', '北海道', '急便対応', '24時間対応', '長距離対応'].map(specialty => (\n                    <label key={specialty} className=\"flex items-center space-x-2 cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.specialties.includes(specialty)}\n                        onChange={() => handleSpecialtyToggle(specialty)}\n                        className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                      />\n                      <span className=\"text-sm text-gray-700\">{specialty}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">メモ</label>\n                <textarea\n                  value={formData.notes}\n                  onChange={(e) => handleInputChange('notes', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  rows={3}\n                  placeholder=\"取引先に関するメモや特記事項\"\n                />\n              </div>\n            </div>\n\n            <div className=\"px-6 py-4 border-t border-gray-200 flex justify-end space-x-2\">\n              <button\n                onClick={() => {\n                  setShowAddModal(false)\n                  setEditingPartner(null)\n                }}\n                className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\n              >\n                キャンセル\n              </button>\n              <button\n                onClick={handleSavePartner}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n              >\n                <Save className=\"h-4 w-4\" />\n                <span>{editingPartner ? '更新' : '追加'}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </DashboardLayout>\n  )\n}","size_bytes":26025},"src/app/api/admin/analytics/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyAdminSession } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\n// 管理者権限チェックミドルウェア\nasync function requireAdmin(request: NextRequest) {\n  const token = request.cookies.get('admin_token')?.value\n\n  if (!token) {\n    return NextResponse.json(\n      { error: '管理者認証が必要です' },\n      { status: 401 }\n    )\n  }\n\n  const payload = verifyAdminSession(token)\n\n  if (!payload) {\n    return NextResponse.json(\n      { error: '無効な管理者認証です' },\n      { status: 401 }\n    )\n  }\n\n  return payload\n}\n\n// リアルタイム分析データ取得\nexport async function GET(request: NextRequest) {\n  try {\n    const admin = await requireAdmin(request)\n    if (admin instanceof NextResponse) return admin\n\n    const { searchParams } = new URL(request.url)\n    const period = searchParams.get('period') || '7d'\n\n    // 実際のデータベースから取得\n    const [totalUsers, totalShipments, totalVehicles, recentShipments] = await Promise.all([\n      prisma.user.count(),\n      prisma.shipment.count(),\n      prisma.vehicle.count(),\n      prisma.shipment.findMany({\n        take: 10,\n        orderBy: { createdAt: 'desc' },\n        include: {\n          shipper: {\n            select: { companyName: true }\n          },\n          carrier: {\n            select: { companyName: true }\n          }\n        }\n      })\n    ])\n\n    // リアルタイム統計（デモ用）\n    const realtimeStats = {\n      onlineUsers: Math.floor(Math.random() * 50) + 120,\n      activeShipments: Math.floor(Math.random() * 20) + 45,\n      pendingApprovals: Math.floor(Math.random() * 10) + 8,\n      systemHealth: 'excellent',\n      serverLoad: Math.floor(Math.random() * 30) + 20,\n      responseTime: Math.floor(Math.random() * 50) + 100\n    }\n\n    // 詳細統計\n    const detailedStats = {\n      totalUsers,\n      activeUsers: Math.floor(totalUsers * 0.7),\n      pendingUsers: Math.floor(totalUsers * 0.05),\n      totalShipments,\n      completedShipments: Math.floor(totalShipments * 0.9),\n      totalVehicles,\n      availableVehicles: Math.floor(totalVehicles * 0.8),\n      totalRevenue: 125000000,\n      monthlyRevenue: 8500000,\n      averageMatchScore: 87.5,\n      customerSatisfaction: 4.6\n    }\n\n    // 地域別統計\n    const regionalStats = [\n      { region: '関東', count: 456, revenue: 45000000 },\n      { region: '関西', count: 234, revenue: 23000000 },\n      { region: '中部', count: 189, revenue: 18000000 },\n      { region: '九州', count: 123, revenue: 12000000 },\n      { region: '北海道', count: 67, revenue: 6500000 }\n    ]\n\n    // 成長データ\n    const userGrowth = [\n      { month: '2023-07', count: 120 },\n      { month: '2023-08', count: 145 },\n      { month: '2023-09', count: 167 },\n      { month: '2023-10', count: 189 },\n      { month: '2023-11', count: 234 },\n      { month: '2023-12', count: 278 },\n      { month: '2024-01', count: totalUsers }\n    ]\n\n    const revenueGrowth = [\n      { month: '2023-07', amount: 4500000 },\n      { month: '2023-08', amount: 5200000 },\n      { month: '2023-09', amount: 6100000 },\n      { month: '2023-10', amount: 6800000 },\n      { month: '2023-11', amount: 7500000 },\n      { month: '2023-12', amount: 8200000 },\n      { month: '2024-01', amount: detailedStats.monthlyRevenue }\n    ]\n\n    // 貨物タイプ別統計\n    const cargoTypeStats = [\n      { type: '一般貨物', count: 1234, percentage: 35.7 },\n      { type: '冷蔵・冷凍', count: 567, percentage: 16.4 },\n      { type: '大型貨物', count: 345, percentage: 10.0 },\n      { type: '危険物', count: 123, percentage: 3.6 },\n      { type: '生鮮食品', count: 456, percentage: 13.2 }\n    ]\n\n    // 最近の活動\n    const recentActivities = [\n      {\n        id: '1',\n        type: 'user_approved',\n        message: '新しいユーザーが承認されました',\n        details: '株式会社トランスロジック',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n        icon: 'CheckCircle'\n      },\n      {\n        id: '2',\n        type: 'shipment_created',\n        message: '新しい案件が投稿されました',\n        details: '東京から大阪への大型貨物配送',\n        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n        icon: 'Package'\n      },\n      {\n        id: '3',\n        type: 'document_pending',\n        message: '承認待ちの書類があります',\n        details: '中部運送株式会社 - 事業許可証',\n        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n        icon: 'FileText'\n      },\n      {\n        id: '4',\n        type: 'payment_completed',\n        message: '決済が完了しました',\n        details: '関西物流株式会社 - ¥50,000',\n        timestamp: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(),\n        icon: 'CreditCard'\n      }\n    ]\n\n    return NextResponse.json({\n      realtime: realtimeStats,\n      detailed: detailedStats,\n      regional: regionalStats,\n      growth: {\n        users: userGrowth,\n        revenue: revenueGrowth\n      },\n      cargoTypes: cargoTypeStats,\n      recentActivities,\n      recentShipments: recentShipments.map(s => ({\n        id: s.id,\n        title: s.cargoName,\n        shipper: s.shipper.companyName,\n        carrier: s.carrier?.companyName,\n        status: s.status,\n        createdAt: s.createdAt\n      }))\n    })\n  } catch (error) {\n    console.error('Get analytics error:', error)\n    return NextResponse.json(\n      { error: 'サーバーエラーが発生しました' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":5716},"src/app/api/auth/register/route.ts":{"content":"import { NextRequest } from 'next/server'\nexport const dynamic = 'force-dynamic'\nimport { registerSchema } from '@/lib/validators'\nimport { hashPassword, generateToken } from '@/lib/auth'\nimport { successResponse, errorResponse } from '@/lib/api-response'\nimport prisma from '@/lib/prisma'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // バリデーション\n    const validatedData = registerSchema.parse(body)\n    \n    // 既存ユーザーチェック\n    const existingUser = await prisma.user.findUnique({\n      where: { email: validatedData.email },\n    })\n    \n    if (existingUser) {\n      return errorResponse('このメールアドレスは既に登録されています')\n    }\n    \n    // パスワードのハッシュ化\n    const hashedPassword = await hashPassword(validatedData.password)\n    \n    // ユーザー作成\n    const user = await prisma.user.create({\n      data: {\n        email: validatedData.email,\n        password: hashedPassword,\n        userType: validatedData.userType,\n        companyName: validatedData.companyName,\n        contactPerson: validatedData.contactPerson,\n        phone: validatedData.phone,\n        postalCode: validatedData.postalCode,\n        address: validatedData.address,\n      },\n      select: {\n        id: true,\n        email: true,\n        userType: true,\n        companyName: true,\n        contactPerson: true,\n        phone: true,\n        createdAt: true,\n      },\n    })\n    \n    // JWTトークン生成\n    const token = generateToken({\n      userId: user.id,\n      email: user.email,\n      userType: user.userType as 'SHIPPER' | 'CARRIER',\n    })\n    \n    return successResponse({\n      user,\n      token,\n    }, 201)\n  } catch (error: any) {\n    if (error.name === 'ZodError') {\n      return errorResponse(error.errors[0].message)\n    }\n    console.error('Registration error:', error)\n    return errorResponse('登録に失敗しました', 500)\n  }\n}\n\n","size_bytes":1983},"src/app/dashboard/shipments/new/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Package, \n  MapPin, \n  Calendar, \n  Weight, \n  Truck, \n  DollarSign, \n  Save, \n  X,\n  AlertCircle,\n  CheckCircle2,\n  Shield\n} from 'lucide-react'\n\n// 車両タイプのマッピング（日本語 → ENUM）\nconst VEHICLE_TYPE_MAP: Record<string, string> = {\n  '軽トラック': 'LIGHT_TRUCK',\n  '小型トラック': 'SMALL_TRUCK',\n  '中型トラック': 'MEDIUM_TRUCK',\n  '大型トラック': 'LARGE_TRUCK',\n  'トレーラー': 'TRAILER',\n  '冷凍車': 'REFRIGERATED',\n  '冷蔵車': 'REFRIGERATED',\n  '平ボディ': 'FLATBED',\n  'ウイング車': 'WING',\n}\n\nexport default function NewShipmentPage() {\n  const router = useRouter()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [isVerified, setIsVerified] = useState(true)\n  const [verificationStatus, setVerificationStatus] = useState('')\n  \n  useEffect(() => {\n    const user = localStorage.getItem('user')\n    if (user) {\n      const userData = JSON.parse(user)\n      setVerificationStatus(userData.verificationStatus || 'PENDING')\n      setIsVerified(userData.verificationStatus === 'APPROVED')\n    }\n  }, [])\n  \n  const [formData, setFormData] = useState({\n    cargoName: '',\n    cargoDescription: '',\n    cargoWeight: '',\n    cargoVolume: '',\n    cargoValue: '',\n    \n    pickupPrefecture: '',\n    pickupCity: '',\n    pickupAddress: '',\n    pickupPostalCode: '',\n    pickupDate: '',\n    pickupTimeFrom: '',\n    pickupTimeTo: '',\n    \n    deliveryPrefecture: '',\n    deliveryCity: '',\n    deliveryAddress: '',\n    deliveryPostalCode: '',\n    deliveryDate: '',\n    deliveryTimeFrom: '',\n    deliveryTimeTo: '',\n    \n    requiredVehicleType: '',\n    needsHelper: false,\n    needsLiftGate: false,\n    temperature: '',\n    specialInstructions: '',\n    budget: ''\n  })\n\n  const prefectures = [\n    '北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県',\n    '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',\n    '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県',\n    '静岡県', '愛知県', '三重県', '滋賀県', '京都府', '大阪府', '兵庫県',\n    '奈良県', '和歌山県', '鳥取県', '島根県', '岡山県', '広島県', '山口県',\n    '徳島県', '香川県', '愛媛県', '高知県', '福岡県', '佐賀県', '長崎県',\n    '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'\n  ]\n\n  const vehicleTypes = [\n    '軽トラック', '小型トラック', '中型トラック', '大型トラック', \n    'トレーラー', '冷凍車', '冷蔵車', '平ボディ', 'ウイング車'\n  ]\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n    setError('')\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    // 未承認チェック\n    if (!isVerified) {\n      setError('許可証が承認されるまで、荷物の登録はできません。')\n      return\n    }\n    \n    setLoading(true)\n    setError('')\n    setSuccess('')\n\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) {\n        throw new Error('認証トークンが見つかりません')\n      }\n\n      // 車両タイプを日本語からENUMに変換\n      const vehicleTypeEnum = VEHICLE_TYPE_MAP[formData.requiredVehicleType]\n      if (!vehicleTypeEnum) {\n        throw new Error('車両タイプを選択してください')\n      }\n\n      const response = await fetch('/api/shipments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          cargoName: formData.cargoName,\n          cargoDescription: formData.cargoDescription || undefined,\n          cargoWeight: parseFloat(formData.cargoWeight),\n          cargoVolume: formData.cargoVolume ? parseFloat(formData.cargoVolume) : undefined,\n          cargoValue: formData.cargoValue ? parseFloat(formData.cargoValue) : undefined,\n          \n          pickupAddress: formData.pickupAddress,\n          pickupCity: formData.pickupCity,\n          pickupPrefecture: formData.pickupPrefecture,\n          pickupPostalCode: formData.pickupPostalCode,\n          pickupDate: formData.pickupDate,\n          pickupTimeFrom: formData.pickupTimeFrom || undefined,\n          pickupTimeTo: formData.pickupTimeTo || undefined,\n          \n          deliveryAddress: formData.deliveryAddress,\n          deliveryCity: formData.deliveryCity,\n          deliveryPrefecture: formData.deliveryPrefecture,\n          deliveryPostalCode: formData.deliveryPostalCode,\n          deliveryDate: formData.deliveryDate,\n          deliveryTimeFrom: formData.deliveryTimeFrom || undefined,\n          deliveryTimeTo: formData.deliveryTimeTo || undefined,\n          \n          requiredVehicleType: vehicleTypeEnum,\n          needsHelper: formData.needsHelper,\n          needsLiftGate: formData.needsLiftGate,\n          temperature: formData.temperature || undefined,\n          specialInstructions: formData.specialInstructions || undefined,\n          \n          budget: parseFloat(formData.budget)\n        })\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || '荷物の登録に失敗しました')\n      }\n\n      setSuccess('荷物が正常に登録されました！')\n      \n      // 2秒後にリダイレクト\n      setTimeout(() => {\n        router.push('/dashboard/my-shipments')\n      }, 2000)\n      \n    } catch (error: any) {\n      console.error('Error creating shipment:', error)\n      setError(error.message || '荷物の登録に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">荷物登録</h1>\n        <p className=\"text-gray-600\">新しい荷物を登録してください</p>\n      </div>\n\n      {/* エラーメッセージ */}\n      {error && (\n        <div className=\"mb-6 bg-red-50 border border-red-200 rounded-lg p-4 flex items-start animate-fade-in\">\n          <AlertCircle className=\"h-5 w-5 text-red-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-sm font-medium text-red-800\">エラーが発生しました</h3>\n            <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n          </div>\n          <button\n            onClick={() => setError('')}\n            className=\"ml-auto text-red-600 hover:text-red-800\"\n          >\n            <X className=\"h-5 w-5\" />\n          </button>\n        </div>\n      )}\n\n      {/* 成功メッセージ */}\n      {success && (\n        <div className=\"mb-6 bg-green-50 border border-green-200 rounded-lg p-4 flex items-start animate-fade-in\">\n          <CheckCircle2 className=\"h-5 w-5 text-green-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"text-sm font-medium text-green-800\">成功</h3>\n            <p className=\"text-sm text-green-700 mt-1\">{success}</p>\n          </div>\n        </div>\n      )}\n\n      {/* 未承認警告 */}\n      {!isVerified && (\n        <div className=\"mb-6 bg-yellow-50 border border-yellow-300 rounded-lg p-4 flex items-start\">\n          <Shield className=\"h-5 w-5 text-yellow-600 mt-0.5 mr-3 flex-shrink-0\" />\n          <div className=\"flex-1\">\n            <h3 className=\"text-sm font-medium text-yellow-800\">許可証の承認が必要です</h3>\n            <p className=\"text-sm text-yellow-700 mt-1\">\n              {verificationStatus === 'PENDING' \n                ? '許可証の審査が完了するまで、荷物の登録はできません。許可証ページで必要書類を提出してください。'\n                : '許可証が却下されています。許可証ページで再提出してください。'}\n            </p>\n            <button\n              onClick={() => router.push('/dashboard/verification')}\n              className=\"mt-2 text-sm text-yellow-800 underline hover:text-yellow-900\"\n            >\n              許可証ページへ移動 →\n            </button>\n          </div>\n        </div>\n      )}\n\n      <form onSubmit={handleSubmit} className=\"space-y-8\">\n        {/* 基本情報 */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <Package className=\"h-5 w-5 mr-2\" />\n            基本情報\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                荷物名 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.cargoName}\n                onChange={(e) => handleInputChange('cargoName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 精密機械部品\"\n                required\n              />\n            </div>\n            \n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">荷物説明</label>\n              <textarea\n                value={formData.cargoDescription}\n                onChange={(e) => handleInputChange('cargoDescription', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                rows={3}\n                placeholder=\"荷物の詳細を入力してください\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                重量 (kg) <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.cargoWeight}\n                onChange={(e) => handleInputChange('cargoWeight', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 1000\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">容積 (m³)</label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.cargoVolume}\n                onChange={(e) => handleInputChange('cargoVolume', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 10\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">荷物価格 (円)</label>\n              <input\n                type=\"number\"\n                step=\"1\"\n                value={formData.cargoValue}\n                onChange={(e) => handleInputChange('cargoValue', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 500000\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 出発地情報 */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <MapPin className=\"h-5 w-5 mr-2\" />\n            出発地情報\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                郵便番号 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.pickupPostalCode}\n                onChange={(e) => handleInputChange('pickupPostalCode', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 100-0001\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                都道府県 <span className=\"text-red-500\">*</span>\n              </label>\n              <select\n                value={formData.pickupPrefecture}\n                onChange={(e) => handleInputChange('pickupPrefecture', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"\">選択してください</option>\n                {prefectures.map(pref => (\n                  <option key={pref} value={pref}>{pref}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                市区町村 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.pickupCity}\n                onChange={(e) => handleInputChange('pickupCity', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 千代田区\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                住所 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.pickupAddress}\n                onChange={(e) => handleInputChange('pickupAddress', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 千代田1-1-1\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                集荷日 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"date\"\n                value={formData.pickupDate}\n                onChange={(e) => handleInputChange('pickupDate', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              />\n            </div>\n\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">集荷時間帯</label>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <input\n                  type=\"time\"\n                  value={formData.pickupTimeFrom}\n                  onChange={(e) => handleInputChange('pickupTimeFrom', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"開始時間\"\n                />\n                <input\n                  type=\"time\"\n                  value={formData.pickupTimeTo}\n                  onChange={(e) => handleInputChange('pickupTimeTo', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"終了時間\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 配送先情報 */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <MapPin className=\"h-5 w-5 mr-2\" />\n            配送先情報\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                郵便番号 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.deliveryPostalCode}\n                onChange={(e) => handleInputChange('deliveryPostalCode', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 150-0001\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                都道府県 <span className=\"text-red-500\">*</span>\n              </label>\n              <select\n                value={formData.deliveryPrefecture}\n                onChange={(e) => handleInputChange('deliveryPrefecture', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"\">選択してください</option>\n                {prefectures.map(pref => (\n                  <option key={pref} value={pref}>{pref}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                市区町村 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.deliveryCity}\n                onChange={(e) => handleInputChange('deliveryCity', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 渋谷区\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                住所 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.deliveryAddress}\n                onChange={(e) => handleInputChange('deliveryAddress', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 渋谷1-1-1\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                配送日 <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"date\"\n                value={formData.deliveryDate}\n                onChange={(e) => handleInputChange('deliveryDate', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              />\n            </div>\n\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">配送時間帯</label>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <input\n                  type=\"time\"\n                  value={formData.deliveryTimeFrom}\n                  onChange={(e) => handleInputChange('deliveryTimeFrom', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"開始時間\"\n                />\n                <input\n                  type=\"time\"\n                  value={formData.deliveryTimeTo}\n                  onChange={(e) => handleInputChange('deliveryTimeTo', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"終了時間\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 配送条件 */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <Truck className=\"h-5 w-5 mr-2\" />\n            配送条件\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                必要車両タイプ <span className=\"text-red-500\">*</span>\n              </label>\n              <select\n                value={formData.requiredVehicleType}\n                onChange={(e) => handleInputChange('requiredVehicleType', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"\">選択してください</option>\n                {vehicleTypes.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">温度管理</label>\n              <input\n                type=\"text\"\n                value={formData.temperature}\n                onChange={(e) => handleInputChange('temperature', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: -5℃〜5℃\"\n              />\n            </div>\n\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-3\">追加オプション</label>\n              <div className=\"space-y-3\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.needsHelper}\n                    onChange={(e) => handleInputChange('needsHelper', e.target.checked)}\n                    className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">荷役作業員が必要</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.needsLiftGate}\n                    onChange={(e) => handleInputChange('needsLiftGate', e.target.checked)}\n                    className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">パワーゲートが必要</span>\n                </label>\n              </div>\n            </div>\n\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">特記事項</label>\n              <textarea\n                value={formData.specialInstructions}\n                onChange={(e) => handleInputChange('specialInstructions', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                rows={3}\n                placeholder=\"その他の要望や注意事項を入力してください\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 予算 */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <DollarSign className=\"h-5 w-5 mr-2\" />\n            予算\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                予算 (円) <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                step=\"1\"\n                value={formData.budget}\n                onChange={(e) => handleInputChange('budget', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: 50000\"\n                required\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* アクションボタン */}\n        <div className=\"flex justify-end gap-4\">\n          <button\n            type=\"button\"\n            onClick={() => router.push('/dashboard/my-shipments')}\n            className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors flex items-center\"\n            disabled={loading}\n          >\n            <X className=\"h-4 w-4 mr-2\" />\n            キャンセル\n          </button>\n          <button\n            type=\"submit\"\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center disabled:opacity-50 disabled:cursor-not-allowed\"\n            disabled={loading}\n          >\n            {loading ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                登録中...\n              </>\n            ) : (\n              <>\n                <Save className=\"h-4 w-4 mr-2\" />\n                登録する\n              </>\n            )}\n          </button>\n        </div>\n      </form>\n    </DashboardLayout>\n  )\n}\n","size_bytes":26691},"src/components/DashboardHeader.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Logo from '@/components/Logo'\nimport StatsDisplay from '@/components/StatsDisplay'\nimport { Bell, User, User as UserIcon } from 'lucide-react'\n\ninterface DashboardHeaderProps {\n  user?: any\n}\n\nexport default function DashboardHeader({ user }: DashboardHeaderProps) {\n  const router = useRouter()\n  const [unreadCount, setUnreadCount] = useState(0)\n\n  useEffect(() => {\n    fetchUnreadCount()\n    // 30秒ごとに未読件数を更新\n    const interval = setInterval(fetchUnreadCount, 30000)\n    return () => clearInterval(interval)\n  }, [])\n\n  const fetchUnreadCount = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) return\n\n      const response = await fetch('/api/notifications', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setUnreadCount(data.unreadCount || 0)\n      }\n    } catch (error) {\n      console.error('Fetch unread count error:', error)\n    }\n  }\n\n  return (\n    <header className=\"bg-white shadow-sm border-b px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-6\">\n          <StatsDisplay />\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button \n            onClick={() => router.push('/dashboard')}\n            className=\"text-gray-600 hover:text-gray-800\"\n          >\n            ダッシュボード\n          </button>\n          <button \n            onClick={() => router.push('/contact')}\n            className=\"text-gray-600 hover:text-gray-800\"\n          >\n            お問い合わせ\n          </button>\n          <button \n            onClick={() => router.push('/dashboard/notifications')}\n            className=\"relative\"\n          >\n            <Bell className=\"h-5 w-5 text-gray-600 hover:text-gray-800\" />\n            {unreadCount > 0 && (\n              <span className=\"absolute -top-1 -right-1 h-5 w-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">\n                {unreadCount > 9 ? '9+' : unreadCount}\n              </span>\n            )}\n          </button>\n          <div \n            onClick={() => router.push('/dashboard/profile')}\n            className=\"flex items-center space-x-2 cursor-pointer hover:bg-gray-100 rounded-lg px-2 py-1\"\n          >\n            <User className=\"h-8 w-8 bg-gray-300 rounded-full flex items-center justify-center\">\n              <UserIcon className=\"h-4 w-4\" />\n            </User>\n            <span className=\"text-gray-700\">{user?.contactPerson}</span>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n","size_bytes":2800},"src/app/dashboard/settings/credit-info/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Shield, \n  TrendingUp, \n  BarChart3, \n  CheckCircle, \n  AlertCircle, \n  Clock, \n  Star,\n  Target,\n  Award,\n  FileText,\n  Upload,\n  Download\n} from 'lucide-react'\n\nexport default function CreditInfoPage() {\n  const [user, setUser] = useState<any>(null)\n  const [creditScore, setCreditScore] = useState(85)\n  const [creditHistory, setCreditHistory] = useState([\n    { date: '2024-01-15', action: '取引完了', points: +5, description: '大型貨物配送完了' },\n    { date: '2024-01-10', action: '支払い遅延', points: -10, description: '支払いが3日遅延' },\n    { date: '2024-01-05', action: '取引完了', points: +3, description: '冷蔵貨物配送完了' },\n    { date: '2023-12-28', action: '取引完了', points: +5, description: '急便配送完了' },\n    { date: '2023-12-20', action: '評価向上', points: +2, description: '顧客からの高評価' }\n  ])\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      const userProfile = JSON.parse(userData)\n      setUser(userProfile)\n    }\n  }, [])\n\n  const getCreditScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-600 bg-green-100'\n    if (score >= 80) return 'text-blue-600 bg-blue-100'\n    if (score >= 70) return 'text-yellow-600 bg-yellow-100'\n    return 'text-red-600 bg-red-100'\n  }\n\n  const getCreditScoreLevel = (score: number) => {\n    if (score >= 90) return '優秀'\n    if (score >= 80) return '良好'\n    if (score >= 70) return '普通'\n    return '要改善'\n  }\n\n  const creditFactors = [\n    { name: '支払い履歴', score: 95, weight: 35, description: '過去の支払い実績' },\n    { name: '取引量', score: 80, weight: 25, description: '月間取引金額' },\n    { name: 'レスポンス時間', score: 75, weight: 20, description: '平均応答時間' },\n    { name: '完了率', score: 93, weight: 15, description: '取引完了率' },\n    { name: 'ユーザー評価', score: 88, weight: 5, description: '取引相手からの評価' }\n  ]\n\n  const improvementTips = [\n    '支払いを期日通りに行うことで信用スコアが向上します',\n    '定期的な取引で取引量を増やすとスコアが上がります',\n    '迅速なレスポンスで取引相手の信頼を獲得しましょう',\n    '高品質なサービスでユーザー評価を向上させましょう',\n    'プロフィール情報を充実させて信頼性を高めましょう'\n  ]\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">信用情報</h1>\n        <p className=\"text-gray-600\">あなたの信用スコアと取引履歴を確認できます</p>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* 信用スコア概要 */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <Shield className=\"h-5 w-5 mr-2\" />\n              信用スコア概要\n            </h2>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"text-center mb-6\">\n              <div className={`inline-flex items-center px-6 py-3 rounded-full text-2xl font-bold ${getCreditScoreColor(creditScore)}`}>\n                {creditScore}点\n              </div>\n              <p className=\"text-sm text-gray-600 mt-2\">\n                レベル: {getCreditScoreLevel(creditScore)}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">42</div>\n                <div className=\"text-sm text-gray-600\">完了取引数</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">98%</div>\n                <div className=\"text-sm text-gray-600\">完了率</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">4.2</div>\n                <div className=\"text-sm text-gray-600\">平均評価</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 信用スコア詳細 */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <BarChart3 className=\"h-5 w-5 mr-2\" />\n              信用スコア詳細\n            </h2>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-4\">\n              {creditFactors.map((factor, index) => (\n                <div key={index} className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <span className=\"text-sm font-medium text-gray-700\">{factor.name}</span>\n                      <span className=\"text-xs text-gray-500 ml-2\">({factor.weight}%)</span>\n                    </div>\n                    <span className=\"text-sm font-semibold text-gray-900\">{factor.score}点</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${factor.score}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-xs text-gray-500\">{factor.description}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* 取引履歴 */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <Clock className=\"h-5 w-5 mr-2\" />\n              取引履歴\n            </h2>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-4\">\n              {creditHistory.map((history, index) => (\n                <div key={index} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                      history.points > 0 ? 'bg-green-100' : 'bg-red-100'\n                    }`}>\n                      {history.points > 0 ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      ) : (\n                        <AlertCircle className=\"h-4 w-4 text-red-600\" />\n                      )}\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">{history.action}</p>\n                      <p className=\"text-xs text-gray-500\">{history.description}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`text-sm font-semibold ${\n                      history.points > 0 ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {history.points > 0 ? '+' : ''}{history.points}pt\n                    </p>\n                    <p className=\"text-xs text-gray-500\">{history.date}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* スコア向上のヒント */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <TrendingUp className=\"h-5 w-5 mr-2\" />\n              スコア向上のヒント\n            </h2>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-3\">\n              {improvementTips.map((tip, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-xs font-semibold text-blue-600\">{index + 1}</span>\n                  </div>\n                  <p className=\"text-sm text-gray-700\">{tip}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* 証明書類アップロード */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <FileText className=\"h-5 w-5 mr-2\" />\n              証明書類アップロード\n            </h2>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                <Upload className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-sm text-gray-600 mb-2\">証明書類をアップロードしてください</p>\n                <p className=\"text-xs text-gray-500\">事業許可証、運送事業許可証、保険証券など</p>\n                <button className=\"mt-4 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 text-sm\">\n                  ファイルを選択\n                </button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border border-gray-200 rounded-lg\">\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-2\">事業許可証</h3>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-500\">未アップロード</span>\n                    <button className=\"text-blue-600 hover:text-blue-800 text-sm\">\n                      アップロード\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"p-4 border border-gray-200 rounded-lg\">\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-2\">運送事業許可証</h3>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-500\">未アップロード</span>\n                    <button className=\"text-blue-600 hover:text-blue-800 text-sm\">\n                      アップロード\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"p-4 border border-gray-200 rounded-lg\">\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-2\">保険証券</h3>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-500\">未アップロード</span>\n                    <button className=\"text-blue-600 hover:text-blue-800 text-sm\">\n                      アップロード\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"p-4 border border-gray-200 rounded-lg\">\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-2\">法人番号証明書</h3>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-500\">未アップロード</span>\n                    <button className=\"text-blue-600 hover:text-blue-800 text-sm\">\n                      アップロード\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n\n","size_bytes":12175},"src/components/DashboardSidebar.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Logo from '@/components/Logo'\nimport { \n  Package, \n  Search, \n  Truck, \n  Building2, \n  Users, \n  Settings, \n  FileText, \n  CheckCircle,\n  ChevronDown,\n  ChevronRight,\n  Plus,\n  Bookmark,\n  History,\n  Shield,\n  CreditCard,\n  LayoutDashboard\n} from 'lucide-react'\n\ninterface DashboardSidebarProps {\n  onNavigate?: () => void\n}\n\nexport default function DashboardSidebar({ onNavigate }: DashboardSidebarProps = {}) {\n  const router = useRouter()\n  const [shipmentSearchOpen, setShipmentSearchOpen] = useState(false)\n  const [myShipmentsOpen, setMyShipmentsOpen] = useState(false)\n  const [adminMenuOpen, setAdminMenuOpen] = useState(false)\n  const [isAdmin, setIsAdmin] = useState(false)\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      const user = JSON.parse(userData)\n      setIsAdmin(user.isAdmin || false)\n    }\n  }, [])\n\n  const handleNavigation = (path: string) => {\n    router.push(path)\n    if (onNavigate) {\n      onNavigate()\n    }\n  }\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg flex flex-col h-screen overflow-y-auto\">\n      {/* ロゴエリア */}\n      <div className=\"p-6 border-b\">\n        <Logo linkable={false} />\n      </div>\n\n      {/* ナビゲーション */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        <div className=\"space-y-1\">\n          {/* 荷物を探す */}\n          <div className=\"space-y-1\">\n            <button \n              onClick={() => setShipmentSearchOpen(!shipmentSearchOpen)}\n              className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center justify-between\"\n            >\n              <span className=\"flex items-center\">\n                <Search className=\"h-4 w-4 mr-3\" />\n                荷物を探す\n              </span>\n              {shipmentSearchOpen ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronRight className=\"h-4 w-4\" />\n              )}\n            </button>\n            {shipmentSearchOpen && (\n              <div className=\"ml-6 space-y-1\">\n                <button \n                  onClick={() => handleNavigation('/shipments/search')}\n                  className=\"w-full text-left px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-lg flex items-center text-sm\"\n                >\n                  <Search className=\"h-4 w-4 mr-3\" />\n                  荷物検索\n                </button>\n                <button \n                  onClick={() => handleNavigation('/dashboard/saved-shipments')}\n                  className=\"w-full text-left px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-lg flex items-center text-sm\"\n                >\n                  <Bookmark className=\"h-4 w-4 mr-3\" />\n                  保存した荷物\n                </button>\n                <button \n                  onClick={() => handleNavigation('/dashboard/recent-shipments')}\n                  className=\"w-full text-left px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-lg flex items-center text-sm\"\n                >\n                  <History className=\"h-4 w-4 mr-3\" />\n                  最近見た荷物\n                </button>\n              </div>\n            )}\n          </div>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/limited-shipments')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <Package className=\"h-4 w-4 mr-3\" />\n            限定荷物\n          </button>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/shipments/new')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <Plus className=\"h-4 w-4 mr-3\" />\n            荷物登録\n          </button>\n          \n          {/* マイ荷物・成約 */}\n          <div className=\"space-y-1\">\n            <button \n              onClick={() => setMyShipmentsOpen(!myShipmentsOpen)}\n              className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center justify-between\"\n            >\n              <span className=\"flex items-center\">\n                <Package className=\"h-4 w-4 mr-3\" />\n                マイ荷物・成約\n              </span>\n              {myShipmentsOpen ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronRight className=\"h-4 w-4\" />\n              )}\n            </button>\n            {myShipmentsOpen && (\n              <div className=\"ml-6 space-y-1\">\n                <button \n                  onClick={() => handleNavigation('/dashboard/my-shipments')}\n                  className=\"w-full text-left px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-lg flex items-center text-sm\"\n                >\n                  <Package className=\"h-4 w-4 mr-3\" />\n                  登録した荷物\n                </button>\n                <button \n                  onClick={() => handleNavigation('/dashboard/contracted-shipments')}\n                  className=\"w-full text-left px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-lg flex items-center text-sm\"\n                >\n                  <CheckCircle className=\"h-4 w-4 mr-3\" />\n                  成約した荷物\n                </button>\n              </div>\n            )}\n          </div>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/vehicle-search')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <Truck className=\"h-4 w-4 mr-3\" />\n            空車検索\n          </button>\n\n          <button \n            onClick={() => handleNavigation('/vehicles/register')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <Plus className=\"h-4 w-4 mr-3\" />\n            空車登録\n          </button>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/company-search')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <Building2 className=\"h-4 w-4 mr-3\" />\n            企業検索\n          </button>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/partners')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <Users className=\"h-4 w-4 mr-3\" />\n            取引先管理\n          </button>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/transport-log')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <FileText className=\"h-4 w-4 mr-3\" />\n            実運送体制管理簿\n          </button>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/verification')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <Shield className=\"h-4 w-4 mr-3\" />\n            許可証・認証\n          </button>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/payment')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <CreditCard className=\"h-4 w-4 mr-3\" />\n            お支払い\n          </button>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/services')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <Settings className=\"h-4 w-4 mr-3\" />\n            便利サービス\n          </button>\n\n          <button \n            onClick={() => handleNavigation('/dashboard/settings')}\n            className=\"w-full text-left px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg flex items-center\"\n          >\n            <Settings className=\"h-4 w-4 mr-3\" />\n            設定\n          </button>\n\n          {/* 管理者メニュー */}\n          {isAdmin && (\n            <div className=\"pt-4 mt-4 border-t border-gray-200 space-y-1\">\n              <div className=\"px-3 py-1 text-xs font-semibold text-gray-500 uppercase\">\n                管理者機能\n              </div>\n              <div className=\"space-y-1\">\n                <button \n                  onClick={() => setAdminMenuOpen(!adminMenuOpen)}\n                  className=\"w-full text-left px-3 py-2 text-red-700 hover:bg-red-50 rounded-lg flex items-center justify-between\"\n                >\n                  <span className=\"flex items-center\">\n                    <LayoutDashboard className=\"h-4 w-4 mr-3\" />\n                    Admin\n                  </span>\n                  {adminMenuOpen ? (\n                    <ChevronDown className=\"h-4 w-4\" />\n                  ) : (\n                    <ChevronRight className=\"h-4 w-4\" />\n                  )}\n                </button>\n                {adminMenuOpen && (\n                  <div className=\"ml-6 space-y-1\">\n                    <button \n                      onClick={() => handleNavigation('/admin')}\n                      className=\"w-full text-left px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg flex items-center text-sm\"\n                    >\n                      <LayoutDashboard className=\"h-4 w-4 mr-3\" />\n                      ダッシュボード\n                    </button>\n                    <button \n                      onClick={() => handleNavigation('/admin/users')}\n                      className=\"w-full text-left px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg flex items-center text-sm\"\n                    >\n                      <Users className=\"h-4 w-4 mr-3\" />\n                      ユーザー管理\n                    </button>\n                    <button \n                      onClick={() => handleNavigation('/admin/shipments')}\n                      className=\"w-full text-left px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg flex items-center text-sm\"\n                    >\n                      <Package className=\"h-4 w-4 mr-3\" />\n                      荷物管理\n                    </button>\n                    <button \n                      onClick={() => handleNavigation('/admin/verifications')}\n                      className=\"w-full text-left px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg flex items-center text-sm\"\n                    >\n                      <Shield className=\"h-4 w-4 mr-3\" />\n                      認証管理\n                    </button>\n                    <button \n                      onClick={() => handleNavigation('/admin/payments')}\n                      className=\"w-full text-left px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg flex items-center text-sm\"\n                    >\n                      <CreditCard className=\"h-4 w-4 mr-3\" />\n                      決済管理\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n    </div>\n  )\n}\n","size_bytes":11387},"src/app/dashboard/services/page.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Calculator, \n  MapPin, \n  Fuel, \n  Calendar, \n  Users, \n  Wrench,\n  DollarSign,\n  TrendingUp,\n  Clock,\n  Package,\n  FileText,\n  Download,\n  Upload,\n  BarChart3,\n  AlertCircle,\n  CheckCircle\n} from 'lucide-react'\n\ninterface Service {\n  id: string\n  title: string\n  description: string\n  icon: any\n  color: string\n  bgColor: string\n  status: 'active' | 'coming_soon'\n  link?: string\n}\n\nexport default function ServicesPage() {\n  const [activeTab, setActiveTab] = useState<'all' | 'tools' | 'reports' | 'management'>('all')\n\n  const services: Service[] = [\n    {\n      id: 'price-calc',\n      title: '料金見積もり計算',\n      description: '距離、重量、車両タイプから運賃を自動計算',\n      icon: Calculator,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      status: 'active',\n      link: '/dashboard/services/price-calculator'\n    },\n    {\n      id: 'distance-calc',\n      title: '距離計算ツール',\n      description: '2地点間の最適ルートと距離を計算',\n      icon: MapPin,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n      status: 'active',\n      link: '/dashboard/services/distance-calculator'\n    },\n    {\n      id: 'fuel-calc',\n      title: '燃料費計算',\n      description: '走行距離と燃費から燃料コストを算出',\n      icon: Fuel,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      status: 'active',\n      link: '/dashboard/services/fuel-calculator'\n    },\n    {\n      id: 'schedule',\n      title: '配送スケジュール管理',\n      description: '配送予定を一元管理し、効率的に運用',\n      icon: Calendar,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      status: 'coming_soon'\n    },\n    {\n      id: 'driver',\n      title: 'ドライバー管理',\n      description: 'ドライバーの稼働状況や勤怠を管理',\n      icon: Users,\n      color: 'text-indigo-600',\n      bgColor: 'bg-indigo-50',\n      status: 'coming_soon'\n    },\n    {\n      id: 'maintenance',\n      title: '車両メンテナンス記録',\n      description: '車両の点検・整備履歴を記録・管理',\n      icon: Wrench,\n      color: 'text-red-600',\n      bgColor: 'bg-red-50',\n      status: 'coming_soon'\n    },\n    {\n      id: 'profit',\n      title: '収益分析レポート',\n      description: '売上・利益を可視化し、経営判断をサポート',\n      icon: TrendingUp,\n      color: 'text-teal-600',\n      bgColor: 'bg-teal-50',\n      status: 'coming_soon'\n    },\n    {\n      id: 'invoice',\n      title: '請求書自動作成',\n      description: '配送実績から請求書を自動生成',\n      icon: FileText,\n      color: 'text-yellow-600',\n      bgColor: 'bg-yellow-50',\n      status: 'coming_soon'\n    },\n    {\n      id: 'performance',\n      title: 'パフォーマンス分析',\n      description: '配送効率や稼働率を分析・改善提案',\n      icon: BarChart3,\n      color: 'text-pink-600',\n      bgColor: 'bg-pink-50',\n      status: 'coming_soon'\n    }\n  ]\n\n  const filteredServices = services.filter(service => {\n    if (activeTab === 'all') return true\n    if (activeTab === 'tools') return ['price-calc', 'distance-calc', 'fuel-calc'].includes(service.id)\n    if (activeTab === 'reports') return ['profit', 'performance'].includes(service.id)\n    if (activeTab === 'management') return ['schedule', 'driver', 'maintenance', 'invoice'].includes(service.id)\n    return true\n  })\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">便利サービス</h1>\n        <p className=\"text-gray-600\">物流業務を効率化する各種サービスをご利用いただけます</p>\n      </div>\n\n      {/* タブメニュー */}\n      <div className=\"mb-6\">\n        <div className=\"flex space-x-2 overflow-x-auto\">\n          <button\n            onClick={() => setActiveTab('all')}\n            className={`px-4 py-2 rounded-lg whitespace-nowrap transition-colors ${\n              activeTab === 'all'\n                ? 'bg-blue-600 text-white'\n                : 'bg-white text-gray-700 hover:bg-gray-100'\n            }`}\n          >\n            すべて\n          </button>\n          <button\n            onClick={() => setActiveTab('tools')}\n            className={`px-4 py-2 rounded-lg whitespace-nowrap transition-colors ${\n              activeTab === 'tools'\n                ? 'bg-blue-600 text-white'\n                : 'bg-white text-gray-700 hover:bg-gray-100'\n            }`}\n          >\n            計算ツール\n          </button>\n          <button\n            onClick={() => setActiveTab('reports')}\n            className={`px-4 py-2 rounded-lg whitespace-nowrap transition-colors ${\n              activeTab === 'reports'\n                ? 'bg-blue-600 text-white'\n                : 'bg-white text-gray-700 hover:bg-gray-100'\n            }`}\n          >\n            レポート・分析\n          </button>\n          <button\n            onClick={() => setActiveTab('management')}\n            className={`px-4 py-2 rounded-lg whitespace-nowrap transition-colors ${\n              activeTab === 'management'\n                ? 'bg-blue-600 text-white'\n                : 'bg-white text-gray-700 hover:bg-gray-100'\n            }`}\n          >\n            管理ツール\n          </button>\n        </div>\n      </div>\n\n      {/* サービスカード */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredServices.map((service, index) => (\n          <div\n            key={service.id}\n            className={`bg-white rounded-lg shadow-sm border p-6 hover:shadow-md transition-all duration-300 ${\n              service.status === 'active' ? 'cursor-pointer hover:scale-105' : 'opacity-75'\n            }`}\n            onClick={() => {\n              if (service.status === 'active' && service.link) {\n                window.location.href = service.link\n              }\n            }}\n          >\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className={`${service.bgColor} p-3 rounded-lg`}>\n                <service.icon className={`h-6 w-6 ${service.color}`} />\n              </div>\n              {service.status === 'coming_soon' && (\n                <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full\">\n                  近日公開\n                </span>\n              )}\n              {service.status === 'active' && (\n                <span className=\"text-xs bg-green-100 text-green-600 px-2 py-1 rounded-full flex items-center\">\n                  <CheckCircle className=\"h-3 w-3 mr-1\" />\n                  利用可能\n                </span>\n              )}\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{service.title}</h3>\n            <p className=\"text-sm text-gray-600\">{service.description}</p>\n            {service.status === 'active' && (\n              <div className=\"mt-4 text-blue-600 text-sm font-medium flex items-center\">\n                今すぐ使う\n                <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                </svg>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* 統計情報 */}\n      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg p-6 text-white\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-blue-100\">利用可能サービス</span>\n            <CheckCircle className=\"h-5 w-5\" />\n          </div>\n          <div className=\"text-3xl font-bold\">3</div>\n          <div className=\"text-sm text-blue-100 mt-1\">計算ツール</div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg p-6 text-white\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-purple-100\">近日公開予定</span>\n            <Clock className=\"h-5 w-5\" />\n          </div>\n          <div className=\"text-3xl font-bold\">6</div>\n          <div className=\"text-sm text-purple-100 mt-1\">新機能準備中</div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-green-500 to-green-600 rounded-lg p-6 text-white\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-green-100\">合計サービス</span>\n            <Package className=\"h-5 w-5\" />\n          </div>\n          <div className=\"text-3xl font-bold\">9</div>\n          <div className=\"text-sm text-green-100 mt-1\">業務効率化ツール</div>\n        </div>\n      </div>\n\n      {/* お知らせ */}\n      <div className=\"mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6\">\n        <div className=\"flex items-start\">\n          <AlertCircle className=\"h-5 w-5 text-blue-600 mt-0.5 mr-3\" />\n          <div>\n            <h3 className=\"text-lg font-semibold text-blue-900 mb-2\">新サービス続々追加予定！</h3>\n            <p className=\"text-blue-700 text-sm\">\n              2024年2月より、配送スケジュール管理、ドライバー管理など、さらに便利な機能を順次リリース予定です。\n              物流業務の効率化をさらにサポートします。\n            </p>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":9690},"src/app/api/admin/auth/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyAdminSession, generateAdminToken } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\n// 管理者ログイン\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password } = await request.json()\n\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: 'メールアドレスとパスワードが必要です' },\n        { status: 400 }\n      )\n    }\n\n    // 管理者ユーザーを検索\n    const admin = await prisma.user.findUnique({\n      where: { \n        email,\n        userType: 'ADMIN'\n      }\n    })\n\n    if (!admin) {\n      return NextResponse.json(\n        { error: '管理者アカウントが見つかりません' },\n        { status: 401 }\n      )\n    }\n\n    // パスワード検証（実際の実装ではbcryptを使用）\n    // デモ用に簡単な検証\n    if (password !== 'admin123' && password !== 'password') {\n      return NextResponse.json(\n        { error: 'パスワードが正しくありません' },\n        { status: 401 }\n      )\n    }\n\n    // 管理者トークン生成\n    const token = generateAdminToken({\n      userId: admin.id,\n      email: admin.email,\n      userType: 'ADMIN'\n    })\n\n    const response = NextResponse.json({\n      message: '管理者ログインに成功しました',\n      user: {\n        userId: admin.id,\n        email: admin.email,\n        companyName: admin.companyName,\n        userType: admin.userType,\n        contactPerson: admin.contactPerson\n      }\n    })\n\n    // セキュアなHTTPOnlyクッキーにトークンを設定\n    response.cookies.set('admin_token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 24 * 60 * 60 // 24時間\n    })\n\n    return response\n  } catch (error) {\n    console.error('Admin login error:', error)\n    return NextResponse.json(\n      { error: 'サーバーエラーが発生しました' },\n      { status: 500 }\n    )\n  }\n}\n\n// 管理者認証状態確認\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.cookies.get('admin_token')?.value\n\n    if (!token) {\n      return NextResponse.json(\n        { error: '認証トークンが見つかりません' },\n        { status: 401 }\n      )\n    }\n\n    const payload = verifyAdminSession(token)\n\n    if (!payload) {\n      return NextResponse.json(\n        { error: '無効な認証トークンです' },\n        { status: 401 }\n      )\n    }\n\n    const admin = await prisma.user.findUnique({\n      where: { \n        id: payload.userId,\n        userType: 'ADMIN'\n      },\n      select: {\n        id: true,\n        email: true,\n        companyName: true,\n        userType: true,\n        contactPerson: true,\n        createdAt: true\n      }\n    })\n\n    if (!admin) {\n      return NextResponse.json(\n        { error: '管理者アカウントが見つかりません' },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json({\n      message: '認証成功',\n      user: admin\n    })\n  } catch (error) {\n    console.error('Admin auth check error:', error)\n    return NextResponse.json(\n      { error: 'サーバーエラーが発生しました' },\n      { status: 500 }\n    )\n  }\n}\n\n// 管理者ログアウト\nexport async function DELETE(request: NextRequest) {\n  try {\n    const response = NextResponse.json({\n      message: '管理者ログアウトしました'\n    })\n\n    // クッキーを削除\n    response.cookies.set('admin_token', '', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 0\n    })\n\n    return response\n  } catch (error) {\n    console.error('Admin logout error:', error)\n    return NextResponse.json(\n      { error: 'サーバーエラーが発生しました' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":3937},"src/app/offers/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Navbar from '@/components/Navbar'\nimport { Package, MapPin, DollarSign, Clock, Check, X } from 'lucide-react'\n\nexport default function OffersPage() {\n  const router = useRouter()\n  const [user, setUser] = useState<any>(null)\n  const [offers, setOffers] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [filter, setFilter] = useState('ALL')\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const userData = localStorage.getItem('user')\n    \n    if (!token || !userData) {\n      router.push('/login')\n      return\n    }\n\n    setUser(JSON.parse(userData))\n    fetchOffers(token)\n  }, [router])\n\n  const fetchOffers = async (token: string) => {\n    try {\n      const response = await fetch('/api/offers', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setOffers(data.data)\n      }\n    } catch (error) {\n      console.error('Failed to fetch offers:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAcceptOffer = async (offerId: string) => {\n    const token = localStorage.getItem('token')\n    if (!token) return\n\n    try {\n      const response = await fetch(`/api/offers/${offerId}/accept`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      })\n\n      if (response.ok) {\n        fetchOffers(token)\n      }\n    } catch (error) {\n      console.error('Failed to accept offer:', error)\n    }\n  }\n\n  const handleRejectOffer = async (offerId: string) => {\n    const token = localStorage.getItem('token')\n    if (!token) return\n\n    try {\n      const response = await fetch(`/api/offers/${offerId}/reject`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      })\n\n      if (response.ok) {\n        fetchOffers(token)\n      }\n    } catch (error) {\n      console.error('Failed to reject offer:', error)\n    }\n  }\n\n  const getStatusBadge = (status: string) => {\n    const badges: Record<string, { bg: string; text: string; label: string }> = {\n      PENDING: { bg: 'bg-yellow-100', text: 'text-yellow-800', label: '保留中' },\n      ACCEPTED: { bg: 'bg-green-100', text: 'text-green-800', label: '承認済み' },\n      REJECTED: { bg: 'bg-red-100', text: 'text-red-800', label: '拒否' },\n      CANCELLED: { bg: 'bg-gray-100', text: 'text-gray-800', label: 'キャンセル' },\n    }\n    const badge = badges[status] || badges.PENDING\n    return (\n      <span className={`px-3 py-1 rounded-full text-xs font-semibold ${badge.bg} ${badge.text}`}>\n        {badge.label}\n      </span>\n    )\n  }\n\n  const filteredOffers = offers.filter(offer => {\n    if (filter === 'ALL') return true\n    return offer.status === filter\n  })\n\n  if (!user) {\n    return null\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white\">\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12\">\n        {/* ヘッダー */}\n        <div className=\"mb-8 fade-in-up\">\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-2\">\n            {user.userType === 'SHIPPER' ? '受け取ったオファー' : '送信したオファー'}\n          </h1>\n          <p className=\"text-gray-600\">\n            {filteredOffers.length}件のオファー\n          </p>\n        </div>\n\n        {/* フィルター */}\n        <div className=\"card mb-8 slide-in-left\">\n          <div className=\"flex flex-wrap gap-2\">\n            {['ALL', 'PENDING', 'ACCEPTED', 'REJECTED'].map((status) => (\n              <button\n                key={status}\n                onClick={() => setFilter(status)}\n                className={`px-4 py-2 rounded-xl font-semibold transition-all ${\n                  filter === status\n                    ? 'bg-gradient-to-r from-blue-600 to-cyan-500 text-white shadow-md'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                {status === 'ALL' ? 'すべて' : getStatusBadge(status).props.children}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* オファーリスト */}\n        {loading ? (\n          <div className=\"text-center py-12\">\n            <div className=\"inline-block animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent\"></div>\n            <p className=\"text-gray-600 mt-4\">読み込み中...</p>\n          </div>\n        ) : filteredOffers.length === 0 ? (\n          <div className=\"card text-center py-12\">\n            <Package className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600 text-lg\">オファーがありません</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {filteredOffers.map((offer, index) => (\n              <div\n                key={offer.id}\n                className=\"card hover:shadow-xl transition-all fade-in-up\"\n                style={{animationDelay: `${index * 0.1}s`}}\n              >\n                <div className=\"flex flex-col lg:flex-row gap-6\">\n                  {/* 左側: 案件情報 */}\n                  <div className=\"flex-1\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <h3 className=\"text-xl font-bold text-gray-900 flex-1 pr-4\">\n                        {offer.shipment.title}\n                      </h3>\n                      {getStatusBadge(offer.status)}\n                    </div>\n\n                    {/* ルート情報 */}\n                    <div className=\"space-y-3 mb-4 bg-gray-50 p-4 rounded-xl\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"bg-green-500 p-2 rounded-lg\">\n                          <MapPin className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-gray-500 mb-1\">集荷</p>\n                          <p className=\"text-sm font-semibold text-gray-900\">\n                            {offer.shipment.pickupPrefecture} {offer.shipment.pickupLocation}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"bg-purple-500 p-2 rounded-lg\">\n                          <MapPin className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-gray-500 mb-1\">配送先</p>\n                          <p className=\"text-sm font-semibold text-gray-900\">\n                            {offer.shipment.deliveryPrefecture} {offer.shipment.deliveryLocation}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* オファー情報 */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-xs text-gray-500 mb-1\">希望運賃</p>\n                        <p className=\"text-lg font-bold text-gray-700\">\n                          ¥{offer.shipment.budget?.toLocaleString() || '未設定'}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-gray-500 mb-1\">オファー金額</p>\n                        <p className=\"text-lg font-bold text-blue-600\">\n                          ¥{offer.proposedPrice.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* 右側: オファー詳細とアクション */}\n                  <div className=\"lg:w-80 space-y-4\">\n                    {/* 運送会社情報 (荷主の場合) */}\n                    {user.userType === 'SHIPPER' && (\n                      <div className=\"bg-blue-50 p-4 rounded-xl\">\n                        <p className=\"text-xs text-gray-600 mb-2\">運送会社</p>\n                        <p className=\"font-bold text-gray-900\">{offer.carrier.companyName}</p>\n                        <p className=\"text-sm text-gray-600 mt-1\">{offer.carrier.contactPerson}</p>\n                      </div>\n                    )}\n\n                    {/* メッセージ */}\n                    {offer.message && (\n                      <div className=\"bg-gray-50 p-4 rounded-xl\">\n                        <p className=\"text-xs text-gray-600 mb-2\">メッセージ</p>\n                        <p className=\"text-sm text-gray-800\">{offer.message}</p>\n                      </div>\n                    )}\n\n                    {/* 配送予定日 */}\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>配送予定: {new Date(offer.proposedDeliveryDate).toLocaleDateString('ja-JP')}</span>\n                    </div>\n\n                    {/* アクションボタン (荷主で保留中の場合) */}\n                    {user.userType === 'SHIPPER' && offer.status === 'PENDING' && (\n                      <div className=\"grid grid-cols-2 gap-3 pt-4 border-t border-gray-200\">\n                        <button\n                          onClick={() => handleRejectOffer(offer.id)}\n                          className=\"btn-secondary py-3 flex items-center justify-center space-x-2\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                          <span>拒否</span>\n                        </button>\n                        <button\n                          onClick={() => handleAcceptOffer(offer.id)}\n                          className=\"btn-primary py-3 flex items-center justify-center space-x-2\"\n                        >\n                          <Check className=\"h-4 w-4\" />\n                          <span>承認</span>\n                        </button>\n                      </div>\n                    )}\n\n                    {/* 詳細を見るボタン */}\n                    <button\n                      onClick={() => router.push(`/shipments/${offer.shipmentId}`)}\n                      className=\"w-full btn-secondary py-3\"\n                    >\n                      案件詳細を見る\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </main>\n    </div>\n  )\n}\n","size_bytes":10700},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n\n","size_bytes":83},"src/app/settings/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Navbar from '@/components/Navbar'\nimport { Bell, Shield, Eye, Mail, Smartphone, Globe, Save, Check } from 'lucide-react'\n\nexport default function SettingsPage() {\n  const router = useRouter()\n  const [user, setUser] = useState<any>(null)\n  const [settings, setSettings] = useState({\n    emailNotifications: true,\n    pushNotifications: false,\n    smsNotifications: false,\n    publicProfile: false,\n    showContactInfo: true,\n    language: 'ja',\n    timezone: 'Asia/Tokyo',\n  })\n  const [saving, setSaving] = useState(false)\n  const [saved, setSaved] = useState(false)\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const userData = localStorage.getItem('user')\n\n    if (!token || !userData) {\n      router.push('/login')\n      return\n    }\n\n    setUser(JSON.parse(userData))\n  }, [])\n\n  const handleSave = async () => {\n    setSaving(true)\n    try {\n      // 実際のAPI呼び出しをここに実装\n      await new Promise(resolve => setTimeout(resolve, 1000)) // ダミーの遅延\n      \n      setSaved(true)\n      setTimeout(() => setSaved(false), 3000)\n    } catch (error) {\n      console.error('Error saving settings:', error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const handleSettingChange = (key: string, value: boolean | string) => {\n    setSettings({ ...settings, [key]: value })\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar userType={user?.userType} />\n\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">設定</h1>\n          <p className=\"text-gray-600 mt-2 text-sm sm:text-base\">アプリケーションの設定を管理できます</p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* 通知設定 */}\n          <div className=\"card\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-br from-blue-50 to-cyan-50 p-3 rounded-2xl\">\n                <Bell className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">通知設定</h2>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-sm sm:text-base font-semibold text-gray-900\">メール通知</h3>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">新しいオファーやメッセージの通知</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={settings.emailNotifications}\n                    onChange={(e) => handleSettingChange('emailNotifications', e.target.checked)}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                </label>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-sm sm:text-base font-semibold text-gray-900\">プッシュ通知</h3>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">ブラウザからの通知</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={settings.pushNotifications}\n                    onChange={(e) => handleSettingChange('pushNotifications', e.target.checked)}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                </label>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-sm sm:text-base font-semibold text-gray-900\">SMS通知</h3>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">重要な通知をSMSで受け取る</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={settings.smsNotifications}\n                    onChange={(e) => handleSettingChange('smsNotifications', e.target.checked)}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* プライバシー設定 */}\n          <div className=\"card\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 p-3 rounded-2xl\">\n                <Shield className=\"h-6 w-6 text-purple-600\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">プライバシー設定</h2>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-sm sm:text-base font-semibold text-gray-900\">プロフィールを公開</h3>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">他のユーザーがプロフィールを閲覧可能</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={settings.publicProfile}\n                    onChange={(e) => handleSettingChange('publicProfile', e.target.checked)}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                </label>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-sm sm:text-base font-semibold text-gray-900\">連絡先情報を表示</h3>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">電話番号とメールアドレスを表示</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={settings.showContactInfo}\n                    onChange={(e) => handleSettingChange('showContactInfo', e.target.checked)}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* 地域・言語設定 */}\n          <div className=\"card\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 p-3 rounded-2xl\">\n                <Globe className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">地域・言語設定</h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">言語</label>\n                <select\n                  value={settings.language}\n                  onChange={(e) => handleSettingChange('language', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                >\n                  <option value=\"ja\">日本語</option>\n                  <option value=\"en\">English</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">タイムゾーン</label>\n                <select\n                  value={settings.timezone}\n                  onChange={(e) => handleSettingChange('timezone', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n                >\n                  <option value=\"Asia/Tokyo\">東京 (JST)</option>\n                  <option value=\"Asia/Seoul\">ソウル (KST)</option>\n                  <option value=\"Asia/Shanghai\">上海 (CST)</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* 保存ボタン */}\n          <div className=\"flex justify-end\">\n            <button\n              onClick={handleSave}\n              disabled={saving}\n              className=\"btn-primary flex items-center space-x-2 px-6 py-3\"\n            >\n              {saved ? (\n                <>\n                  <Check className=\"h-5 w-5\" />\n                  <span>保存完了</span>\n                </>\n              ) : saving ? (\n                <>\n                  <Save className=\"h-5 w-5\" />\n                  <span>保存中...</span>\n                </>\n              ) : (\n                <>\n                  <Save className=\"h-5 w-5\" />\n                  <span>設定を保存</span>\n                </>\n              )}\n            </button>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":11374},"src/app/dashboard/settings/company-details/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Building2, \n  MapPin, \n  Phone, \n  Mail, \n  Globe, \n  Calendar, \n  Users, \n  FileText, \n  Save, \n  X, \n  Edit,\n  CheckCircle,\n  AlertCircle\n} from 'lucide-react'\n\nexport default function CompanyDetailsPage() {\n  const [editing, setEditing] = useState(false)\n  const [user, setUser] = useState<any>(null)\n  const [formData, setFormData] = useState({\n    companyName: '',\n    companyNameKana: '',\n    representativeName: '',\n    representativeNameKana: '',\n    businessType: '',\n    industry: '',\n    capital: '',\n    establishedDate: '',\n    employeeCount: '',\n    website: '',\n    description: '',\n    businessLicense: '',\n    transportLicense: '',\n    insuranceNumber: '',\n    taxId: ''\n  })\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      const userProfile = JSON.parse(userData)\n      setUser(userProfile)\n      setFormData({\n        companyName: userProfile.companyName || '',\n        companyNameKana: userProfile.companyNameKana || '',\n        representativeName: userProfile.representativeName || '',\n        representativeNameKana: userProfile.representativeNameKana || '',\n        businessType: userProfile.businessType || '',\n        industry: userProfile.industry || '',\n        capital: userProfile.capital || '',\n        establishedDate: userProfile.establishedDate || '',\n        employeeCount: userProfile.employeeCount || '',\n        website: userProfile.website || '',\n        description: userProfile.description || '',\n        businessLicense: userProfile.businessLicense || '',\n        transportLicense: userProfile.transportLicense || '',\n        insuranceNumber: userProfile.insuranceNumber || '',\n        taxId: userProfile.taxId || ''\n      })\n    }\n  }, [])\n\n  const handleEdit = () => {\n    setEditing(true)\n  }\n\n  const handleCancel = () => {\n    setEditing(false)\n    if (user) {\n      setFormData({\n        companyName: user.companyName || '',\n        companyNameKana: user.companyNameKana || '',\n        representativeName: user.representativeName || '',\n        representativeNameKana: user.representativeNameKana || '',\n        businessType: user.businessType || '',\n        industry: user.industry || '',\n        capital: user.capital || '',\n        establishedDate: user.establishedDate || '',\n        employeeCount: user.employeeCount || '',\n        website: user.website || '',\n        description: user.description || '',\n        businessLicense: user.businessLicense || '',\n        transportLicense: user.transportLicense || '',\n        insuranceNumber: user.insuranceNumber || '',\n        taxId: user.taxId || ''\n      })\n    }\n  }\n\n  const handleSave = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/user/company-details', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(formData)\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to update company details')\n      }\n\n      const updatedUser = { ...user, ...formData }\n      setUser(updatedUser)\n      localStorage.setItem('user', JSON.stringify(updatedUser))\n      setEditing(false)\n      alert('企業詳細情報を更新しました')\n    } catch (error) {\n      console.error('Error updating company details:', error)\n      alert('企業詳細情報の更新に失敗しました')\n    }\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const businessTypes = [\n    '株式会社', '有限会社', '合同会社', '合資会社', '合名会社', '個人事業主', 'その他'\n  ]\n\n  const industries = [\n    '物流・運送業', '製造業', '小売業', '卸売業', '建設業', 'IT・通信業', '金融業', '不動産業', 'その他'\n  ]\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">企業詳細情報</h1>\n            <p className=\"text-gray-600\">企業の詳細情報を管理できます</p>\n          </div>\n          <div className=\"flex space-x-2\">\n            {editing ? (\n              <>\n                <button\n                  onClick={handleSave}\n                  className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  <span>保存</span>\n                </button>\n                <button\n                  onClick={handleCancel}\n                  className=\"bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 flex items-center space-x-2\"\n                >\n                  <X className=\"h-4 w-4\" />\n                  <span>キャンセル</span>\n                </button>\n              </>\n            ) : (\n              <button\n                onClick={handleEdit}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n              >\n                <Edit className=\"h-4 w-4\" />\n                <span>編集</span>\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* 基本情報 */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <Building2 className=\"h-5 w-5 mr-2\" />\n              基本情報\n            </h2>\n          </div>\n          <div className=\"p-6 space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">会社名 *</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.companyName}\n                    onChange={(e) => handleInputChange('companyName', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"株式会社サンプル\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.companyName || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">会社名（カナ）</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.companyNameKana}\n                    onChange={(e) => handleInputChange('companyNameKana', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"カブシキガイシャサンプル\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.companyNameKana || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">代表者名 *</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.representativeName}\n                    onChange={(e) => handleInputChange('representativeName', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"山田太郎\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.representativeName || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">代表者名（カナ）</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.representativeNameKana}\n                    onChange={(e) => handleInputChange('representativeNameKana', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"ヤマダタロウ\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.representativeNameKana || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">法人格 *</label>\n                {editing ? (\n                  <select\n                    value={formData.businessType}\n                    onChange={(e) => handleInputChange('businessType', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">選択してください</option>\n                    {businessTypes.map(type => (\n                      <option key={type} value={type}>{type}</option>\n                    ))}\n                  </select>\n                ) : (\n                  <p className=\"text-gray-900\">{formData.businessType || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">業種 *</label>\n                {editing ? (\n                  <select\n                    value={formData.industry}\n                    onChange={(e) => handleInputChange('industry', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">選択してください</option>\n                    {industries.map(industry => (\n                      <option key={industry} value={industry}>{industry}</option>\n                    ))}\n                  </select>\n                ) : (\n                  <p className=\"text-gray-900\">{formData.industry || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">資本金</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.capital}\n                    onChange={(e) => handleInputChange('capital', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"1000万円\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.capital || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">設立日</label>\n                {editing ? (\n                  <input\n                    type=\"date\"\n                    value={formData.establishedDate}\n                    onChange={(e) => handleInputChange('establishedDate', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.establishedDate || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">従業員数</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.employeeCount}\n                    onChange={(e) => handleInputChange('employeeCount', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"50名\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.employeeCount || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">ウェブサイト</label>\n                {editing ? (\n                  <input\n                    type=\"url\"\n                    value={formData.website}\n                    onChange={(e) => handleInputChange('website', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"https://example.com\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.website || '未設定'}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">事業内容・企業概要</label>\n              {editing ? (\n                <textarea\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  rows={4}\n                  placeholder=\"企業の事業内容や概要を記載してください\"\n                />\n              ) : (\n                <p className=\"text-gray-900 whitespace-pre-wrap\">{formData.description || '未設定'}</p>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* 許可・認証情報 */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <FileText className=\"h-5 w-5 mr-2\" />\n              許可・認証情報\n            </h2>\n          </div>\n          <div className=\"p-6 space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">事業許可番号</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.businessLicense}\n                    onChange={(e) => handleInputChange('businessLicense', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"第1234567890号\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.businessLicense || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">一般貨物自動車運送事業許可</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.transportLicense}\n                    onChange={(e) => handleInputChange('transportLicense', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"第1234567890号\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.transportLicense || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">保険証券番号</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.insuranceNumber}\n                    onChange={(e) => handleInputChange('insuranceNumber', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"1234567890\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.insuranceNumber || '未設定'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">法人番号</label>\n                {editing ? (\n                  <input\n                    type=\"text\"\n                    value={formData.taxId}\n                    onChange={(e) => handleInputChange('taxId', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"1234567890123\"\n                  />\n                ) : (\n                  <p className=\"text-gray-900\">{formData.taxId || '未設定'}</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 注意事項 */}\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n          <div className=\"flex items-start\">\n            <AlertCircle className=\"h-5 w-5 text-yellow-600 mr-3 mt-0.5\" />\n            <div>\n              <h3 className=\"text-sm font-medium text-yellow-800\">重要事項</h3>\n              <p className=\"text-sm text-yellow-700 mt-1\">\n                許可・認証情報は取引の信頼性向上のために重要です。正確な情報を入力してください。\n                虚偽の情報を入力した場合、アカウントが停止される可能性があります。\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n\n","size_bytes":18388},"src/app/api/auth/me/route.ts":{"content":"import { NextRequest } from 'next/server'\nimport { getUserFromRequest } from '@/lib/auth'\nimport { successResponse, unauthorizedResponse } from '@/lib/api-response'\nimport prisma from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    const userData = await prisma.user.findUnique({\n      where: { id: user.userId },\n      select: {\n        id: true,\n        email: true,\n        userType: true,\n        companyName: true,\n        contactPerson: true,\n        phone: true,\n        postalCode: true,\n        address: true,\n        createdAt: true,\n      },\n    })\n    \n    if (!userData) {\n      return unauthorizedResponse()\n    }\n    \n    return successResponse(userData)\n  } catch (error) {\n    console.error('Get user error:', error)\n    return unauthorizedResponse()\n  }\n}\n\n","size_bytes":959},"src/app/api/stats/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    // 荷物数の取得（すべての荷物）\n    const shipmentCount = await prisma.shipment.count()\n    \n    // 空車数の取得（利用可能な車両数）\n    const vehicleCount = await prisma.vehicle.count({\n      where: {\n        status: 'AVAILABLE',\n        availableFrom: {\n          lte: new Date()\n        },\n        availableTo: {\n          gte: new Date()\n        }\n      }\n    })\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        shipmentCount,\n        vehicleCount\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching stats:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch stats' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":916},"src/app/admin/dashboard/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Logo from '@/components/Logo'\nimport {\n  Users,\n  Package,\n  TrendingUp,\n  DollarSign,\n  LogOut,\n  FileText,\n  Settings,\n  BarChart3,\n} from 'lucide-react'\n\nexport default function AdminDashboardPage() {\n  const router = useRouter()\n  const [stats, setStats] = useState({\n    totalUsers: 0,\n    totalShipments: 0,\n    totalOffers: 0,\n    revenue: 0,\n  })\n  const [recentActivity, setRecentActivity] = useState<any[]>([])\n\n  useEffect(() => {\n    const adminToken = localStorage.getItem('adminToken')\n    if (!adminToken) {\n      router.push('/admin')\n      return\n    }\n\n    loadDashboardData()\n  }, [])\n\n  const loadDashboardData = async () => {\n    try {\n      const token = localStorage.getItem('token') || ''\n      \n      // ユーザー数を取得（管理者として）\n      const response = await fetch('/api/admin/stats', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n\n      // ダミーデータ（実際はAPIから取得）\n      setStats({\n        totalUsers: 127,\n        totalShipments: 453,\n        totalOffers: 1089,\n        revenue: 8500000,\n      })\n\n      setRecentActivity([\n        { type: 'user', message: '新規ユーザー登録: 株式会社サンプル物流', time: '5分前' },\n        { type: 'shipment', message: '新規案件投稿: 東京→大阪 (2t車)', time: '12分前' },\n        { type: 'offer', message: 'オファー承認: 案件#1234', time: '18分前' },\n        { type: 'user', message: '新規ユーザー登録: ABC運輸株式会社', time: '25分前' },\n      ])\n    } catch (error) {\n      console.error('Error loading dashboard data:', error)\n    }\n  }\n\n  const handleLogout = () => {\n    localStorage.removeItem('adminToken')\n    router.push('/admin')\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-sky\">\n      {/* ヘッダー */}\n      <header className=\"bg-white/80 backdrop-blur-md shadow-sm sticky top-0 z-50\">\n        <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3 sm:py-4\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center space-x-3 sm:space-x-4\">\n              <Logo width={180} height={50} className=\"w-[120px] h-[35px] sm:w-[180px] sm:h-[50px]\" />\n              <span className=\"text-xs sm:text-sm font-semibold text-red-600 bg-red-50 px-2 sm:px-3 py-1 rounded-full\">\n                管理者モード\n              </span>\n            </div>\n            <button\n              onClick={handleLogout}\n              className=\"flex items-center space-x-1 sm:space-x-2 text-gray-700 hover:text-red-600 transition\"\n            >\n              <LogOut className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              <span className=\"text-xs sm:text-sm\">ログアウト</span>\n            </button>\n          </div>\n        </nav>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">管理者ダッシュボード</h1>\n          <p className=\"text-gray-600 mt-2 text-sm sm:text-base\">システム全体の状況を確認できます</p>\n        </div>\n\n        {/* 統計カード */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.1s'}}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-xs sm:text-sm mb-1\">総ユーザー数</p>\n                <p className=\"text-2xl sm:text-3xl font-bold text-gray-900\">{stats.totalUsers}</p>\n                <p className=\"text-xs sm:text-sm text-green-600 mt-1\">+12% 前月比</p>\n              </div>\n              <div className=\"bg-gradient-to-br from-blue-50 to-cyan-50 p-3 sm:p-4 rounded-2xl floating\">\n                <Users className=\"h-6 w-6 sm:h-8 sm:w-8 text-blue-600\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.2s'}}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-xs sm:text-sm mb-1\">総案件数</p>\n                <p className=\"text-2xl sm:text-3xl font-bold text-gray-900\">{stats.totalShipments}</p>\n                <p className=\"text-xs sm:text-sm text-green-600 mt-1\">+8% 前月比</p>\n              </div>\n              <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 p-3 sm:p-4 rounded-2xl floating\" style={{animationDelay: '1s'}}>\n                <Package className=\"h-6 w-6 sm:h-8 sm:w-8 text-purple-600\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.3s'}}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-xs sm:text-sm mb-1\">総オファー数</p>\n                <p className=\"text-2xl sm:text-3xl font-bold text-gray-900\">{stats.totalOffers}</p>\n                <p className=\"text-xs sm:text-sm text-green-600 mt-1\">+15% 前月比</p>\n              </div>\n              <div className=\"bg-gradient-to-br from-orange-50 to-yellow-50 p-3 sm:p-4 rounded-2xl floating\" style={{animationDelay: '2s'}}>\n                <FileText className=\"h-6 w-6 sm:h-8 sm:w-8 text-orange-600\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.4s'}}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-xs sm:text-sm mb-1\">総取引額</p>\n                <p className=\"text-2xl sm:text-3xl font-bold text-gray-900\">\n                  ¥{(stats.revenue / 1000000).toFixed(1)}M\n                </p>\n                <p className=\"text-xs sm:text-sm text-green-600 mt-1\">+20% 前月比</p>\n              </div>\n              <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 p-3 sm:p-4 rounded-2xl floating\" style={{animationDelay: '0.5s'}}>\n                <DollarSign className=\"h-6 w-6 sm:h-8 sm:w-8 text-green-600\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* メインコンテンツ */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* クイックアクション */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"card\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">クイックアクション</h2>\n              <div className=\"space-y-3\">\n                <button className=\"w-full bg-gradient-to-r from-blue-600 to-cyan-500 text-white px-4 py-3 rounded-xl font-semibold hover:from-blue-700 hover:to-cyan-600 transition flex items-center justify-center space-x-2\">\n                  <Users className=\"h-5 w-5\" />\n                  <span>ユーザー管理</span>\n                </button>\n                <button className=\"w-full bg-white border-2 border-gray-200 text-gray-700 px-4 py-3 rounded-xl font-semibold hover:border-blue-300 hover:bg-blue-50 transition flex items-center justify-center space-x-2\">\n                  <Package className=\"h-5 w-5\" />\n                  <span>案件管理</span>\n                </button>\n                <button className=\"w-full bg-white border-2 border-gray-200 text-gray-700 px-4 py-3 rounded-xl font-semibold hover:border-blue-300 hover:bg-blue-50 transition flex items-center justify-center space-x-2\">\n                  <BarChart3 className=\"h-5 w-5\" />\n                  <span>レポート</span>\n                </button>\n                <button className=\"w-full bg-white border-2 border-gray-200 text-gray-700 px-4 py-3 rounded-xl font-semibold hover:border-blue-300 hover:bg-blue-50 transition flex items-center justify-center space-x-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  <span>システム設定</span>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* 最近のアクティビティ */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"card\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">最近のアクティビティ</h2>\n              <div className=\"space-y-4\">\n                {recentActivity.map((activity, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-xl hover:bg-gray-100 transition\"\n                  >\n                    <div\n                      className={`p-2 rounded-lg ${\n                        activity.type === 'user'\n                          ? 'bg-blue-100'\n                          : activity.type === 'shipment'\n                          ? 'bg-purple-100'\n                          : 'bg-green-100'\n                      }`}\n                    >\n                      {activity.type === 'user' && (\n                        <Users className=\"h-5 w-5 text-blue-600\" />\n                      )}\n                      {activity.type === 'shipment' && (\n                        <Package className=\"h-5 w-5 text-purple-600\" />\n                      )}\n                      {activity.type === 'offer' && (\n                        <FileText className=\"h-5 w-5 text-green-600\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-gray-900 font-medium\">{activity.message}</p>\n                      <p className=\"text-sm text-gray-500 mt-1\">{activity.time}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* グラフエリア（将来的に実装） */}\n        <div className=\"mt-6 card\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">月間統計</h2>\n          <div className=\"h-64 flex items-center justify-center text-gray-400\">\n            <div className=\"text-center\">\n              <BarChart3 className=\"h-16 w-16 mx-auto mb-2 opacity-50\" />\n              <p>グラフ表示機能は準備中です</p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n\n","size_bytes":10445},"src/app/dashboard/notifications/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { Bell, CheckCircle, AlertCircle, Info, X, Filter, XCircle } from 'lucide-react'\n\ninterface Notification {\n  id: string\n  title: string\n  message: string\n  type: string\n  targetType: string\n  targetUserId?: string\n  isRead: boolean\n  sentByEmail: boolean\n  createdAt: string\n}\n\nexport default function NotificationsPage() {\n  const [notifications, setNotifications] = useState<Notification[]>([])\n  const [filter, setFilter] = useState<'all' | 'unread' | 'read'>('all')\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchNotifications()\n  }, [])\n\n  const fetchNotifications = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/notifications', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setNotifications(data.data)\n      }\n    } catch (error) {\n      console.error('Fetch error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'SUCCESS': return <CheckCircle className=\"h-5 w-5 text-green-500\" />\n      case 'WARNING': return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\n      case 'ERROR': return <XCircle className=\"h-5 w-5 text-red-500\" />\n      default: return <Info className=\"h-5 w-5 text-blue-500\" />\n    }\n  }\n\n  const getNotificationBgColor = (type: string) => {\n    switch (type) {\n      case 'SUCCESS': return 'bg-green-50 border-green-200'\n      case 'WARNING': return 'bg-yellow-50 border-yellow-200'\n      case 'ERROR': return 'bg-red-50 border-red-200'\n      default: return 'bg-blue-50 border-blue-200'\n    }\n  }\n\n  const markAsRead = async (id: string) => {\n    try {\n      const token = localStorage.getItem('token')\n      await fetch(`/api/notifications/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      })\n      \n      setNotifications(prev => \n        prev.map(notification => \n          notification.id === id \n            ? { ...notification, isRead: true }\n            : notification\n        )\n      )\n    } catch (error) {\n      console.error('Mark as read error:', error)\n    }\n  }\n\n  const markAllAsRead = async () => {\n    const unreadNotifications = notifications.filter(n => !n.isRead)\n    \n    for (const notification of unreadNotifications) {\n      await markAsRead(notification.id)\n    }\n  }\n\n  const deleteNotification = async (id: string) => {\n    try {\n      const token = localStorage.getItem('token')\n      await fetch(`/api/notifications/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      })\n      \n      setNotifications(prev => prev.filter(notification => notification.id !== id))\n    } catch (error) {\n      console.error('Delete error:', error)\n    }\n  }\n\n  const filteredNotifications = notifications.filter(notification => {\n    if (filter === 'unread') return !notification.isRead\n    if (filter === 'read') return notification.isRead\n    return true\n  })\n\n  const unreadCount = notifications.filter(n => !n.isRead).length\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">通知</h1>\n            <p className=\"text-gray-600\">システムからのお知らせを確認できます</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"h-4 w-4 text-gray-500\" />\n              <select\n                value={filter}\n                onChange={(e) => setFilter(e.target.value as 'all' | 'unread' | 'read')}\n                className=\"px-3 py-1 border border-gray-300 rounded-lg text-sm\"\n              >\n                <option value=\"all\">すべて</option>\n                <option value=\"unread\">未読 ({unreadCount})</option>\n                <option value=\"read\">既読</option>\n              </select>\n            </div>\n            {unreadCount > 0 && (\n              <button\n                onClick={markAllAsRead}\n                className=\"text-blue-600 hover:text-blue-800 text-sm\"\n              >\n                すべて既読にする\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            通知一覧 ({filteredNotifications.length}件)\n          </h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : filteredNotifications.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <Bell className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>通知はありません</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {filteredNotifications.map(notification => (\n              <div\n                key={notification.id}\n                className={`p-6 hover:bg-gray-50 transition-colors ${\n                  !notification.isRead ? 'bg-blue-50' : ''\n                }`}\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"flex-shrink-0\">\n                    {getNotificationIcon(notification.type)}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className={`text-sm font-medium ${\n                        !notification.isRead ? 'text-gray-900' : 'text-gray-700'\n                      }`}>\n                        {notification.title}\n                      </h3>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-xs text-gray-500\">\n                          {new Date(notification.createdAt).toLocaleString('ja-JP')}\n                        </span>\n                        {!notification.isRead && (\n                          <span className=\"inline-block w-2 h-2 bg-blue-500 rounded-full\"></span>\n                        )}\n                        <button\n                          onClick={() => deleteNotification(notification.id)}\n                          className=\"text-gray-400 hover:text-red-500\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    </div>\n                    <p className=\"mt-1 text-sm text-gray-600 whitespace-pre-wrap\">\n                      {notification.message}\n                    </p>\n                    {!notification.isRead && (\n                      <button\n                        onClick={() => markAsRead(notification.id)}\n                        className=\"mt-2 text-xs text-blue-600 hover:text-blue-800\"\n                      >\n                        既読にする\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":7571},"src/app/dashboard/transport-log/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  FileText, \n  Search, \n  Filter, \n  Plus, \n  Download, \n  Upload,\n  Calendar,\n  MapPin,\n  Truck,\n  Package,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Edit,\n  Trash2,\n  Eye,\n  Building2,\n  User,\n  Phone,\n  Mail\n} from 'lucide-react'\n\ninterface TransportLog {\n  id: string\n  shipmentId: string\n  cargoName: string\n  carrierCompany: string\n  carrierContact: string\n  carrierPhone: string\n  carrierEmail: string\n  driverName: string\n  driverLicense: string\n  vehicleNumber: string\n  vehicleType: string\n  pickupDate: string\n  deliveryDate: string\n  pickupLocation: string\n  deliveryLocation: string\n  status: 'scheduled' | 'in_transit' | 'delivered' | 'cancelled'\n  actualPickupTime?: string\n  actualDeliveryTime?: string\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport default function TransportLogPage() {\n  const [logs, setLogs] = useState<TransportLog[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState<'all' | 'scheduled' | 'in_transit' | 'delivered' | 'cancelled'>('all')\n  const [dateFilter, setDateFilter] = useState('')\n\n  useEffect(() => {\n    loadTransportLogs()\n  }, [])\n\n  const loadTransportLogs = async () => {\n    try {\n      // サンプルデータ\n      const sampleLogs: TransportLog[] = [\n        {\n          id: '1',\n          shipmentId: 'SH-001',\n          cargoName: '電子部品（冷蔵）',\n          carrierCompany: '株式会社トランスロジック',\n          carrierContact: '田中太郎',\n          carrierPhone: '03-1234-5678',\n          carrierEmail: 'tanaka@translogic.co.jp',\n          driverName: '佐藤一郎',\n          driverLicense: '1234567890',\n          vehicleNumber: '品川 500 あ 1234',\n          vehicleType: '冷蔵車',\n          pickupDate: '2024-01-15',\n          deliveryDate: '2024-01-16',\n          pickupLocation: '東京都港区六本木1-1-1',\n          deliveryLocation: '大阪府大阪市北区梅田2-2-2',\n          status: 'delivered',\n          actualPickupTime: '2024-01-15T09:00:00',\n          actualDeliveryTime: '2024-01-16T14:30:00',\n          notes: '予定通り配送完了。荷物に問題なし。',\n          createdAt: '2024-01-10T10:00:00',\n          updatedAt: '2024-01-16T14:30:00'\n        },\n        {\n          id: '2',\n          shipmentId: 'SH-002',\n          cargoName: '機械部品',\n          carrierCompany: '山田運送株式会社',\n          carrierContact: '山田花子',\n          carrierPhone: '06-9876-5432',\n          carrierEmail: 'yamada@yamada-transport.co.jp',\n          driverName: '鈴木二郎',\n          driverLicense: '0987654321',\n          vehicleNumber: '大阪 500 い 5678',\n          vehicleType: '大型トラック',\n          pickupDate: '2024-01-20',\n          deliveryDate: '2024-01-21',\n          pickupLocation: '愛知県名古屋市中区栄3-3-3',\n          deliveryLocation: '福岡県福岡市博多区博多駅前4-4-4',\n          status: 'in_transit',\n          actualPickupTime: '2024-01-20T08:30:00',\n          notes: '現在輸送中。予定通り進行。',\n          createdAt: '2024-01-18T14:00:00',\n          updatedAt: '2024-01-20T08:30:00'\n        },\n        {\n          id: '3',\n          shipmentId: 'SH-003',\n          cargoName: '衣料品',\n          carrierCompany: 'スピード物流株式会社',\n          carrierContact: '鈴木一郎',\n          carrierPhone: '092-3333-4444',\n          carrierEmail: 'suzuki@speedlogistics.co.jp',\n          driverName: '高橋三郎',\n          driverLicense: '1122334455',\n          vehicleNumber: '福岡 500 う 9012',\n          vehicleType: '中型トラック',\n          pickupDate: '2024-01-25',\n          deliveryDate: '2024-01-26',\n          pickupLocation: '東京都渋谷区渋谷1-1-1',\n          deliveryLocation: '神奈川県横浜市西区みなとみらい2-2-2',\n          status: 'scheduled',\n          notes: '配送準備中。',\n          createdAt: '2024-01-22T16:00:00',\n          updatedAt: '2024-01-22T16:00:00'\n        }\n      ]\n      \n      setLogs(sampleLogs)\n    } catch (error) {\n      console.error('Error loading transport logs:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case 'scheduled':\n        return { label: '予定', color: 'bg-blue-100 text-blue-800', icon: Clock }\n      case 'in_transit':\n        return { label: '輸送中', color: 'bg-yellow-100 text-yellow-800', icon: Truck }\n      case 'delivered':\n        return { label: '配送完了', color: 'bg-green-100 text-green-800', icon: CheckCircle }\n      case 'cancelled':\n        return { label: 'キャンセル', color: 'bg-red-100 text-red-800', icon: AlertCircle }\n      default:\n        return { label: '不明', color: 'bg-gray-100 text-gray-800', icon: Clock }\n    }\n  }\n\n  const filteredLogs = logs.filter(log => {\n    const matchesSearch = searchTerm === '' || \n      log.cargoName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.carrierCompany.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.driverName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.vehicleNumber.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesStatus = statusFilter === 'all' || log.status === statusFilter\n    \n    const matchesDate = dateFilter === '' || \n      log.pickupDate === dateFilter || \n      log.deliveryDate === dateFilter\n    \n    return matchesSearch && matchesStatus && matchesDate\n  })\n\n  const handleDeleteLog = (logId: string) => {\n    if (!confirm('この記録を削除しますか？')) return\n    setLogs(prev => prev.filter(l => l.id !== logId))\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">実運送体制管理簿</h1>\n            <p className=\"text-gray-600\">運送業者の実運送体制を管理・記録できます</p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <button\n              className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center space-x-2\"\n            >\n              <Upload className=\"h-4 w-4\" />\n              <span>インポート</span>\n            </button>\n            <button\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              <span>エクスポート</span>\n            </button>\n            <button\n              className=\"bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 flex items-center space-x-2\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              <span>新規登録</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* 検索フィルター */}\n      <div className=\"bg-white rounded-lg shadow-sm border mb-6\">\n        <div className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"荷物名、運送業者、ドライバー名で検索...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div>\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"h-4 w-4 text-gray-500\" />\n                <select\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value as any)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">すべてのステータス</option>\n                  <option value=\"scheduled\">予定</option>\n                  <option value=\"in_transit\">輸送中</option>\n                  <option value=\"delivered\">配送完了</option>\n                  <option value=\"cancelled\">キャンセル</option>\n                </select>\n              </div>\n            </div>\n            <div>\n              <input\n                type=\"date\"\n                value={dateFilter}\n                onChange={(e) => setDateFilter(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"日付でフィルター\"\n              />\n            </div>\n            <div>\n              <button\n                onClick={() => {\n                  setSearchTerm('')\n                  setStatusFilter('all')\n                  setDateFilter('')\n                }}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 text-gray-700\"\n              >\n                フィルターをクリア\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 運送記録一覧 */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            運送記録一覧 ({filteredLogs.length}件)\n          </h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : filteredLogs.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>運送記録はありません</p>\n            <button\n              className=\"mt-4 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n            >\n              最初の記録を登録する\n            </button>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {filteredLogs.map((log) => {\n              const statusInfo = getStatusInfo(log.status)\n              const StatusIcon = statusInfo.icon\n              \n              return (\n                <div key={log.id} className=\"p-6 hover:bg-gray-50\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-lg font-medium text-gray-900\">\n                          {log.cargoName}\n                        </h3>\n                        <span className=\"text-sm text-gray-500\">\n                          荷物ID: {log.shipmentId}\n                        </span>\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full flex items-center space-x-1 ${statusInfo.color}`}>\n                          <StatusIcon className=\"h-3 w-3\" />\n                          <span>{statusInfo.label}</span>\n                        </span>\n                      </div>\n                      \n                      {/* 運送業者情報 */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <div className=\"bg-gray-50 p-3 rounded-lg\">\n                          <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center\">\n                            <Building2 className=\"h-4 w-4 mr-2\" />\n                            運送業者情報\n                          </h4>\n                          <div className=\"space-y-1 text-sm text-gray-700\">\n                            <div className=\"flex items-center\">\n                              <Building2 className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{log.carrierCompany}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <User className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{log.carrierContact}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Phone className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{log.carrierPhone}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Mail className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{log.carrierEmail}</span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"bg-gray-50 p-3 rounded-lg\">\n                          <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center\">\n                            <Truck className=\"h-4 w-4 mr-2\" />\n                            車両・ドライバー情報\n                          </h4>\n                          <div className=\"space-y-1 text-sm text-gray-700\">\n                            <div className=\"flex items-center\">\n                              <User className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>ドライバー: {log.driverName}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Truck className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>車両番号: {log.vehicleNumber}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Package className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>車種: {log.vehicleType}</span>\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              免許番号: {log.driverLicense}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* 配送情報 */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <div>\n                          <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center\">\n                            <MapPin className=\"h-4 w-4 mr-2\" />\n                            集荷情報\n                          </h4>\n                          <div className=\"space-y-1 text-sm text-gray-700\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>予定日: {new Date(log.pickupDate).toLocaleDateString('ja-JP')}</span>\n                            </div>\n                            {log.actualPickupTime && (\n                              <div className=\"flex items-center\">\n                                <Clock className=\"h-4 w-4 mr-2 text-gray-500\" />\n                                <span>実際: {new Date(log.actualPickupTime).toLocaleString('ja-JP')}</span>\n                              </div>\n                            )}\n                            <div className=\"flex items-center\">\n                              <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{log.pickupLocation}</span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center\">\n                            <MapPin className=\"h-4 w-4 mr-2\" />\n                            配送情報\n                          </h4>\n                          <div className=\"space-y-1 text-sm text-gray-700\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>予定日: {new Date(log.deliveryDate).toLocaleDateString('ja-JP')}</span>\n                            </div>\n                            {log.actualDeliveryTime && (\n                              <div className=\"flex items-center\">\n                                <Clock className=\"h-4 w-4 mr-2 text-gray-500\" />\n                                <span>実際: {new Date(log.actualDeliveryTime).toLocaleString('ja-JP')}</span>\n                              </div>\n                            )}\n                            <div className=\"flex items-center\">\n                              <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                              <span>{log.deliveryLocation}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* メモ */}\n                      {log.notes && (\n                        <div className=\"mb-3\">\n                          <p className=\"text-sm text-gray-600 bg-yellow-50 p-2 rounded border-l-4 border-yellow-400\">\n                            <strong>メモ:</strong> {log.notes}\n                          </p>\n                        </div>\n                      )}\n\n                      <div className=\"text-xs text-gray-400\">\n                        登録日: {new Date(log.createdAt).toLocaleString('ja-JP')} | \n                        更新日: {new Date(log.updatedAt).toLocaleString('ja-JP')}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 ml-4\">\n                      <button\n                        className=\"p-2 text-gray-400 hover:text-blue-600\"\n                        title=\"詳細を見る\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n                      <button\n                        className=\"p-2 text-gray-400 hover:text-green-600\"\n                        title=\"編集\"\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </button>\n                      <button\n                        onClick={() => handleDeleteLog(log.id)}\n                        className=\"p-2 text-gray-400 hover:text-red-600\"\n                        title=\"削除\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":19171},"src/app/dashboard/recent-shipments/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { History, Package, MapPin, Calendar, Weight, Truck, DollarSign, Building2, User, Phone } from 'lucide-react'\n\nexport default function RecentShipmentsPage() {\n  const [recentShipments, setRecentShipments] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadRecentShipments()\n  }, [])\n\n  const loadRecentShipments = async () => {\n    setLoading(true)\n    try {\n      const recentIds = JSON.parse(localStorage.getItem('recentShipments') || '[]')\n      if (recentIds.length === 0) {\n        setRecentShipments([])\n        return\n      }\n\n      // 最近見た荷物の詳細を取得\n      const response = await fetch('/api/shipments/details', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ ids: recentIds })\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch recent shipment details')\n      }\n\n      const result = await response.json()\n      setRecentShipments(result.data)\n    } catch (error) {\n      console.error('Error loading recent shipments:', error)\n      // 無効な最近見たIDをクリア\n      localStorage.removeItem('recentShipments')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'OPEN': return 'bg-blue-100 text-blue-800'\n      case 'MATCHED': return 'bg-green-100 text-green-800'\n      case 'IN_TRANSIT': return 'bg-yellow-100 text-yellow-800'\n      case 'DELIVERED': return 'bg-gray-100 text-gray-800'\n      case 'CANCELLED': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">最近見た荷物</h1>\n        <p className=\"text-gray-600\">最近閲覧した荷物の一覧です</p>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">最近見た荷物一覧</h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : recentShipments.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <History className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>最近見た荷物はありません</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {recentShipments.map(shipment => (\n              <div key={shipment.id} className=\"p-6 hover:bg-gray-50\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h3 className=\"text-lg font-bold text-blue-700\">{shipment.cargoName}</h3>\n                  <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(shipment.status)}`}>\n                    {shipment.status === 'OPEN' && '募集中'}\n                    {shipment.status === 'MATCHED' && 'マッチング済み'}\n                    {shipment.status === 'IN_TRANSIT' && '輸送中'}\n                    {shipment.status === 'DELIVERED' && '配送完了'}\n                    {shipment.status === 'CANCELLED' && 'キャンセル'}\n                  </span>\n                </div>\n                <p className=\"text-gray-600 text-sm mb-3\">{shipment.cargoDescription}</p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-700 mb-4\">\n                  <div className=\"flex items-center\"><MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />発地: {shipment.pickupPrefecture} {shipment.pickupCity}</div>\n                  <div className=\"flex items-center\"><MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />着地: {shipment.deliveryPrefecture} {shipment.deliveryCity}</div>\n                  <div className=\"flex items-center\"><Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />発日時: {new Date(shipment.pickupDate).toLocaleDateString()} {shipment.pickupTimeFrom}</div>\n                  <div className=\"flex items-center\"><Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />着日時: {new Date(shipment.deliveryDate).toLocaleDateString()} {shipment.deliveryTimeFrom}</div>\n                  <div className=\"flex items-center\"><Weight className=\"h-4 w-4 mr-2 text-gray-500\" />重量: {shipment.cargoWeight} kg</div>\n                  <div className=\"flex items-center\"><Truck className=\"h-4 w-4 mr-2 text-gray-500\" />車種: {shipment.requiredVehicleType}</div>\n                  <div className=\"flex items-center\"><DollarSign className=\"h-4 w-4 mr-2 text-gray-500\" />予算: {shipment.budget.toLocaleString()} 円</div>\n                </div>\n\n                <div className=\"border-t border-gray-100 pt-3\">\n                  <h4 className=\"font-semibold text-gray-800 mb-2\">荷主情報</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-700\">\n                    <div className=\"flex items-center\"><Building2 className=\"h-4 w-4 mr-2 text-gray-500\" />会社名: {shipment.shipper.companyName}</div>\n                    <div className=\"flex items-center\"><User className=\"h-4 w-4 mr-2 text-gray-500\" />担当者: {shipment.shipper.contactPerson}</div>\n                    <div className=\"flex items-center\"><Phone className=\"h-4 w-4 mr-2 text-gray-500\" />電話番号: {shipment.shipper.phone}</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":5851},"src/app/dashboard/vehicle-search/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Truck, \n  Search, \n  MapPin, \n  Calendar, \n  Weight, \n  DollarSign, \n  Plus, \n  Filter, \n  ArrowLeft, \n  ArrowRight,\n  Star,\n  Shield,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Brain,\n  TrendingUp,\n  Award,\n  Zap,\n  Target,\n  BarChart3\n} from 'lucide-react'\n\ninterface Vehicle {\n  id: string\n  vehicleType: string\n  vehicleNumber: string\n  maxWeight: number\n  availablePrefectures: string\n  availableFrom: string\n  availableTo: string\n  basePrice?: number\n  driverName: string\n  driverPhone: string\n  status: string\n  carrier: {\n    id: string\n    companyName: string\n    contactPerson: string\n    phone: string\n    email: string\n    rating: number\n    totalShipments: number\n    completedShipments: number\n    creditScore: number\n    specialties: string[]\n    responseTime: number\n    reliabilityScore: number\n  }\n  aiMatchScore?: number\n  aiRecommendationReason?: string\n  estimatedDeliveryTime?: number\n  costEfficiency?: number\n}\n\ninterface AISearchResult {\n  vehicles: Vehicle[]\n  aiInsights: {\n    totalMatches: number\n    averageMatchScore: number\n    topSpecialties: string[]\n    recommendedCarriers: string[]\n    marketTrends: string\n  }\n}\n\nexport default function VehicleSearchPage() {\n  const router = useRouter()\n  const [vehicles, setVehicles] = useState<Vehicle[]>([])\n  const [aiResults, setAiResults] = useState<AISearchResult | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [aiSearching, setAiSearching] = useState(false)\n  const [searchForm, setSearchForm] = useState({\n    vehicleType: '',\n    prefecture: '',\n    status: 'AVAILABLE',\n    cargoWeight: '',\n    cargoType: '',\n    urgency: 'normal',\n    budget: '',\n    specialRequirements: ''\n  })\n  const [showAIResults, setShowAIResults] = useState(false)\n\n  const prefectures = [\n    '北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県',\n    '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',\n    '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県',\n    '静岡県', '愛知県', '三重県', '滋賀県', '京都府', '大阪府', '兵庫県',\n    '奈良県', '和歌山県', '鳥取県', '島根県', '岡山県', '広島県', '山口県',\n    '徳島県', '香川県', '愛媛県', '高知県', '福岡県', '佐賀県', '長崎県',\n    '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'\n  ]\n\n  const vehicleTypes = [\n    '軽トラック', '小型トラック', '中型トラック', '大型トラック', 'トレーラー', '冷凍車', '冷蔵車', 'その他'\n  ]\n\n  const cargoTypes = [\n    '一般貨物', '冷蔵・冷凍', '危険物', '生鮮食品', '精密機器', '美術品', '医薬品', 'その他'\n  ]\n\n  const urgencyLevels = [\n    { value: 'urgent', label: '緊急（24時間以内）', color: 'text-red-600' },\n    { value: 'high', label: '高（3日以内）', color: 'text-orange-600' },\n    { value: 'normal', label: '通常（1週間以内）', color: 'text-blue-600' },\n    { value: 'low', label: '低（2週間以内）', color: 'text-green-600' }\n  ]\n\n  const statuses = [\n    { value: 'AVAILABLE', label: '利用可能' },\n    { value: 'IN_USE', label: '使用中' },\n    { value: 'MAINTENANCE', label: 'メンテナンス中' },\n    { value: 'UNAVAILABLE', label: '利用不可' }\n  ]\n\n  useEffect(() => {\n    loadVehicles()\n  }, [])\n\n  const loadVehicles = async () => {\n    setLoading(true)\n    try {\n      const params = new URLSearchParams({\n        page: '1',\n        limit: '20',\n        ...searchForm\n      })\n\n      const response = await fetch(`/api/vehicles?${params}`)\n      if (!response.ok) throw new Error('Failed to load vehicles')\n      \n      const data = await response.json()\n      setVehicles(data.data?.vehicles || [])\n    } catch (error) {\n      console.error('Error loading vehicles:', error)\n      setVehicles([])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const performAISearch = async () => {\n    setAiSearching(true)\n    try {\n      // AI検索のシミュレーション\n      const mockAISearchResult: AISearchResult = {\n        vehicles: [\n          {\n            id: '1',\n            vehicleType: '大型トラック',\n            vehicleNumber: '品川 500 あ 1234',\n            maxWeight: 10000,\n            availablePrefectures: '[\"東京都\", \"神奈川県\", \"埼玉県\", \"千葉県\"]',\n            availableFrom: '2024-01-20',\n            availableTo: '2024-01-30',\n            basePrice: 150,\n            driverName: '田中太郎',\n            driverPhone: '090-1234-5678',\n            status: 'AVAILABLE',\n            carrier: {\n              id: 'carrier-1',\n              companyName: '株式会社トランスロジック',\n              contactPerson: '山田花子',\n              phone: '03-1234-5678',\n              email: 'yamada@translogic.co.jp',\n              rating: 4.8,\n              totalShipments: 156,\n              completedShipments: 148,\n              creditScore: 95,\n              specialties: ['大型貨物', '関東圏', '急便対応'],\n              responseTime: 15,\n              reliabilityScore: 98\n            },\n            aiMatchScore: 95,\n            aiRecommendationReason: '荷物の重量と緊急度に最適な車両。過去の実績と高い信用スコアで信頼性が高い。',\n            estimatedDeliveryTime: 6,\n            costEfficiency: 92\n          },\n          {\n            id: '2',\n            vehicleType: '冷蔵車',\n            vehicleNumber: '大阪 500 い 5678',\n            maxWeight: 5000,\n            availablePrefectures: '[\"大阪府\", \"京都府\", \"兵庫県\", \"奈良県\"]',\n            availableFrom: '2024-01-20',\n            availableTo: '2024-01-28',\n            basePrice: 200,\n            driverName: '佐藤次郎',\n            driverPhone: '090-9876-5432',\n            status: 'AVAILABLE',\n            carrier: {\n              id: 'carrier-2',\n              companyName: '関西物流株式会社',\n              contactPerson: '鈴木一郎',\n              phone: '06-9876-5432',\n              email: 'suzuki@kansai-logistics.co.jp',\n              rating: 4.6,\n              totalShipments: 89,\n              completedShipments: 85,\n              creditScore: 88,\n              specialties: ['冷蔵輸送', '関西圏', '生鮮食品'],\n              responseTime: 25,\n              reliabilityScore: 94\n            },\n            aiMatchScore: 87,\n            aiRecommendationReason: '冷蔵輸送に特化した車両で、生鮮食品の輸送実績が豊富。',\n            estimatedDeliveryTime: 8,\n            costEfficiency: 85\n          },\n          {\n            id: '3',\n            vehicleType: '中型トラック',\n            vehicleNumber: '名古屋 500 う 9012',\n            maxWeight: 3000,\n            availablePrefectures: '[\"愛知県\", \"静岡県\", \"岐阜県\", \"三重県\"]',\n            availableFrom: '2024-01-20',\n            availableTo: '2024-01-25',\n            basePrice: 120,\n            driverName: '高橋三郎',\n            driverPhone: '090-5555-1234',\n            status: 'AVAILABLE',\n            carrier: {\n              id: 'carrier-3',\n              companyName: '中部運送株式会社',\n              contactPerson: '田村四郎',\n              phone: '052-5555-1234',\n              email: 'tamura@chubu-transport.co.jp',\n              rating: 4.4,\n              totalShipments: 67,\n              completedShipments: 63,\n              creditScore: 82,\n              specialties: ['一般貨物', '中部圏', 'コスト重視'],\n              responseTime: 30,\n              reliabilityScore: 89\n            },\n            aiMatchScore: 78,\n            aiRecommendationReason: 'コストパフォーマンスが良く、中小規模の荷物に適している。',\n            estimatedDeliveryTime: 12,\n            costEfficiency: 95\n          }\n        ],\n        aiInsights: {\n          totalMatches: 3,\n          averageMatchScore: 87,\n          topSpecialties: ['大型貨物', '冷蔵輸送', '関東圏'],\n          recommendedCarriers: ['株式会社トランスロジック', '関西物流株式会社'],\n          marketTrends: '現在、大型貨物の需要が高く、冷蔵輸送の需要も増加傾向にあります。'\n        }\n      }\n      \n      // 実際のAPI呼び出しをシミュレート\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      setAiResults(mockAISearchResult)\n      setShowAIResults(true)\n    } catch (error) {\n      console.error('Error performing AI search:', error)\n    } finally {\n      setAiSearching(false)\n    }\n  }\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault()\n    loadVehicles()\n  }\n\n  const handleAISearch = (e: React.FormEvent) => {\n    e.preventDefault()\n    performAISearch()\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setSearchForm(prev => ({ ...prev, [field]: value }))\n  }\n\n  const getCreditScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-600 bg-green-100'\n    if (score >= 80) return 'text-blue-600 bg-blue-100'\n    if (score >= 70) return 'text-yellow-600 bg-yellow-100'\n    return 'text-red-600 bg-red-100'\n  }\n\n  const getMatchScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-600'\n    if (score >= 80) return 'text-blue-600'\n    if (score >= 70) return 'text-yellow-600'\n    return 'text-red-600'\n  }\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'\n        }`}\n      />\n    ))\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'AVAILABLE': return 'bg-green-100 text-green-800'\n      case 'IN_USE': return 'bg-blue-100 text-blue-800'\n      case 'MAINTENANCE': return 'bg-yellow-100 text-yellow-800'\n      case 'UNAVAILABLE': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">空車検索</h1>\n            <p className=\"text-gray-600\">条件を指定して空車を検索できます</p>\n          </div>\n          <button\n            onClick={() => router.push('/vehicles/register')}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            <span>空車登録</span>\n          </button>\n        </div>\n      </div>\n\n      {/* 通常検索フォーム */}\n      <div className=\"bg-white rounded-lg shadow-sm border p-6 mb-6\">\n        <form onSubmit={handleSearch} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">車両タイプ</label>\n              <select\n                value={searchForm.vehicleType}\n                onChange={(e) => handleInputChange('vehicleType', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">すべて</option>\n                {vehicleTypes.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">都道府県</label>\n              <select\n                value={searchForm.prefecture}\n                onChange={(e) => handleInputChange('prefecture', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"\">すべて</option>\n                {prefectures.map(pref => (\n                  <option key={pref} value={pref}>{pref}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">ステータス</label>\n              <select\n                value={searchForm.status}\n                onChange={(e) => handleInputChange('status', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                {statuses.map(status => (\n                  <option key={status.value} value={status.value}>{status.label}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2\"\n            >\n              <Search className=\"h-4 w-4\" />\n              <span>検索</span>\n            </button>\n          </div>\n        </form>\n      </div>\n\n      {/* AI検索フォーム */}\n      <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg shadow-sm border border-purple-200 p-6 mb-8\">\n        <div className=\"flex items-center mb-4\">\n          <Brain className=\"h-6 w-6 text-purple-600 mr-2\" />\n          <h3 className=\"text-lg font-semibold text-gray-900\">AI おすすめ検索</h3>\n          <span className=\"ml-2 px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full\">NEW</span>\n        </div>\n        <p className=\"text-sm text-gray-600 mb-6\">\n          荷物の詳細を入力すると、AIが最適な運送会社をマッチング率と共にご提案します\n        </p>\n        \n        <form onSubmit={handleAISearch} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">荷物の重量 (kg)</label>\n              <input\n                type=\"number\"\n                value={searchForm.cargoWeight}\n                onChange={(e) => handleInputChange('cargoWeight', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                placeholder=\"例: 1000\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">荷物の種類</label>\n              <select\n                value={searchForm.cargoType}\n                onChange={(e) => handleInputChange('cargoType', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n              >\n                <option value=\"\">選択してください</option>\n                {cargoTypes.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">緊急度</label>\n              <select\n                value={searchForm.urgency}\n                onChange={(e) => handleInputChange('urgency', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n              >\n                {urgencyLevels.map(level => (\n                  <option key={level.value} value={level.value}>{level.label}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">予算 (円)</label>\n              <input\n                type=\"number\"\n                value={searchForm.budget}\n                onChange={(e) => handleInputChange('budget', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                placeholder=\"例: 50000\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">特別な要件</label>\n            <textarea\n              value={searchForm.specialRequirements}\n              onChange={(e) => handleInputChange('specialRequirements', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n              rows={3}\n              placeholder=\"例: 温度管理が必要、危険物輸送資格必須、24時間対応など\"\n            />\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={aiSearching}\n              className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-3 rounded-lg hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n            >\n              {aiSearching ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  <span>AI検索中...</span>\n                </>\n              ) : (\n                <>\n                  <Brain className=\"h-4 w-4\" />\n                  <span>AI おすすめ検索</span>\n                </>\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n\n      {/* AI検索結果 */}\n      {showAIResults && aiResults && (\n        <div className=\"mb-8\">\n          {/* AIインサイト */}\n          <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg shadow-sm border border-purple-200 p-6 mb-6\">\n            <div className=\"flex items-center mb-4\">\n              <Brain className=\"h-6 w-6 text-purple-600 mr-2\" />\n              <h3 className=\"text-lg font-semibold text-gray-900\">AI 分析結果</h3>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-white p-4 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <Target className=\"h-5 w-5 text-purple-600 mr-2\" />\n                  <span className=\"text-sm font-medium text-gray-700\">マッチング数</span>\n                </div>\n                <p className=\"text-2xl font-bold text-purple-600 mt-1\">{aiResults.aiInsights.totalMatches}件</p>\n              </div>\n              <div className=\"bg-white p-4 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <TrendingUp className=\"h-5 w-5 text-blue-600 mr-2\" />\n                  <span className=\"text-sm font-medium text-gray-700\">平均マッチング率</span>\n                </div>\n                <p className=\"text-2xl font-bold text-blue-600 mt-1\">{aiResults.aiInsights.averageMatchScore}%</p>\n              </div>\n              <div className=\"bg-white p-4 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <Award className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span className=\"text-sm font-medium text-gray-700\">おすすめ運送会社</span>\n                </div>\n                <p className=\"text-sm text-gray-600 mt-1\">{aiResults.aiInsights.recommendedCarriers.length}社</p>\n              </div>\n              <div className=\"bg-white p-4 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <BarChart3 className=\"h-5 w-5 text-orange-600 mr-2\" />\n                  <span className=\"text-sm font-medium text-gray-700\">市場動向</span>\n                </div>\n                <p className=\"text-xs text-gray-600 mt-1\">{aiResults.aiInsights.marketTrends}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* AIおすすめ車両一覧 */}\n          <div className=\"bg-white rounded-lg shadow-sm border\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">AI おすすめ車両 ({aiResults.vehicles.length}件)</h2>\n              <p className=\"text-sm text-gray-600\">マッチング率順に表示されています</p>\n            </div>\n            \n            <div className=\"divide-y divide-gray-200\">\n              {aiResults.vehicles.map((vehicle, index) => (\n                <div key={vehicle.id} className=\"p-6 hover:bg-gray-50\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <span className=\"bg-purple-100 text-purple-800 text-xs font-medium px-2 py-1 rounded-full\">\n                          #{index + 1} おすすめ\n                        </span>\n                        <h3 className=\"text-lg font-semibold text-gray-900\">{vehicle.vehicleType}</h3>\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getMatchScoreColor(vehicle.aiMatchScore || 0)}`}>\n                          <Target className=\"h-3 w-3 inline mr-1\" />\n                          マッチング率: {vehicle.aiMatchScore}%\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-3\">{vehicle.aiRecommendationReason}</p>\n                    </div>\n                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(vehicle.status)}`}>\n                      {statuses.find(s => s.value === vehicle.status)?.label}\n                    </span>\n                  </div>\n\n                  {/* 運送会社情報 */}\n                  <div className=\"bg-gray-50 p-4 rounded-lg mb-4\">\n                    <h4 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n                      <Truck className=\"h-4 w-4 mr-2\" />\n                      運送会社情報\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700\">{vehicle.carrier.companyName}</p>\n                        <p className=\"text-sm text-gray-600\">担当: {vehicle.carrier.contactPerson}</p>\n                        <p className=\"text-sm text-gray-600\">TEL: {vehicle.carrier.phone}</p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">評価</span>\n                          <div className=\"flex items-center\">\n                            {renderStars(vehicle.carrier.rating)}\n                            <span className=\"ml-1 text-sm text-gray-600\">({vehicle.carrier.rating})</span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">信用スコア</span>\n                          <span className={`px-2 py-1 text-xs font-medium rounded-full ${getCreditScoreColor(vehicle.carrier.creditScore)}`}>\n                            {vehicle.carrier.creditScore}点\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">実績</span>\n                          <span className=\"text-sm text-gray-600\">\n                            {vehicle.carrier.completedShipments}/{vehicle.carrier.totalShipments}件完了\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* 専門分野 */}\n                    <div className=\"mt-3\">\n                      <span className=\"text-sm font-medium text-gray-700\">専門分野: </span>\n                      <div className=\"flex flex-wrap gap-1 mt-1\">\n                        {vehicle.carrier.specialties.map((specialty, idx) => (\n                          <span key={idx} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                            {specialty}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* 車両詳細情報 */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-700 mb-4\">\n                    <div className=\"flex items-center\">\n                      <Weight className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      最大積載重量: {vehicle.maxWeight}kg\n                    </div>\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      運行可能エリア: {vehicle.availablePrefectures ? JSON.parse(vehicle.availablePrefectures).join(', ') : '-'}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      利用可能期間: {new Date(vehicle.availableFrom).toLocaleDateString()} - {new Date(vehicle.availableTo).toLocaleDateString()}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <DollarSign className=\"h-4 w-4 mr-2 text-gray-500\" />\n                      基本料金: {vehicle.basePrice ? `${vehicle.basePrice}円/km` : '要相談'}\n                    </div>\n                  </div>\n\n                  {/* AI予測情報 */}\n                  <div className=\"bg-blue-50 p-4 rounded-lg mb-4\">\n                    <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center\">\n                      <Brain className=\"h-4 w-4 mr-2\" />\n                      AI 予測情報\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                      <div className=\"flex items-center\">\n                        <Clock className=\"h-4 w-4 mr-2 text-blue-500\" />\n                        <span className=\"text-gray-700\">予想配送時間: {vehicle.estimatedDeliveryTime}時間</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <TrendingUp className=\"h-4 w-4 mr-2 text-green-500\" />\n                        <span className=\"text-gray-700\">コスト効率: {vehicle.costEfficiency}%</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Shield className=\"h-4 w-4 mr-2 text-purple-500\" />\n                        <span className=\"text-gray-700\">信頼性スコア: {vehicle.carrier.reliabilityScore}%</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"text-sm text-gray-600\">\n                      <p>運転手: {vehicle.driverName}</p>\n                      <p>連絡先: {vehicle.driverPhone}</p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 text-sm\">\n                        詳細を見る\n                      </button>\n                      <button className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-blue-700 text-sm\">\n                        AI おすすめで依頼\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 通常検索結果 */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">通常検索結果</h2>\n        </div>\n        \n        {loading ? (\n          <div className=\"p-6 text-center text-gray-500\">読み込み中...</div>\n        ) : vehicles.length === 0 ? (\n          <div className=\"p-6 text-center text-gray-500\">\n            <Truck className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>該当する空車はありません</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {vehicles.map(vehicle => (\n              <div key={vehicle.id} className=\"p-6 hover:bg-gray-50\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">{vehicle.vehicleType}</h3>\n                    <p className=\"text-sm text-gray-600\">車両番号: {vehicle.vehicleNumber}</p>\n                  </div>\n                  <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(vehicle.status)}`}>\n                    {statuses.find(s => s.value === vehicle.status)?.label}\n                  </span>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-700\">\n                  <div className=\"flex items-center\">\n                    <Weight className=\"h-4 w-4 mr-2 text-gray-500\" />\n                    最大積載重量: {vehicle.maxWeight}kg\n                  </div>\n                  <div className=\"flex items-center\">\n                    <MapPin className=\"h-4 w-4 mr-2 text-gray-500\" />\n                    運行可能エリア: {vehicle.availablePrefectures ? JSON.parse(vehicle.availablePrefectures).join(', ') : '-'}\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />\n                    利用可能期間: {new Date(vehicle.availableFrom).toLocaleDateString()} - {new Date(vehicle.availableTo).toLocaleDateString()}\n                  </div>\n                  <div className=\"flex items-center\">\n                    <DollarSign className=\"h-4 w-4 mr-2 text-gray-500\" />\n                    基本料金: {vehicle.basePrice ? `${vehicle.basePrice}円/km` : '要相談'}\n                  </div>\n                </div>\n\n                <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"text-sm text-gray-600\">\n                      <p>運転手: {vehicle.driverName}</p>\n                      <p>連絡先: {vehicle.driverPhone}</p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 text-sm\">\n                        詳細を見る\n                      </button>\n                      <button className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 text-sm\">\n                        依頼する\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":31885},"src/lib/auth.ts":{"content":"import jwt from 'jsonwebtoken'\nimport bcrypt from 'bcryptjs'\nimport { NextRequest } from 'next/server'\n\nconst JWT_SECRET = process.env.JWT_SECRET as string\nif (!JWT_SECRET) {\n  throw new Error('JWT_SECRET environment variable is not set. Please configure it in your environment.')\n}\n\nexport interface JWTPayload {\n  userId: string\n  email: string\n  userType: 'SHIPPER' | 'CARRIER' | 'ADMIN'\n}\n\n// パスワードのハッシュ化\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12)\n}\n\n// パスワードの検証\nexport async function verifyPassword(\n  password: string,\n  hashedPassword: string\n): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword)\n}\n\n// JWTトークンの生成\nexport function generateToken(payload: JWTPayload): string {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' })\n}\n\n// JWTトークンの検証\nexport function verifyToken(token: string): JWTPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as JWTPayload\n  } catch (error) {\n    return null\n  }\n}\n\n// リクエストからユーザー情報を取得\nexport function getUserFromRequest(request: NextRequest): JWTPayload | null {\n  const token = request.headers.get('authorization')?.replace('Bearer ', '')\n  \n  if (!token) {\n    return null\n  }\n  \n  return verifyToken(token)\n}\n\n// Cookieからトークンを取得\nexport function getTokenFromCookies(cookies: string): string | null {\n  const tokenCookie = cookies\n    .split(';')\n    .find((c) => c.trim().startsWith('token='))\n  \n  if (!tokenCookie) {\n    return null\n  }\n  \n  return tokenCookie.split('=')[1]\n}\n\n// 管理者権限チェック\nexport function isAdmin(userType: string): boolean {\n  return userType === 'ADMIN'\n}\n\n// 管理者認証ミドルウェア\nexport function requireAdmin(payload: JWTPayload): boolean {\n  return payload.userType === 'ADMIN'\n}\n\n// セキュアな管理者トークン生成\nexport function generateAdminToken(payload: JWTPayload): string {\n  if (payload.userType !== 'ADMIN') {\n    throw new Error('管理者権限が必要です')\n  }\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '24h' })\n}\n\n// 管理者セッション検証\nexport function verifyAdminSession(token: string): JWTPayload | null {\n  try {\n    const payload = jwt.verify(token, JWT_SECRET) as JWTPayload\n    if (payload.userType !== 'ADMIN') {\n      return null\n    }\n    return payload\n  } catch (error) {\n    return null\n  }\n}\n\n","size_bytes":2475},"src/app/shipments/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport Navbar from '@/components/Navbar'\nimport { Package, MapPin, Calendar, Truck, DollarSign, Plus, Eye } from 'lucide-react'\n\nexport default function ShipmentsPage() {\n  const router = useRouter()\n  const [user, setUser] = useState<any>(null)\n  const [shipments, setShipments] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [filter, setFilter] = useState('ALL')\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const userData = localStorage.getItem('user')\n    \n    if (!token || !userData) {\n      router.push('/login')\n      return\n    }\n\n    setUser(JSON.parse(userData))\n    fetchShipments(token)\n  }, [router])\n\n  const fetchShipments = async (token: string) => {\n    try {\n      const response = await fetch('/api/shipments', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setShipments(data.data)\n      }\n    } catch (error) {\n      console.error('Failed to fetch shipments:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getStatusBadge = (status: string) => {\n    const badges: Record<string, { bg: string; text: string; label: string }> = {\n      OPEN: { bg: 'bg-green-100', text: 'text-green-800', label: '募集中' },\n      MATCHED: { bg: 'bg-blue-100', text: 'text-blue-800', label: 'マッチング済' },\n      IN_TRANSIT: { bg: 'bg-purple-100', text: 'text-purple-800', label: '輸送中' },\n      DELIVERED: { bg: 'bg-gray-100', text: 'text-gray-800', label: '配達完了' },\n      CANCELLED: { bg: 'bg-red-100', text: 'text-red-800', label: 'キャンセル' },\n    }\n    const badge = badges[status] || badges.OPEN\n    return (\n      <span className={`px-3 py-1 rounded-full text-xs font-semibold ${badge.bg} ${badge.text}`}>\n        {badge.label}\n      </span>\n    )\n  }\n\n  const getVehicleTypeLabel = (type: string) => {\n    const types: Record<string, string> = {\n      LIGHT_TRUCK: '軽トラック',\n      SMALL_TRUCK: '小型トラック',\n      MEDIUM_TRUCK: '中型トラック',\n      LARGE_TRUCK: '大型トラック',\n      TRAILER: 'トレーラー',\n      REFRIGERATED: '冷凍・冷蔵車',\n      FLATBED: '平ボディ',\n      WING: 'ウィング車',\n    }\n    return types[type] || type\n  }\n\n  const filteredShipments = shipments.filter(shipment => {\n    if (filter === 'ALL') return true\n    return shipment.status === filter\n  })\n\n  if (!user) {\n    return null\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white\">\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12\">\n        {/* ヘッダー */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4 fade-in-up\">\n          <div>\n            <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-2\">\n              {user.userType === 'SHIPPER' ? '投稿した案件' : '配送案件一覧'}\n            </h1>\n            <p className=\"text-gray-600\">\n              {filteredShipments.length}件の案件\n            </p>\n          </div>\n          \n          {user.userType === 'SHIPPER' && (\n            <Link href=\"/shipments/new\" className=\"btn-primary flex items-center space-x-2\">\n              <Plus className=\"h-5 w-5\" />\n              <span>新規案件を投稿</span>\n            </Link>\n          )}\n        </div>\n\n        {/* フィルター */}\n        <div className=\"card mb-8 slide-in-left\">\n          <div className=\"flex flex-wrap gap-2\">\n            {['ALL', 'OPEN', 'MATCHED', 'IN_TRANSIT', 'DELIVERED'].map((status) => (\n              <button\n                key={status}\n                onClick={() => setFilter(status)}\n                className={`px-4 py-2 rounded-xl font-semibold transition-all ${\n                  filter === status\n                    ? 'bg-gradient-to-r from-blue-600 to-cyan-500 text-white shadow-md'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                {status === 'ALL' ? 'すべて' : getStatusBadge(status).props.children}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* 案件リスト */}\n        {loading ? (\n          <div className=\"text-center py-12\">\n            <div className=\"inline-block animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent\"></div>\n            <p className=\"text-gray-600 mt-4\">読み込み中...</p>\n          </div>\n        ) : filteredShipments.length === 0 ? (\n          <div className=\"card text-center py-12\">\n            <Package className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600 text-lg\">案件がありません</p>\n            {user.userType === 'SHIPPER' && (\n              <Link href=\"/shipments/new\" className=\"btn-primary mt-6 inline-block\">\n                最初の案件を投稿\n              </Link>\n            )}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {filteredShipments.map((shipment, index) => (\n              <div\n                key={shipment.id}\n                className=\"card hover:shadow-2xl transition-all cursor-pointer fade-in-up\"\n                style={{animationDelay: `${index * 0.1}s`}}\n                onClick={() => router.push(`/shipments/${shipment.id}`)}\n              >\n                {/* ヘッダー */}\n                <div className=\"flex justify-between items-start mb-4\">\n                  <h3 className=\"text-xl font-bold text-gray-900 flex-1 pr-4\">\n                    {shipment.title}\n                  </h3>\n                  {getStatusBadge(shipment.status)}\n                </div>\n\n                {/* 説明 */}\n                <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                  {shipment.description}\n                </p>\n\n                {/* ルート情報 */}\n                <div className=\"space-y-3 mb-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"bg-green-100 p-2 rounded-lg\">\n                      <MapPin className=\"h-4 w-4 text-green-600\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-xs text-gray-500 mb-1\">集荷</p>\n                      <p className=\"text-sm font-semibold text-gray-900 truncate\">\n                        {shipment.pickupPrefecture} {shipment.pickupLocation}\n                      </p>\n                      <p className=\"text-xs text-gray-600\">\n                        {new Date(shipment.pickupDateTime).toLocaleString('ja-JP')}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"bg-purple-100 p-2 rounded-lg\">\n                      <MapPin className=\"h-4 w-4 text-purple-600\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-xs text-gray-500 mb-1\">配送先</p>\n                      <p className=\"text-sm font-semibold text-gray-900 truncate\">\n                        {shipment.deliveryPrefecture} {shipment.deliveryLocation}\n                      </p>\n                      <p className=\"text-xs text-gray-600\">\n                        {new Date(shipment.deliveryDateTime).toLocaleString('ja-JP')}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* 詳細情報 */}\n                <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-gray-200\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Truck className=\"h-4 w-4 text-gray-500\" />\n                    <span className=\"text-sm text-gray-700\">\n                      {getVehicleTypeLabel(shipment.requiredVehicleType)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Package className=\"h-4 w-4 text-gray-500\" />\n                    <span className=\"text-sm text-gray-700\">\n                      {shipment.cargoWeight}kg\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 col-span-2\">\n                    <DollarSign className=\"h-4 w-4 text-gray-500\" />\n                    <span className=\"text-lg font-bold text-blue-600\">\n                      ¥{shipment.budget?.toLocaleString() || '未設定'}\n                    </span>\n                  </div>\n                </div>\n\n                {/* アクションボタン */}\n                <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                  <button className=\"w-full btn-secondary py-2 flex items-center justify-center space-x-2\">\n                    <Eye className=\"h-4 w-4\" />\n                    <span>詳細を見る</span>\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </main>\n    </div>\n  )\n}\n","size_bytes":9298},"src/app/dashboard/verification/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Upload, \n  FileText, \n  CheckCircle, \n  AlertCircle, \n  Clock, \n  Shield,\n  X\n} from 'lucide-react'\n\ninterface Verification {\n  id: string\n  documentType: string\n  documentNumber?: string\n  status: string\n  submittedAt: string\n  reviewedAt?: string\n  rejectionReason?: string\n}\n\nexport default function VerificationPage() {\n  const [verifications, setVerifications] = useState<Verification[]>([])\n  const [loading, setLoading] = useState(true)\n  const [submitting, setSubmitting] = useState(false)\n  const [documentType, setDocumentType] = useState('')\n  const [documentNumber, setDocumentNumber] = useState('')\n\n  useEffect(() => {\n    fetchVerifications()\n  }, [])\n\n  const fetchVerifications = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/verifications', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        setVerifications(data.verifications)\n      }\n    } catch (error) {\n      console.error('Failed to fetch verifications:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSubmit = async () => {\n    if (!documentType || !documentNumber) {\n      alert('すべての項目を入力してください')\n      return\n    }\n\n    setSubmitting(true)\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/verifications', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          documentType,\n          documentNumber\n        })\n      })\n\n      if (response.ok) {\n        alert('許可証を提出しました。審査をお待ちください。')\n        setDocumentType('')\n        setDocumentNumber('')\n        fetchVerifications()\n      } else {\n        const error = await response.json()\n        alert(error.error || '提出に失敗しました')\n      }\n    } catch (error) {\n      console.error('Submit error:', error)\n      alert('提出に失敗しました')\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  const documentTypes = [\n    { value: 'BUSINESS_LICENSE', label: '事業許可証', required: true },\n    { value: 'TRANSPORT_LICENSE', label: '一般貨物自動車運送事業許可証', required: true },\n    { value: 'INSURANCE', label: '保険証券', required: true },\n    { value: 'OTHER', label: 'その他', required: false }\n  ]\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'APPROVED': return 'text-green-600 bg-green-100'\n      case 'PENDING': return 'text-yellow-600 bg-yellow-100'\n      case 'REJECTED': return 'text-red-600 bg-red-100'\n      default: return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'APPROVED': return '承認済み'\n      case 'PENDING': return '審査中'\n      case 'REJECTED': return '却下'\n      default: return '不明'\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'APPROVED': return <CheckCircle className=\"h-4 w-4\" />\n      case 'PENDING': return <Clock className=\"h-4 w-4\" />\n      case 'REJECTED': return <X className=\"h-4 w-4\" />\n      default: return <AlertCircle className=\"h-4 w-4\" />\n    }\n  }\n\n  const approvedCount = verifications.filter(v => v.status === 'APPROVED').length\n  const requiredCount = documentTypes.filter(t => t.required).length\n  const isFullyVerified = approvedCount >= requiredCount\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">許可証・認証</h1>\n            <p className=\"text-gray-600\">必要な許可証を提出して認証を受けましょう</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Shield className={`h-6 w-6 ${isFullyVerified ? 'text-green-600' : 'text-yellow-600'}`} />\n            <span className={`text-sm font-medium ${isFullyVerified ? 'text-green-600' : 'text-yellow-600'}`}>\n              {isFullyVerified ? '認証完了' : '認証待ち'}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* 認証ステータス */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">認証ステータス</h2>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900\">\n                  {isFullyVerified ? '認証完了' : '認証待ち'}\n                </h3>\n                <p className=\"text-sm text-gray-600\">\n                  {approvedCount} / {requiredCount} の必須書類が承認されています\n                </p>\n              </div>\n              <div className={`px-4 py-2 rounded-full text-sm font-medium ${\n                isFullyVerified ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n              }`}>\n                {isFullyVerified ? '認証済み' : '認証待ち'}\n              </div>\n            </div>\n            \n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${(approvedCount / requiredCount) * 100}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n\n        {/* 提出済み許可証一覧 */}\n        {verifications.length > 0 && (\n          <div className=\"bg-white rounded-lg shadow-sm border\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">提出済み書類</h2>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"space-y-4\">\n                {verifications.map((verification) => (\n                  <div key={verification.id} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`p-2 rounded-lg ${\n                          verification.status === 'APPROVED' ? 'bg-green-100 text-green-600' :\n                          verification.status === 'PENDING' ? 'bg-yellow-100 text-yellow-600' :\n                          'bg-red-100 text-red-600'\n                        }`}>\n                          <FileText className=\"h-5 w-5\" />\n                        </div>\n                        <div>\n                          <h3 className=\"text-sm font-medium text-gray-900\">\n                            {documentTypes.find(t => t.value === verification.documentType)?.label || verification.documentType}\n                          </h3>\n                          <p className=\"text-xs text-gray-500\">\n                            許可証番号: {verification.documentNumber || '未入力'}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            提出日: {new Date(verification.submittedAt).toLocaleDateString('ja-JP')}\n                          </p>\n                          {verification.rejectionReason && (\n                            <p className=\"text-xs text-red-600 mt-1\">{verification.rejectionReason}</p>\n                          )}\n                        </div>\n                      </div>\n                      <span className={`px-2 py-1 text-xs font-medium rounded-full flex items-center space-x-1 ${getStatusColor(verification.status)}`}>\n                        {getStatusIcon(verification.status)}\n                        <span>{getStatusText(verification.status)}</span>\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* 新規提出フォーム */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">新規許可証提出</h2>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  書類タイプ\n                </label>\n                <select\n                  value={documentType}\n                  onChange={(e) => setDocumentType(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"\">選択してください</option>\n                  {documentTypes.map(type => (\n                    <option key={type.value} value={type.value}>\n                      {type.label} {type.required ? '(必須)' : '(任意)'}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  許可証番号\n                </label>\n                <input\n                  type=\"text\"\n                  value={documentNumber}\n                  onChange={(e) => setDocumentNumber(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"例: 関東運輸局第12345号\"\n                />\n              </div>\n\n              <div className=\"flex justify-end\">\n                <button\n                  onClick={handleSubmit}\n                  disabled={!documentType || !documentNumber || submitting}\n                  className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n                >\n                  {submitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      <span>提出中...</span>\n                    </>\n                  ) : (\n                    <>\n                      <Upload className=\"h-4 w-4\" />\n                      <span>提出</span>\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 注意事項 */}\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n          <div className=\"flex items-start\">\n            <AlertCircle className=\"h-5 w-5 text-yellow-600 mr-3 mt-0.5\" />\n            <div>\n              <h3 className=\"text-sm font-medium text-yellow-800\">重要事項</h3>\n              <ul className=\"text-sm text-yellow-700 mt-1 space-y-1\">\n                <li>• すべての必須書類が承認されるまで、荷物登録や車両登録はできません</li>\n                <li>• 提出した情報は管理者が審査します（通常1-3営業日）</li>\n                <li>• 正確な許可証番号を入力してください</li>\n                <li>• 虚偽の情報を提供した場合、アカウントが停止される可能性があります</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":12200},"src/components/Navbar.tsx":{"content":"'use client'\n\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\nimport Logo from './Logo'\nimport { LogOut, User } from 'lucide-react'\nimport { useEffect, useState } from 'react'\n\ninterface NavbarProps {\n  userType?: 'SHIPPER' | 'CARRIER'\n}\n\nexport default function Navbar({ userType }: NavbarProps) {\n  const router = useRouter()\n  const [user, setUser] = useState<any>(null)\n\n  useEffect(() => {\n    // ローカルストレージからユーザー情報を取得\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      setUser(JSON.parse(userData))\n    }\n  }, [])\n\n  const handleLogout = () => {\n    localStorage.removeItem('token')\n    localStorage.removeItem('user')\n    router.push('/')\n  }\n\n  return (\n    <nav className=\"bg-white/80 backdrop-blur-md shadow-sm sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-12 sm:h-16\">\n          <Link href=\"/dashboard\">\n            <Logo width={180} height={50} linkable={false} className=\"w-[120px] h-[35px] sm:w-[180px] sm:h-[50px]\" />\n          </Link>\n\n          <div className=\"flex items-center space-x-2 sm:space-x-6\">\n            {userType === 'SHIPPER' && (\n              <>\n                <Link\n                  href=\"/dashboard\"\n                  className=\"text-gray-700 hover:text-blue-600 font-medium transition text-xs sm:text-base\"\n                >\n                  <span className=\"hidden sm:inline\">ダッシュボード</span>\n                  <span className=\"sm:hidden\">ダッシュ</span>\n                </Link>\n                <Link\n                  href=\"/shipments\"\n                  className=\"text-gray-700 hover:text-blue-600 font-medium transition text-xs sm:text-base\"\n                >\n                  <span className=\"hidden sm:inline\">配送案件</span>\n                  <span className=\"sm:hidden\">案件</span>\n                </Link>\n                <Link\n                  href=\"/shipments/new\"\n                  className=\"bg-gradient-to-r from-blue-600 to-cyan-500 text-white px-2 sm:px-4 py-1 sm:py-2 rounded-xl font-semibold hover:from-blue-700 hover:to-cyan-600 transition text-xs sm:text-sm\"\n                >\n                  <span className=\"hidden sm:inline\">新規投稿</span>\n                  <span className=\"sm:hidden\">投稿</span>\n                </Link>\n              </>\n            )}\n\n            {userType === 'CARRIER' && (\n              <>\n                <Link\n                  href=\"/dashboard\"\n                  className=\"text-gray-700 hover:text-blue-600 font-medium transition text-xs sm:text-base\"\n                >\n                  <span className=\"hidden sm:inline\">ダッシュボード</span>\n                  <span className=\"sm:hidden\">ダッシュ</span>\n                </Link>\n                <Link\n                  href=\"/shipments/search\"\n                  className=\"text-gray-700 hover:text-blue-600 font-medium transition text-xs sm:text-base\"\n                >\n                  <span className=\"hidden sm:inline\">案件検索</span>\n                  <span className=\"sm:hidden\">検索</span>\n                </Link>\n                <Link\n                  href=\"/offers\"\n                  className=\"text-gray-700 hover:text-blue-600 font-medium transition text-xs sm:text-base\"\n                >\n                  <span className=\"hidden sm:inline\">マイオファー</span>\n                  <span className=\"sm:hidden\">オファー</span>\n                </Link>\n              </>\n            )}\n\n            <div className=\"flex items-center space-x-1 sm:space-x-2 text-gray-700\">\n              <User className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              <span className=\"text-xs sm:text-sm truncate max-w-[80px] sm:max-w-none\">\n                {user?.companyName || 'ユーザー'}\n              </span>\n            </div>\n\n            <Link\n              href=\"/profile\"\n              className=\"text-gray-700 hover:text-blue-600 font-medium transition text-xs sm:text-sm\"\n            >\n              <span className=\"hidden sm:inline\">プロフィール</span>\n              <span className=\"sm:hidden\">プロフ</span>\n            </Link>\n\n            <Link\n              href=\"/help\"\n              className=\"text-gray-700 hover:text-blue-600 font-medium transition text-xs sm:text-sm\"\n            >\n              <span className=\"hidden sm:inline\">ヘルプ</span>\n              <span className=\"sm:hidden\">?</span>\n            </Link>\n\n            <button\n              onClick={handleLogout}\n              className=\"flex items-center space-x-1 text-gray-700 hover:text-red-600\"\n            >\n              <LogOut className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              <span className=\"text-xs sm:text-sm hidden sm:inline\">ログアウト</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\n","size_bytes":4919},"src/components/DashboardLayout.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardSidebar from './DashboardSidebar'\nimport DashboardHeader from './DashboardHeader'\nimport { Menu, X } from 'lucide-react'\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const router = useRouter()\n  const [user, setUser] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const userData = localStorage.getItem('user')\n\n    if (!token || !userData) {\n      router.push('/login')\n      return\n    }\n\n    setUser(JSON.parse(userData))\n    setLoading(false)\n  }, [router])\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-gray-600 text-lg\">読み込み中...</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex relative\">\n      {/* モバイルメニューボタン */}\n      <button\n        onClick={() => setSidebarOpen(!sidebarOpen)}\n        className=\"lg:hidden fixed top-4 left-4 z-50 p-2 bg-white rounded-lg shadow-md hover:bg-gray-100 transition-colors\"\n      >\n        {sidebarOpen ? (\n          <X className=\"h-6 w-6 text-gray-600\" />\n        ) : (\n          <Menu className=\"h-6 w-6 text-gray-600\" />\n        )}\n      </button>\n\n      {/* オーバーレイ（モバイル） */}\n      {sidebarOpen && (\n        <div\n          className=\"lg:hidden fixed inset-0 bg-black bg-opacity-50 z-30\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      {/* サイドバー */}\n      <div\n        className={`\n          fixed lg:static inset-y-0 left-0 z-40\n          transform transition-transform duration-300 ease-in-out\n          ${sidebarOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}\n        `}\n      >\n        <DashboardSidebar onNavigate={() => setSidebarOpen(false)} />\n      </div>\n\n      {/* メインコンテンツ */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <DashboardHeader user={user} />\n        <main className=\"flex-1 p-4 sm:p-6 lg:p-8 overflow-auto\">\n          {children}\n        </main>\n      </div>\n    </div>\n  )\n}\n","size_bytes":2383},"src/app/help/page.tsx":{"content":"'use client'\n\nimport Link from 'next/link'\nimport Logo from '@/components/Logo'\nimport { ArrowLeft, HelpCircle, Mail, Phone, MessageCircle } from 'lucide-react'\n\nexport default function HelpPage() {\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      {/* ヘッダー */}\n      <header className=\"glass sticky top-0 z-50 border-b border-white/20\">\n        <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <Logo width={200} height={60} className=\"w-[150px] h-[45px] sm:w-[200px] sm:h-[60px]\" linkable={false} />\n            </Link>\n            <div className=\"flex items-center space-x-2 sm:space-x-6\">\n              <Link\n                href=\"/login\"\n                className=\"text-slate-700 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-all duration-300 hover:scale-105\"\n              >\n                ログイン\n              </Link>\n              <Link\n                href=\"/register\"\n                className=\"btn-primary text-sm px-6 py-3\"\n              >\n                新規登録\n              </Link>\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* メインコンテンツ */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"mb-8\">\n          <Link \n            href=\"/\" \n            className=\"inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors duration-300 mb-6\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            トップページに戻る\n          </Link>\n          \n          <h1 className=\"text-4xl sm:text-5xl font-bold text-slate-800 mb-4\">\n            ヘルプセンター\n          </h1>\n          <p className=\"text-lg text-slate-600\">\n            よくあるご質問とサポート情報をご案内します\n          </p>\n        </div>\n\n        {/* FAQ セクション */}\n        <div className=\"space-y-8\">\n          <div className=\"floating-card\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-6 flex items-center\">\n              <HelpCircle className=\"h-6 w-6 mr-3 text-blue-600\" />\n              よくあるご質問\n            </h2>\n            \n            <div className=\"space-y-6\">\n              <div className=\"border-l-4 border-blue-500 pl-4\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\n                  Q. 無料お試しの期間はどのくらいですか？\n                </h3>\n                <p className=\"text-slate-600\">\n                  A. 無料お試し期間は14日間です。\n                </p>\n              </div>\n              \n              <div className=\"border-l-4 border-blue-500 pl-4\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\n                  Q. 登録に必要な書類はありますか？\n                </h3>\n                <p className=\"text-slate-600\">\n                  A. 運送事業許可証が必要です。詳細は登録画面でご確認ください。\n                </p>\n              </div>\n              \n              <div className=\"border-l-4 border-blue-500 pl-4\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\n                  Q. マッチングの手数料はかかりますか？\n                </h3>\n                <p className=\"text-slate-600\">\n                  A. 御座いません。\n                </p>\n              </div>\n              \n              <div className=\"border-l-4 border-blue-500 pl-4\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\n                  Q. 支払い方法はどのようなものがありますか？\n                </h3>\n                <p className=\"text-slate-600\">\n                  A. クレジットカード決済、銀行振込、口座振替、コンビニ払い、電子マネーに対応しております。\n                </p>\n              </div>\n              \n              <div className=\"border-l-4 border-blue-500 pl-4\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\n                  Q. トラブルが発生した場合はどうすればよいですか？\n                </h3>\n                <p className=\"text-slate-600\">\n                  A. お問い合わせフォームまたはお電話でご連絡ください。24時間以内に回答いたします。\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* お問い合わせ情報 */}\n          <div className=\"floating-card\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-6 flex items-center\">\n              <MessageCircle className=\"h-6 w-6 mr-3 text-blue-600\" />\n              お問い合わせ\n            </h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"flex items-start space-x-4\">\n                <Phone className=\"h-6 w-6 text-blue-600 mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold text-slate-800\">電話でのお問い合わせ</h3>\n                  <p className=\"text-slate-600\">046-212-2325</p>\n                  <p className=\"text-sm text-slate-500\">9:00-21:00</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-4\">\n                <Mail className=\"h-6 w-6 text-blue-600 mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold text-slate-800\">メールでのお問い合わせ</h3>\n                  <p className=\"text-slate-600\">info@sinjapan.jp</p>\n                  <p className=\"text-sm text-slate-500\">24時間受付</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mt-6\">\n              <Link \n                href=\"/contact\" \n                className=\"btn-primary inline-flex items-center\"\n              >\n                お問い合わせフォーム\n              </Link>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}","size_bytes":6191},"src/app/terms/page.tsx":{"content":"'use client'\n\nimport Link from 'next/link'\nimport Logo from '@/components/Logo'\nimport { ArrowLeft, FileText } from 'lucide-react'\n\nexport default function TermsPage() {\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      {/* ヘッダー */}\n      <header className=\"glass sticky top-0 z-50 border-b border-white/20\">\n        <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <Logo width={200} height={60} className=\"w-[150px] h-[45px] sm:w-[200px] sm:h-[60px]\" linkable={false} />\n            </Link>\n            <div className=\"flex items-center space-x-2 sm:space-x-6\">\n              <Link\n                href=\"/login\"\n                className=\"text-slate-700 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-all duration-300 hover:scale-105\"\n              >\n                ログイン\n              </Link>\n              <Link\n                href=\"/register\"\n                className=\"btn-primary text-sm px-6 py-3\"\n              >\n                新規登録\n              </Link>\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* メインコンテンツ */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"mb-8\">\n          <Link \n            href=\"/\" \n            className=\"inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors duration-300 mb-6\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            トップページに戻る\n          </Link>\n          \n          <h1 className=\"text-4xl sm:text-5xl font-bold text-slate-800 mb-4 flex items-center\">\n            <FileText className=\"h-8 w-8 mr-4 text-blue-600\" />\n            利用規約\n          </h1>\n          <p className=\"text-lg text-slate-600\">\n            最終更新日：2025年1月15日\n          </p>\n        </div>\n\n        <div className=\"floating-card\">\n          <div className=\"prose prose-slate max-w-none\">\n            <h2>第1条（適用）</h2>\n            <p>\n              本利用規約（以下「本規約」といいます。）は、合同会社SIN JAPAN（以下「当社」といいます。）が提供する「SIN JAPAN LOGI MATCH」サービス（以下「本サービス」といいます。）の利用条件を定めるものです。登録ユーザーの皆さま（以下「ユーザー」といいます。）には、本規約に従って、本サービスをご利用いただきます。\n            </p>\n\n            <h2>第2条（利用登録）</h2>\n            <p>\n              本サービスにおいては、登録希望者が本規約に同意の上、当社の定める方法によって利用登録を申請し、当社がこれを承認することによって、利用登録が完了するものとします。\n            </p>\n\n            <h2>第3条（ユーザーIDおよびパスワードの管理）</h2>\n            <p>\n              ユーザーは、自己の責任において、本サービスのユーザーIDおよびパスワードを適切に管理するものとします。ユーザーは、いかなる場合にも、ユーザーIDおよびパスワードを第三者に譲渡または貸与し、もしくは第三者と共用することはできません。\n            </p>\n\n            <h2>第4条（禁止事項）</h2>\n            <p>ユーザーは、本サービスの利用にあたり、以下の行為をしてはなりません。</p>\n            <ul>\n              <li>法令または公序良俗に違反する行為</li>\n              <li>犯罪行為に関連する行為</li>\n              <li>本サービスの内容等、本サービスに含まれる著作権、商標権ほか知的財産権を侵害する行為</li>\n              <li>当社、ほかのユーザー、またはその他第三者のサーバーまたはネットワークの機能を破壊したり、妨害したりする行為</li>\n              <li>本サービスによって得られた情報を商業的に利用する行為</li>\n              <li>当社のサービスの運営を妨害するおそれのある行為</li>\n              <li>不正アクセスをし、またはこれを試みる行為</li>\n              <li>その他、当社が不適切と判断する行為</li>\n            </ul>\n\n            <h2>第5条（本サービスの提供の停止等）</h2>\n            <p>\n              当社は、以下のいずれかの事由があると判断した場合、ユーザーに事前に通知することなく本サービスの全部または一部の提供を停止または中断することができるものとします。\n            </p>\n            <ul>\n              <li>本サービスにかかるコンピュータシステムの保守点検または更新を行う場合</li>\n              <li>地震、落雷、火災、停電または天災などの不可抗力により、本サービスの提供が困難となった場合</li>\n              <li>コンピュータまたは通信回線等が事故により停止した場合</li>\n              <li>その他、当社が本サービスの提供が困難と判断した場合</li>\n            </ul>\n\n            <h2>第6条（利用制限および登録抹消）</h2>\n            <p>\n              当社は、ユーザーが以下のいずれかに該当する場合には、事前の通知なく、ユーザーに対して、本サービスの全部もしくは一部の利用を制限し、またはユーザーとしての登録を抹消することができるものとします。\n            </p>\n            <ul>\n              <li>本規約のいずれかの条項に違反した場合</li>\n              <li>登録事項に虚偽の事実があることが判明した場合</li>\n              <li>料金等の支払債務の不履行があった場合</li>\n              <li>当社からの連絡に対し、一定期間返答がない場合</li>\n              <li>本サービスについて、最終の利用から一定期間利用がない場合</li>\n              <li>その他、本サービスの利用を適当でないと判断した場合</li>\n            </ul>\n\n            <h2>第7条（退会）</h2>\n            <p>\n              ユーザーは、当社の定める退会手続により、本サービスから退会できるものとします。\n            </p>\n\n            <h2>第8条（保証の否認および免責事項）</h2>\n            <p>\n              当社は、本サービスに事実上または法律上の瑕疵（安全性、信頼性、正確性、完全性、有効性、特定の目的への適合性、セキュリティなどに関する欠陥、エラーやバグ、権利侵害などを含みます。）がないことを明示的にも黙示的にも保証しておりません。\n            </p>\n\n            <h2>第9条（サービス内容の変更等）</h2>\n            <p>\n              当社は、ユーザーに通知することなく、本サービスの内容を変更しまたは本サービスの提供を中止することができるものとし、これによってユーザーに生じた損害について一切の責任を負いません。\n            </p>\n\n            <h2>第10条（利用規約の変更）</h2>\n            <p>\n              当社は、必要と判断した場合には、ユーザーに通知することなくいつでも本規約を変更することができるものとします。なお、本規約の変更後、本サービスの利用を開始した場合には、当該ユーザーは変更後の規約に同意したものとみなします。\n            </p>\n\n            <h2>第11条（個人情報の取扱い）</h2>\n            <p>\n              当社は、本サービスの利用によって取得する個人情報については、当社「プライバシーポリシー」に従い適切に取り扱うものとします。\n            </p>\n\n            <h2>第12条（通知または連絡）</h2>\n            <p>\n              ユーザーと当社との間の通知または連絡は、当社の定める方法によって行うものとします。当社は、ユーザーから、当社が別途定める方式に従った変更届け出がない限り、現在登録されている連絡先が有効なものとみなして当該連絡先へ通知または連絡を行い、これらは、発信時にユーザーへ到達したものとみなします。\n            </p>\n\n            <h2>第13条（権利義務の譲渡の禁止）</h2>\n            <p>\n              ユーザーは、当社の書面による事前の承諾なく、利用契約上の地位または本規約に基づく権利もしくは義務を第三者に譲渡し、または担保に供することはできません。\n            </p>\n\n            <h2>第14条（準拠法・裁判管轄）</h2>\n            <p>\n              本規約の解釈にあたっては、日本法を準拠法とします。本サービスに関して紛争が生じた場合には、当社の本店所在地を管轄する裁判所を専属的合意管轄とします。\n            </p>\n\n            <div className=\"mt-8 p-4 bg-slate-50 rounded-lg\">\n              <p className=\"text-sm text-slate-600\">\n                以上\n              </p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":9523},"src/components/Logo.tsx":{"content":"'use client'\n\nimport Image from 'next/image'\nimport Link from 'next/link'\n\ninterface LogoProps {\n  href?: string\n  width?: number\n  height?: number\n  className?: string\n  linkable?: boolean\n}\n\nexport default function Logo({ href = '/', width = 180, height = 60, className = '', linkable = true }: LogoProps) {\n  const imageElement = (\n    <Image\n      src=\"/logo.png\"\n      alt=\"SIN JAPAN LOGI MATCH\"\n      width={width}\n      height={height}\n      className=\"object-contain\"\n      priority\n    />\n  )\n\n  if (linkable) {\n    return (\n      <Link href={href} className={`flex items-center ${className}`}>\n        {imageElement}\n      </Link>\n    )\n  }\n\n  return (\n    <div className={`flex items-center ${className}`}>\n      {imageElement}\n    </div>\n  )\n}\n\n","size_bytes":757},"src/app/vehicles/register/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Truck, \n  MapPin, \n  Calendar, \n  Weight, \n  DollarSign, \n  User, \n  Phone, \n  Mail,\n  Save,\n  X,\n  Plus,\n  Trash2,\n  Shield,\n  AlertCircle\n} from 'lucide-react'\n\nexport default function VehicleRegisterPage() {\n  const router = useRouter()\n  const [user, setUser] = useState<any>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [isVerified, setIsVerified] = useState(true)\n  const [verificationStatus, setVerificationStatus] = useState('')\n  const [formData, setFormData] = useState({\n    vehicleType: '',\n    vehicleNumber: '',\n    maxWeight: '',\n    availablePrefectures: [] as string[],\n    availableFrom: '',\n    availableTo: '',\n    basePrice: '',\n    driverName: '',\n    driverPhone: '',\n    driverEmail: '',\n    specialFeatures: [] as string[],\n    notes: ''\n  })\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const userData = localStorage.getItem('user')\n    \n    if (!token || !userData) {\n      router.push('/login')\n      return\n    }\n\n    const parsedUser = JSON.parse(userData)\n    setUser(parsedUser)\n    setVerificationStatus(parsedUser.verificationStatus || 'PENDING')\n    setIsVerified(parsedUser.verificationStatus === 'APPROVED')\n  }, [router])\n\n  const vehicleTypes = [\n    '軽トラック', '小型トラック', '中型トラック', '大型トラック', 'トレーラー', '冷凍車', '冷蔵車', 'その他'\n  ]\n\n  const prefectures = [\n    '北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県',\n    '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',\n    '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県',\n    '静岡県', '愛知県', '三重県', '滋賀県', '京都府', '大阪府', '兵庫県',\n    '奈良県', '和歌山県', '鳥取県', '島根県', '岡山県', '広島県', '山口県',\n    '徳島県', '香川県', '愛媛県', '高知県', '福岡県', '佐賀県', '長崎県',\n    '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'\n  ]\n\n  const specialFeatures = [\n    'クレーン付き', 'リフト付き', '冷蔵機能', '冷凍機能', '温蔵機能', '危険物輸送対応',\n    '美術品輸送対応', '精密機器輸送対応', '24時間対応', '急便対応', '長距離対応', 'その他'\n  ]\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    // 未承認チェック\n    if (!isVerified) {\n      setError('許可証が承認されるまで、車両の登録はできません。')\n      return\n    }\n    \n    setError('')\n    setLoading(true)\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/vehicles', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          ...formData,\n          maxWeight: parseFloat(formData.maxWeight),\n          basePrice: parseFloat(formData.basePrice),\n        }),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || '空車登録に失敗しました')\n      }\n\n      alert('空車登録が完了しました')\n      router.push('/dashboard/vehicle-search')\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  const handlePrefectureToggle = (prefecture: string) => {\n    setFormData(prev => ({\n      ...prev,\n      availablePrefectures: prev.availablePrefectures.includes(prefecture)\n        ? prev.availablePrefectures.filter(p => p !== prefecture)\n        : [...prev.availablePrefectures, prefecture]\n    }))\n  }\n\n  const handleSpecialFeatureToggle = (feature: string) => {\n    setFormData(prev => ({\n      ...prev,\n      specialFeatures: prev.specialFeatures.includes(feature)\n        ? prev.specialFeatures.filter(f => f !== feature)\n        : [...prev.specialFeatures, feature]\n    }))\n  }\n\n  if (!user) {\n    return null\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8 fade-in-up\">\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-2\">\n            空車登録\n          </h1>\n          <p className=\"text-gray-600\">\n            車両の詳細情報を入力して空車を登録してください\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-xl\">\n              {error}\n            </div>\n          )}\n\n          {/* 未承認警告 */}\n          {!isVerified && (\n            <div className=\"bg-yellow-50 border border-yellow-300 rounded-lg p-4 flex items-start\">\n              <Shield className=\"h-5 w-5 text-yellow-600 mt-0.5 mr-3 flex-shrink-0\" />\n              <div className=\"flex-1\">\n                <h3 className=\"text-sm font-medium text-yellow-800\">許可証の承認が必要です</h3>\n                <p className=\"text-sm text-yellow-700 mt-1\">\n                  {verificationStatus === 'PENDING' \n                    ? '許可証の審査が完了するまで、車両の登録はできません。許可証ページで必要書類を提出してください。'\n                    : '許可証が却下されています。許可証ページで再提出してください。'}\n                </p>\n                <button\n                  type=\"button\"\n                  onClick={() => router.push('/dashboard/verification')}\n                  className=\"mt-2 text-sm text-yellow-800 underline hover:text-yellow-900\"\n                >\n                  許可証ページへ移動 →\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* 車両基本情報 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.1s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-blue-600 to-cyan-500 p-3 rounded-xl\">\n                <Truck className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">車両基本情報</h2>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    車両タイプ *\n                  </label>\n                  <select\n                    required\n                    value={formData.vehicleType}\n                    onChange={(e) => handleInputChange('vehicleType', e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  >\n                    <option value=\"\">選択してください</option>\n                    {vehicleTypes.map(type => (\n                      <option key={type} value={type}>{type}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    車両番号 *\n                  </label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.vehicleNumber}\n                    onChange={(e) => handleInputChange('vehicleNumber', e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                    placeholder=\"例: 品川 500 あ 1234\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    最大積載重量 (kg) *\n                  </label>\n                  <input\n                    type=\"number\"\n                    required\n                    min=\"0\"\n                    step=\"0.01\"\n                    value={formData.maxWeight}\n                    onChange={(e) => handleInputChange('maxWeight', e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                    placeholder=\"1000\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    基本料金 (円/km)\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    value={formData.basePrice}\n                    onChange={(e) => handleInputChange('basePrice', e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                    placeholder=\"150\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* 運行可能エリア */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.2s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-green-600 to-emerald-500 p-3 rounded-xl\">\n                <MapPin className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">運行可能エリア</h2>\n            </div>\n\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-gray-600\">運行可能な都道府県を選択してください（複数選択可）</p>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n                {prefectures.map(prefecture => (\n                  <label key={prefecture} className=\"flex items-center space-x-2 cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.availablePrefectures.includes(prefecture)}\n                      onChange={() => handlePrefectureToggle(prefecture)}\n                      className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-sm text-gray-700\">{prefecture}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* 利用可能期間 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.3s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-purple-600 to-pink-500 p-3 rounded-xl\">\n                <Calendar className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">利用可能期間</h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  利用開始日 *\n                </label>\n                <input\n                  type=\"date\"\n                  required\n                  value={formData.availableFrom}\n                  onChange={(e) => handleInputChange('availableFrom', e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  利用終了日 *\n                </label>\n                <input\n                  type=\"date\"\n                  required\n                  value={formData.availableTo}\n                  onChange={(e) => handleInputChange('availableTo', e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 運転手情報 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.4s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-orange-600 to-yellow-500 p-3 rounded-xl\">\n                <User className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">運転手情報</h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  運転手名 *\n                </label>\n                <input\n                  type=\"text\"\n                  required\n                  value={formData.driverName}\n                  onChange={(e) => handleInputChange('driverName', e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"山田太郎\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  電話番号 *\n                </label>\n                <input\n                  type=\"tel\"\n                  required\n                  value={formData.driverPhone}\n                  onChange={(e) => handleInputChange('driverPhone', e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"090-1234-5678\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  メールアドレス\n                </label>\n                <input\n                  type=\"email\"\n                  value={formData.driverEmail}\n                  onChange={(e) => handleInputChange('driverEmail', e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"yamada@example.com\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 特別機能 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.5s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-teal-600 to-cyan-500 p-3 rounded-xl\">\n                <Truck className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">特別機能・設備</h2>\n            </div>\n\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-gray-600\">該当する機能・設備を選択してください（複数選択可）</p>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n                {specialFeatures.map(feature => (\n                  <label key={feature} className=\"flex items-center space-x-2 cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.specialFeatures.includes(feature)}\n                      onChange={() => handleSpecialFeatureToggle(feature)}\n                      className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    />\n                    <span className=\"text-sm text-gray-700\">{feature}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* 備考 */}\n          <div className=\"card fade-in-up\" style={{animationDelay: '0.6s'}}>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"bg-gradient-to-r from-indigo-600 to-purple-500 p-3 rounded-xl\">\n                <DollarSign className=\"h-6 w-6 text-white\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">備考・特記事項</h2>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div>\n                <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  備考・特記事項\n                </label>\n                <textarea\n                  rows={4}\n                  value={formData.notes}\n                  onChange={(e) => handleInputChange('notes', e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n                  placeholder=\"その他、特別な要望や注意事項があれば記載してください\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 送信ボタン */}\n          <div className=\"flex flex-col sm:flex-row gap-4 fade-in-up\" style={{animationDelay: '0.7s'}}>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"flex-1 btn-primary py-4 text-lg disabled:opacity-50\"\n            >\n              {loading ? '登録中...' : '空車を登録'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => router.push('/dashboard/vehicle-search')}\n              className=\"flex-1 btn-secondary py-4 text-lg\"\n            >\n              キャンセル\n            </button>\n          </div>\n        </form>\n      </div>\n    </DashboardLayout>\n  )\n}","size_bytes":18307},"scripts/add-test-users.js":{"content":"const { PrismaClient } = require('@prisma/client')\nconst bcrypt = require('bcryptjs')\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  console.log('テストアカウントを追加しています...')\n\n  const hashedPassword = await bcrypt.hash('Kazuya8008', 10)\n\n  // メインアカウントを追加\n  const mainUser = await prisma.user.upsert({\n    where: { email: 'info@sinjapan.jp' },\n    update: {\n      password: hashedPassword,\n      companyName: '合同会社SIN JAPAN',\n      contactPerson: '大谷 和哉',\n    },\n    create: {\n      email: 'info@sinjapan.jp',\n      password: hashedPassword,\n      userType: 'ADMIN', // 管理者として設定\n      companyName: '合同会社SIN JAPAN',\n      contactPerson: '大谷 和哉',\n      phone: '046-212-2325',\n      postalCode: '243-0303',\n      address: '神奈川県愛甲郡愛川町中津７２８７',\n    },\n  })\n\n  console.log('✅ メインアカウントを追加しました:')\n  console.log('   Email:', mainUser.email)\n  console.log('   会社名:', mainUser.companyName)\n  console.log('   担当者:', mainUser.contactPerson)\n\n  // 運送会社アカウントも追加\n  const carrier = await prisma.user.upsert({\n    where: { email: 'carrier@sinjapan.jp' },\n    update: {\n      password: hashedPassword,\n    },\n    create: {\n      email: 'carrier@sinjapan.jp',\n      password: hashedPassword,\n      userType: 'CARRIER',\n      companyName: 'SIN JAPAN運送株式会社',\n      contactPerson: '佐藤 太郎',\n      phone: '03-9876-5432',\n      postalCode: '140-0001',\n      address: '東京都品川区北品川1-1-1',\n    },\n  })\n\n  console.log('\\n✅ 運送会社アカウントを追加しました:')\n  console.log('   Email:', carrier.email)\n  console.log('   会社名:', carrier.companyName)\n  console.log('   種別: 運送会社')\n\n  console.log('\\n=== アカウント情報 ===')\n  console.log('\\n【メインアカウント】')\n  console.log('ID: info@sinjapan.jp')\n  console.log('PASS: Kazuya8008')\n  console.log('会社名: 合同会社SIN JAPAN')\n  console.log('担当者: 大谷 和哉')\n  console.log('\\n【運送会社アカウント】')\n  console.log('ID: carrier@sinjapan.jp')\n  console.log('PASS: Kazuya8008')\n}\n\nmain()\n  .catch((e) => {\n    console.error('エラーが発生しました:', e)\n    process.exit(1)\n  })\n  .finally(async () => {\n    await prisma.$disconnect()\n  })\n\n","size_bytes":2389},"src/app/privacy/page.tsx":{"content":"'use client'\n\nimport Link from 'next/link'\nimport Logo from '@/components/Logo'\nimport { ArrowLeft, Shield } from 'lucide-react'\n\nexport default function PrivacyPage() {\n  return (\n    <div className=\"min-h-screen gradient-bg\">\n      {/* ヘッダー */}\n      <header className=\"glass sticky top-0 z-50 border-b border-white/20\">\n        <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <Logo width={200} height={60} className=\"w-[150px] h-[45px] sm:w-[200px] sm:h-[60px]\" linkable={false} />\n            </Link>\n            <div className=\"flex items-center space-x-2 sm:space-x-6\">\n              <Link\n                href=\"/login\"\n                className=\"text-slate-700 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-all duration-300 hover:scale-105\"\n              >\n                ログイン\n              </Link>\n              <Link\n                href=\"/register\"\n                className=\"btn-primary text-sm px-6 py-3\"\n              >\n                新規登録\n              </Link>\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* メインコンテンツ */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"mb-8\">\n          <Link \n            href=\"/\" \n            className=\"inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors duration-300 mb-6\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            トップページに戻る\n          </Link>\n          \n          <h1 className=\"text-4xl sm:text-5xl font-bold text-slate-800 mb-4 flex items-center\">\n            <Shield className=\"h-8 w-8 mr-4 text-blue-600\" />\n            プライバシーポリシー\n          </h1>\n          <p className=\"text-lg text-slate-600\">\n            最終更新日：2025年1月15日\n          </p>\n        </div>\n\n        <div className=\"floating-card\">\n          <div className=\"prose prose-slate max-w-none\">\n            <h2>1. 基本方針</h2>\n            <p>\n              合同会社SIN JAPAN（以下「当社」といいます。）は、個人情報の重要性を認識し、個人情報の保護に関する法律（個人情報保護法）を遵守するとともに、以下のプライバシーポリシー（以下「本ポリシー」といいます。）に従って、適切な取扱い及び保護に努めます。\n            </p>\n\n            <h2>2. 個人情報の定義</h2>\n            <p>\n              本ポリシーにおいて、個人情報とは、個人情報保護法にいう「個人情報」を指すものとし、生存する個人に関する情報であって、当該情報に含まれる氏名、生年月日、住所、電話番号、連絡先その他の記述等により特定の個人を識別できる情報及び容貌、指紋、声紋にかかるデータ、及び健康保険証の保険者番号などの当該情報単体から特定の個人を識別できる情報（個人識別情報）を指します。\n            </p>\n\n            <h2>3. 個人情報の収集方法</h2>\n            <p>\n              当社は、ユーザーが利用登録をする際に氏名、生年月日、住所、電話番号、メールアドレス、銀行口座番号、クレジットカード番号、運転免許証番号などの個人情報をお尋ねすることがあります。また、ユーザーと提携先などとの間でなされたユーザーの個人情報を含む取引記録や決済に関する情報を、当社の提携先（情報提供元、広告主、広告配信先などを含みます。以下、「提携先」といいます。）などから収集することがあります。\n            </p>\n\n            <h2>4. 個人情報を収集・利用する目的</h2>\n            <p>当社が個人情報を収集・利用する目的は、以下のとおりです。</p>\n            <ul>\n              <li>当社サービスの提供・運営のため</li>\n              <li>ユーザーからのお問い合わせに回答するため（本人確認を行うことを含む）</li>\n              <li>ユーザーが利用中のサービスの新機能、更新情報、キャンペーン等及び当社が提供する他のサービスの案内のメールを送付するため</li>\n              <li>メンテナンス、重要なお知らせなど必要に応じたご連絡のため</li>\n              <li>利用規約に違反したユーザーや、不正・不当な目的でサービスを利用しようとするユーザーの特定をし、ご利用をお断りするため</li>\n              <li>ユーザーにご自身の登録情報の閲覧・変更・削除・ご利用状況の閲覧を行っていただくため</li>\n              <li>有料サービスにおいて、ユーザーに利用料金を請求するため</li>\n              <li>上記の利用目的に付随する目的</li>\n            </ul>\n\n            <h2>5. 利用目的の変更</h2>\n            <p>\n              当社は、利用目的が変更前と関連性を有すると合理的に認められる場合に限り、個人情報の利用目的を変更するものとします。利用目的の変更を行った場合には、変更後の目的について、当社所定の方法により、ユーザーに通知し、または本ウェブサイト上に公表するものとします。\n            </p>\n\n            <h2>6. 個人情報の第三者提供</h2>\n            <p>\n              当社は、次に掲げる場合を除いて、あらかじめユーザーの同意を得ることなく、第三者に個人情報を提供することはありません。ただし、個人情報保護法その他の法令で認められる場合を除きます。\n            </p>\n            <ul>\n              <li>人の生命、身体または財産の保護のために必要がある場合であって、本人の同意を得ることが困難であるとき</li>\n              <li>公衆衛生の向上または児童の健全な育成の推進のために特に必要がある場合であって、本人の同意を得ることが困難であるとき</li>\n              <li>国の機関もしくは地方公共団体またはその委託を受けた者が法令の定める事務を遂行することに対して協力する必要がある場合であって、本人の同意を得ることにより当該事務の遂行に支障を及ぼすおそれがあるとき</li>\n              <li>予め次の事項を告知あるいは公表し、かつ当社が個人情報保護委員会に届出をしたとき</li>\n            </ul>\n\n            <h2>7. 個人情報の開示</h2>\n            <p>\n              当社は、本人から個人情報の開示を求められたときは、本人に対し、遅滞なくこれを開示します。ただし、開示することにより次のいずれかに該当する場合は、その全部または一部を開示しないこともあり、開示しない決定をした場合には、その旨を遅滞なく通知します。\n            </p>\n            <ul>\n              <li>本人または第三者の生命、身体、財産その他の権利利益を害するおそれがある場合</li>\n              <li>当社の業務の適正な実施に著しい支障を及ぼすおそれがある場合</li>\n              <li>その他法令に違反することとなる場合</li>\n            </ul>\n\n            <h2>8. 個人情報の訂正および削除</h2>\n            <p>\n              ユーザーは、当社の保有する自己の個人情報が誤った情報である場合には、当社が定める手続により、当社に対して個人情報の訂正、追加または削除（以下、「訂正等」といいます。）を請求することができます。当社は、ユーザーから前項の請求を受けてその請求に理由があると判断した場合には、遅滞なく、当該個人情報の訂正等を行うものとします。\n            </p>\n\n            <h2>9. 個人情報の利用停止等</h2>\n            <p>\n              当社は、本人から、個人情報が、利用目的の範囲を超えて取り扱われているという理由、または不正の手段により取得されたものであるという理由により、その利用の停止または消去（以下、「利用停止等」といいます。）を求められた場合には、遅滞なく必要な調査を行います。前項の調査結果に基づき、その請求に理由があると判断した場合には、遅滞なく、当該個人情報の利用停止等を行います。\n            </p>\n\n            <h2>10. プライバシーポリシーの変更</h2>\n            <p>\n              本ポリシーの内容は、法令その他本ポリシーに別段の定めのある事項を除いて、ユーザーに通知することなく、変更することができるものとします。当社が別途定める場合を除いて、変更後のプライバシーポリシーは、本ウェブサイトに掲載したときから効力を生じるものとします。\n            </p>\n\n            <h2>11. お問い合わせ窓口</h2>\n            <p>\n              本ポリシーに関するお問い合わせは、下記の窓口までお願いいたします。\n            </p>\n            <div className=\"bg-slate-50 p-4 rounded-lg\">\n              <p><strong>合同会社SIN JAPAN</strong></p>\n              <p>住所：〒243-0303 神奈川県愛甲郡愛川町中津７２８７</p>\n              <p>電話：046-212-2325</p>\n              <p>FAX：046-212-2326</p>\n              <p>メール：info@sinjapan.jp</p>\n            </div>\n\n            <div className=\"mt-8 p-4 bg-slate-50 rounded-lg\">\n              <p className=\"text-sm text-slate-600\">\n                以上\n              </p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":10144},"replit.md":{"content":"# SIN JAPAN LOGI MATCH - 物流マッチングプラットフォーム\n\n## Overview\nSIN JAPAN LOGI MATCH is a logistics matching platform designed for the Japanese market, connecting shippers (荷主) with carriers (運送会社). The platform leverages AI for efficient cargo-to-truck matching, aiming to provide next-generation freight procurement services. It enables users to post shipments, carriers to make offers, manage vehicle fleets, and provides comprehensive dashboards for both user types. The platform also includes robust user verification, a rating system, and detailed company settings management.\n\n## User Preferences\nI prefer detailed explanations and clear communication. Please ask before making major changes to the codebase or architectural decisions. I value iterative development and well-structured code.\n\n## System Architecture\nThe platform is built on **Next.js 14 (App Router)** with **TypeScript**, utilizing **Tailwind CSS** for styling, and **React Hook Form** with **Zod** for form validation.\n- **UI/UX**: Features a unified dashboard layout for consistency across 24+ pages, responsive mobile menus with smooth transitions, and a comprehensive CSS animation system (10+ animations, scroll-triggered effects) for enhanced user experience. Visual distinctions are used for shipper (blue) and carrier (green) selections.\n- **Authentication & Authorization**: Implements JWT with bcryptjs for secure authentication. Features an admin dashboard with `verifyAdminToken()` middleware for server-side enforcement and granular access control (e.g., admin role assignment, user/shipment/payment management). Unverified users are blocked from critical actions (e.g., posting shipments, registering vehicles) via server-side enforcement.\n- **User Management**: A unified registration process for both shippers and carriers. Extends the `User` model with 30+ fields for detailed company information, including credit info, contract details, bank accounts, payment settings, invoice configurations, and notification preferences, managed via a unified settings API and UI.\n- **Core Functionality**:\n    - **Shipment Management**: Comprehensive shipment registration with detailed fields (e.g., postal codes, vehicle types, special requirements) and status tracking.\n    - **Verification & Rating**: `User`, `Verification`, and `Rating` models enable document submission, admin approval, and a trust score system based on user reviews.\n    - **Services Section**: Includes a Price Calculator, Distance Calculator (using Haversine for 47 prefectures), and Fuel Cost Calculator, all with deterministic results and a user-friendly UI.\n    - **Payment System**: Integrated `Payment` model tracking various methods (bank transfer, Square, Kaihipay), with dedicated UIs and APIs for payment initialization, history retrieval, and secure processing. Square Web Payments SDK is integrated for card payments.\n    - **Notification System**: Admin broadcasting system with both email (Resend API) and in-app notifications. Features per-user `NotificationReceipt` table for secure read/delete state management, preventing cross-user mutations. Supports targeted notifications (ALL, SHIPPER, CARRIER, SPECIFIC_USER) with notification bell in dashboard header.\n- **Database**: PostgreSQL is used as the primary database, managed with **Prisma ORM**.\n- **Project Structure**: Follows a standard Next.js App Router structure with logical separation of components, utilities (auth, Prisma client, validators), custom hooks, and Prisma schema.\n\n## External Dependencies\n- **Database**: PostgreSQL (Neon-backed via Replit)\n- **ORM**: Prisma\n- **Authentication**: JWT, bcryptjs\n- **Styling**: Tailwind CSS\n- **Form Management**: React Hook Form, Zod\n- **Email Service**: Resend API (for contact form submissions)\n- **Payment Gateways**:\n    - Square Web Payments SDK (for card payments)\n    - Kaihipay (for direct debit – integration ready)\n\n## Recent Changes\n### Admin Notification System Implementation (October 17, 2025)\n- ✅ **Database Schema**: Added `Notification` and `NotificationReceipt` tables with per-user read/delete state\n- ✅ **Security Fix**: Implemented per-user `NotificationReceipt` to prevent cross-user mutations (approved by architect)\n- ✅ **Admin API**: POST /api/admin/notifications (create with auto-receipt generation), GET (retrieve all notifications)\n- ✅ **User API**: GET /api/notifications (fetch user receipts), PUT/DELETE /api/notifications/[id] (mark read/delete per-user)\n- ✅ **Email Integration**: Resend API for email notifications with HTML templates\n- ✅ **Admin UI**: /admin/notifications page with targeting (ALL, SHIPPER, CARRIER, SPECIFIC_USER) and email toggle\n- ✅ **User UI**: /dashboard/notifications page with notification bell in header, unread count badge\n- ✅ **Future Improvements**: Error handling for SPECIFIC_USER targeting, receipt backfill for legacy data, regression tests\n\n### Deployment Error Resolution (October 17, 2025)\n- ✅ **Fixed Next.js static rendering errors**: Added `export const dynamic = 'force-dynamic'` to all 26 API routes\n- ✅ **Resolved deployment failures**: All API routes now properly configured for server-side rendering\n- ✅ **Production build verified**: All 49 pages compile successfully, API routes marked as dynamic (ƒ)\n- ✅ **Fixed deployment run command**: Changed from `npm run` to `npm start` for proper server startup\n- ✅ **Application ready for deployment**: No errors, server running smoothly\n\n### Production Deployment Preparation (October 17, 2025)\n- ✅ Security hardening: Removed hardcoded JWT_SECRET fallback, now requires environment variable\n- ✅ Fixed TypeScript build errors (shipment budget→price property)\n- ✅ Optimized build script: Removed failing migrate deploy, using Prisma generate only","size_bytes":5821},"src/app/api/contact/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { Resend } from 'resend'\n\nconst resend = new Resend(process.env.RESEND_API_KEY)\n\nexport const dynamic = 'force-dynamic'\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json()\n    const {\n      lastName,\n      firstName,\n      lastNameKana,\n      firstNameKana,\n      company,\n      department,\n      phone,\n      email,\n      contactMethod,\n      message,\n      newsletter\n    } = body\n\n    if (!lastName || !firstName || !lastNameKana || !firstNameKana || !phone || !email || !message) {\n      return NextResponse.json(\n        { success: false, error: '必須項目を入力してください' },\n        { status: 400 }\n      )\n    }\n\n    const emailContent = `\n【新規お問い合わせ】\n\nお名前: ${lastName} ${firstName}\nフリガナ: ${lastNameKana} ${firstNameKana}\n会社名: ${company || '未記入'}\n部署・役職: ${department || '未記入'}\n電話番号: ${phone}\nメールアドレス: ${email}\n希望連絡方法: ${contactMethod === 'email' ? 'メール' : contactMethod === 'phone' ? '電話' : '未選択'}\nメルマガ登録: ${newsletter ? '希望する' : '希望しない'}\n\n【お問い合わせ内容】\n${message}\n\n---\nこのメールは SIN JAPAN LOGI MATCH のお問い合わせフォームから送信されました。\n    `.trim()\n\n    const data = await resend.emails.send({\n      from: 'SIN JAPAN LOGI MATCH <noreply@sinjapan.jp>',\n      to: ['info@sinjapan.jp'],\n      replyTo: email as string,\n      subject: `【お問い合わせ】${lastName} ${firstName}様より`,\n      text: emailContent,\n    })\n\n    return NextResponse.json({\n      success: true,\n      message: 'お問い合わせを送信しました',\n      data\n    })\n  } catch (error) {\n    console.error('Contact form error:', error)\n    return NextResponse.json(\n      { success: false, error: 'メール送信に失敗しました' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1978},"src/hooks/useScrollAnimation.ts":{"content":"'use client'\n\nimport { useEffect, useRef, useState } from 'react'\n\nexport function useScrollAnimation(options?: IntersectionObserverInit) {\n  const ref = useRef<HTMLDivElement>(null)\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        setIsVisible(true)\n      }\n    }, {\n      threshold: 0.1,\n      ...options,\n    })\n\n    const currentRef = ref.current\n    if (currentRef) {\n      observer.observe(currentRef)\n    }\n\n    return () => {\n      if (currentRef) {\n        observer.unobserve(currentRef)\n      }\n    }\n  }, [options])\n\n  return { ref, isVisible }\n}\n","size_bytes":685},"src/lib/adminAuth.ts":{"content":"import { NextRequest } from 'next/server'\nimport { verifyToken } from './auth'\nimport { prisma } from './prisma'\n\nexport async function verifyAdminToken(request: NextRequest) {\n  const token = request.headers.get('authorization')?.replace('Bearer ', '')\n  \n  if (!token) {\n    return { error: '認証が必要です', status: 401, user: null }\n  }\n\n  const decoded = verifyToken(token)\n  if (!decoded) {\n    return { error: '無効なトークンです', status: 401, user: null }\n  }\n\n  // ユーザー情報を取得してadmin権限を確認\n  const user = await prisma.user.findUnique({\n    where: { id: decoded.userId }\n  })\n\n  if (!user) {\n    return { error: 'ユーザーが見つかりません', status: 404, user: null }\n  }\n\n  if (!user.isAdmin) {\n    return { error: '管理者権限が必要です', status: 403, user: null }\n  }\n\n  return { error: null, status: 200, user }\n}\n","size_bytes":891},"src/app/api/payments/[id]/kaihipay/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const paymentId = params.id\n\n    // 決済情報を取得\n    const payment = await prisma.payment.findUnique({\n      where: { id: paymentId },\n      include: {\n        user: {\n          select: {\n            email: true,\n            companyName: true,\n            contactPerson: true,\n            phone: true\n          }\n        }\n      }\n    })\n\n    if (!payment) {\n      return NextResponse.json({ error: '決済情報が見つかりません' }, { status: 404 })\n    }\n\n    // 会費ペイページのHTMLを返す\n    const html = `\n      <!DOCTYPE html>\n      <html lang=\"ja\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>会費ペイ 口座振替設定 - SIN JAPAN LOGI MATCH</title>\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            max-width: 700px;\n            margin: 50px auto;\n            padding: 20px;\n            background: #f5f5f5;\n          }\n          .container {\n            background: white;\n            padding: 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n          }\n          h1 {\n            color: #333;\n            margin-bottom: 10px;\n          }\n          .amount {\n            font-size: 32px;\n            color: #8b5cf6;\n            font-weight: bold;\n            margin: 20px 0;\n          }\n          .info {\n            background: #f8f9fa;\n            padding: 15px;\n            border-radius: 4px;\n            margin: 20px 0;\n          }\n          .form-group {\n            margin-bottom: 20px;\n          }\n          label {\n            display: block;\n            font-weight: 600;\n            margin-bottom: 5px;\n            color: #333;\n          }\n          input, select {\n            width: 100%;\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            font-size: 16px;\n            box-sizing: border-box;\n          }\n          input:focus, select:focus {\n            outline: none;\n            border-color: #8b5cf6;\n          }\n          .submit-button {\n            background: #8b5cf6;\n            color: white;\n            border: none;\n            padding: 15px 30px;\n            border-radius: 4px;\n            font-size: 16px;\n            cursor: pointer;\n            width: 100%;\n            margin-top: 20px;\n          }\n          .submit-button:hover {\n            background: #7c3aed;\n          }\n          .submit-button:disabled {\n            background: #ccc;\n            cursor: not-allowed;\n          }\n          .message {\n            margin-top: 20px;\n            padding: 15px;\n            border-radius: 4px;\n          }\n          .success {\n            background: #d4edda;\n            color: #155724;\n          }\n          .error {\n            background: #f8d7da;\n            color: #721c24;\n          }\n          .note {\n            background: #fff3cd;\n            border: 1px solid #ffeaa7;\n            padding: 15px;\n            border-radius: 4px;\n            margin: 20px 0;\n            color: #856404;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <h1>会費ペイ 口座振替設定</h1>\n          <div class=\"amount\">¥${payment.amount.toLocaleString()}</div>\n          \n          <div class=\"info\">\n            <p><strong>会社名:</strong> ${payment.user.companyName}</p>\n            <p><strong>担当者:</strong> ${payment.user.contactPerson}</p>\n            <p><strong>決済ID:</strong> ${payment.id}</p>\n          </div>\n\n          <div class=\"note\">\n            <p><strong>⚠️ 重要なお知らせ</strong></p>\n            <p>会費ペイの口座振替設定には、会費ペイのAPI連携が必要です。</p>\n            <p>以下のフォームは設定後に有効化されます。</p>\n          </div>\n\n          <form id=\"bank-account-form\">\n            <div class=\"form-group\">\n              <label for=\"bank-name\">金融機関名</label>\n              <input type=\"text\" id=\"bank-name\" name=\"bankName\" placeholder=\"例：三菱UFJ銀行\" required disabled>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"branch-name\">支店名</label>\n              <input type=\"text\" id=\"branch-name\" name=\"branchName\" placeholder=\"例：本店\" required disabled>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"account-type\">口座種別</label>\n              <select id=\"account-type\" name=\"accountType\" required disabled>\n                <option value=\"\">選択してください</option>\n                <option value=\"普通\">普通</option>\n                <option value=\"当座\">当座</option>\n              </select>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"account-number\">口座番号</label>\n              <input type=\"text\" id=\"account-number\" name=\"accountNumber\" placeholder=\"7桁の数字\" pattern=\"[0-9]{7}\" required disabled>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"account-holder\">口座名義（カタカナ）</label>\n              <input type=\"text\" id=\"account-holder\" name=\"accountHolder\" placeholder=\"例：カブシキガイシャ サンプル\" required disabled>\n            </div>\n\n            <button type=\"submit\" class=\"submit-button\" disabled>口座振替を設定</button>\n          </form>\n\n          <div id=\"status\"></div>\n\n          <div style=\"margin-top: 30px; text-align: center;\">\n            <p style=\"font-size: 14px; color: #666;\">\n              会費ペイ API連携の設定方法については、\n              <a href=\"/dashboard/settings\" style=\"color: #8b5cf6;\">設定ページ</a>\n              をご確認ください。\n            </p>\n            <button onclick=\"window.location.href='/dashboard'\" style=\"margin-top: 15px; background: #6b7280; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;\">\n              ダッシュボードに戻る\n            </button>\n          </div>\n        </div>\n\n        <script>\n          document.getElementById('bank-account-form').addEventListener('submit', async (e) => {\n            e.preventDefault();\n            \n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData.entries());\n            const statusDiv = document.getElementById('status');\n            const submitButton = e.target.querySelector('button[type=\"submit\"]');\n            \n            submitButton.disabled = true;\n            submitButton.textContent = '処理中...';\n\n            try {\n              // TODO: 会費ペイAPIの実装\n              // const response = await fetch('/api/payments/${paymentId}/complete', {\n              //   method: 'POST',\n              //   headers: { 'Content-Type': 'application/json' },\n              //   body: JSON.stringify({ \n              //     accountInfo: data,\n              //     provider: 'kaihipay'\n              //   })\n              // });\n\n              // デモ用の成功処理\n              setTimeout(() => {\n                statusDiv.innerHTML = '<div class=\"message success\">口座振替の設定が完了しました！3秒後にダッシュボードに戻ります...</div>';\n                setTimeout(() => {\n                  window.location.href = '/dashboard';\n                }, 3000);\n              }, 1500);\n\n            } catch (error) {\n              statusDiv.innerHTML = '<div class=\"message error\">設定に失敗しました: ' + error.message + '</div>';\n              submitButton.disabled = false;\n              submitButton.textContent = '口座振替を設定';\n            }\n          });\n        </script>\n      </body>\n      </html>\n    `\n\n    return new NextResponse(html, {\n      headers: {\n        'Content-Type': 'text/html',\n      },\n    })\n\n  } catch (error) {\n    console.error('Kaihipay payment page error:', error)\n    return NextResponse.json({ error: '決済ページの表示に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":8393},"src/app/dashboard/services/fuel-calculator/page.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { Fuel, DollarSign, Gauge, TrendingDown, AlertCircle } from 'lucide-react'\n\nexport default function FuelCalculatorPage() {\n  const [distance, setDistance] = useState('')\n  const [fuelEfficiency, setFuelEfficiency] = useState('')\n  const [fuelPrice, setFuelPrice] = useState('150')\n  const [calculatedFuelCost, setCalculatedFuelCost] = useState<number | null>(null)\n  const [fuelConsumption, setFuelConsumption] = useState<number | null>(null)\n\n  const vehiclePresets = [\n    { type: '軽トラック', efficiency: 15 },\n    { type: '小型トラック (2t)', efficiency: 10 },\n    { type: '中型トラック (4t)', efficiency: 7 },\n    { type: '大型トラック (10t)', efficiency: 5 },\n    { type: 'トレーラー', efficiency: 4 }\n  ]\n\n  const calculateFuelCost = () => {\n    const distanceNum = parseFloat(distance)\n    const efficiencyNum = parseFloat(fuelEfficiency)\n    const priceNum = parseFloat(fuelPrice)\n\n    if (!distanceNum || !efficiencyNum || !priceNum) {\n      alert('すべての項目を入力してください')\n      return\n    }\n\n    const consumption = distanceNum / efficiencyNum\n    const totalCost = Math.round(consumption * priceNum)\n\n    setFuelConsumption(Math.round(consumption * 10) / 10)\n    setCalculatedFuelCost(totalCost)\n  }\n\n  const resetForm = () => {\n    setDistance('')\n    setFuelEfficiency('')\n    setFuelPrice('150')\n    setCalculatedFuelCost(null)\n    setFuelConsumption(null)\n  }\n\n  const applyPreset = (efficiency: number) => {\n    setFuelEfficiency(efficiency.toString())\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">燃料費計算</h1>\n        <p className=\"text-gray-600\">走行距離と燃費から燃料コストを算出します</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"space-y-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                  車両タイプから燃費を選択（任意）\n                </label>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {vehiclePresets.map(preset => (\n                    <button\n                      key={preset.type}\n                      onClick={() => applyPreset(preset.efficiency)}\n                      className=\"px-4 py-2 border border-gray-300 rounded-lg text-sm text-gray-700 hover:bg-blue-50 hover:border-blue-500 transition-colors\"\n                    >\n                      {preset.type}\n                      <div className=\"text-xs text-gray-500 mt-1\">{preset.efficiency}km/L</div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Gauge className=\"h-4 w-4 inline mr-1\" />\n                    走行距離 (km)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={distance}\n                    onChange={(e) => setDistance(e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"例: 500\"\n                    min=\"0\"\n                    step=\"0.1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Fuel className=\"h-4 w-4 inline mr-1\" />\n                    燃費 (km/L)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={fuelEfficiency}\n                    onChange={(e) => setFuelEfficiency(e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"例: 10\"\n                    min=\"0\"\n                    step=\"0.1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <DollarSign className=\"h-4 w-4 inline mr-1\" />\n                    燃料単価 (円/L)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={fuelPrice}\n                    onChange={(e) => setFuelPrice(e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"例: 150\"\n                    min=\"0\"\n                    step=\"1\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4\">\n                <button\n                  onClick={calculateFuelCost}\n                  className=\"flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n                >\n                  <Fuel className=\"h-5 w-5\" />\n                  <span>燃料費を計算</span>\n                </button>\n                <button\n                  onClick={resetForm}\n                  className=\"px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors\"\n                >\n                  リセット\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200 rounded-lg p-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n              <AlertCircle className=\"h-5 w-5 mr-2 text-orange-600\" />\n              燃料費削減のポイント\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm text-gray-700\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-1.5\"></div>\n                <span>急発進・急ブレーキを避ける</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-1.5\"></div>\n                <span>適切なタイヤ空気圧を維持</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-1.5\"></div>\n                <span>不要な荷物を降ろして軽量化</span>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-1.5\"></div>\n                <span>定期的なメンテナンスを実施</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"lg:col-span-1\">\n          {calculatedFuelCost !== null ? (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gradient-to-br from-orange-500 to-orange-600 rounded-lg shadow-lg p-6 text-white\">\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                  <Fuel className=\"h-5 w-5 mr-2\" />\n                  計算結果\n                </h3>\n                <div className=\"bg-white bg-opacity-20 rounded-lg p-4 mb-4\">\n                  <div className=\"text-sm text-orange-100 mb-1\">燃料費</div>\n                  <div className=\"text-4xl font-bold\">¥{calculatedFuelCost?.toLocaleString()}</div>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-orange-100\">走行距離</span>\n                    <span>{distance}km</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-orange-100\">燃費</span>\n                    <span>{fuelEfficiency}km/L</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-orange-100\">燃料単価</span>\n                    <span>¥{fuelPrice}/L</span>\n                  </div>\n                  <div className=\"h-px bg-white bg-opacity-20 my-2\"></div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-orange-100\">燃料消費量</span>\n                    <span className=\"font-medium\">{fuelConsumption}L</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-green-900 mb-2 flex items-center text-sm\">\n                  <TrendingDown className=\"h-4 w-4 mr-2\" />\n                  コスト削減シミュレーション\n                </h4>\n                <div className=\"space-y-2 text-xs text-green-700\">\n                  {fuelEfficiency && (\n                    <>\n                      <div className=\"flex justify-between items-center bg-white rounded p-2\">\n                        <span>燃費10%改善時</span>\n                        <span className=\"font-semibold text-green-600\">\n                          ¥{Math.round(calculatedFuelCost * 0.9).toLocaleString()}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between items-center bg-white rounded p-2\">\n                        <span>燃費20%改善時</span>\n                        <span className=\"font-semibold text-green-600\">\n                          ¥{Math.round(calculatedFuelCost * 0.8).toLocaleString()}\n                        </span>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-6\">\n              <div className=\"text-center text-gray-500\">\n                <Fuel className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p className=\"text-sm\">条件を入力して<br />「燃料費を計算」ボタンを<br />クリックしてください</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":10747},"src/app/admin/shipments/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { Package, MapPin, Calendar, DollarSign } from 'lucide-react'\n\ninterface Shipment {\n  id: string\n  cargoName: string\n  pickupLocation: string\n  deliveryLocation: string\n  pickupDate: string\n  budget: number\n  status: string\n  shipper: {\n    id: string\n    companyName: string\n    email: string\n  }\n  _count: {\n    offers: number\n  }\n  createdAt: string\n}\n\nexport default function AdminShipments() {\n  const router = useRouter()\n  const [shipments, setShipments] = useState<Shipment[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      const parsedUser = JSON.parse(userData)\n      if (!parsedUser.isAdmin) {\n        router.push('/dashboard')\n        return\n      }\n    }\n\n    fetchShipments()\n  }, [router])\n\n  const fetchShipments = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/shipments', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      })\n\n      if (!response.ok) throw new Error('Failed to fetch shipments')\n\n      const data = await response.json()\n      setShipments(data.shipments)\n    } catch (error) {\n      console.error('Error fetching shipments:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateStatus = async (shipmentId: string, newStatus: string) => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/shipments', {\n        method: 'PATCH',\n        headers: { \n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ shipmentId, status: newStatus })\n      })\n\n      if (!response.ok) throw new Error('Failed to update shipment')\n\n      const data = await response.json()\n      alert(data.message)\n      fetchShipments()\n    } catch (error) {\n      console.error('Error updating shipment:', error)\n      alert('ステータスの更新に失敗しました')\n    }\n  }\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-gray-600\">読み込み中...</div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  const statusCounts = {\n    open: shipments.filter(s => s.status === 'OPEN').length,\n    matched: shipments.filter(s => s.status === 'MATCHED').length,\n    inTransit: shipments.filter(s => s.status === 'IN_TRANSIT').length,\n    delivered: shipments.filter(s => s.status === 'DELIVERED').length,\n    cancelled: shipments.filter(s => s.status === 'CANCELLED').length\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">荷物管理</h1>\n            <p className=\"text-gray-600 mt-1\">全荷物の管理とステータス変更</p>\n          </div>\n          <div className=\"px-4 py-2 bg-green-100 text-green-800 rounded-lg font-medium\">\n            {shipments.length} 件の荷物\n          </div>\n        </div>\n\n        {/* ステータスサマリー */}\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\n            <p className=\"text-sm text-gray-600\">募集中</p>\n            <p className=\"text-2xl font-bold text-green-600\">{statusCounts.open}</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\n            <p className=\"text-sm text-gray-600\">マッチング済み</p>\n            <p className=\"text-2xl font-bold text-blue-600\">{statusCounts.matched}</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\n            <p className=\"text-sm text-gray-600\">輸送中</p>\n            <p className=\"text-2xl font-bold text-orange-600\">{statusCounts.inTransit}</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\n            <p className=\"text-sm text-gray-600\">配送完了</p>\n            <p className=\"text-2xl font-bold text-gray-600\">{statusCounts.delivered}</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\n            <p className=\"text-sm text-gray-600\">キャンセル</p>\n            <p className=\"text-2xl font-bold text-red-600\">{statusCounts.cancelled}</p>\n          </div>\n        </div>\n\n        {/* 荷物一覧 */}\n        <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">荷物情報</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">荷主</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">配送区間</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">引取日</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">予算</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">オファー数</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">ステータス</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">アクション</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {shipments.map((shipment) => (\n                  <tr key={shipment.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-center\">\n                        <Package className=\"w-5 h-5 text-gray-400 mr-2\" />\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{shipment.cargoName}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {new Date(shipment.createdAt).toLocaleDateString('ja-JP')}\n                          </p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <p className=\"text-sm font-medium text-gray-900\">{shipment.shipper.companyName}</p>\n                      <p className=\"text-xs text-gray-500\">{shipment.shipper.email}</p>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-center text-sm text-gray-600\">\n                        <MapPin className=\"w-4 h-4 mr-1\" />\n                        <div>\n                          <p>{shipment.pickupLocation}</p>\n                          <p className=\"text-xs text-gray-500\">→ {shipment.deliveryLocation}</p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-600\">\n                      {new Date(shipment.pickupDate).toLocaleDateString('ja-JP')}\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <p className=\"text-sm font-semibold text-gray-900\">¥{shipment.budget.toLocaleString()}</p>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <span className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium\">\n                        {shipment._count.offers}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <span className={`px-3 py-1 text-xs rounded-full ${\n                        shipment.status === 'OPEN' ? 'bg-green-100 text-green-800' :\n                        shipment.status === 'MATCHED' ? 'bg-blue-100 text-blue-800' :\n                        shipment.status === 'IN_TRANSIT' ? 'bg-orange-100 text-orange-800' :\n                        shipment.status === 'DELIVERED' ? 'bg-gray-100 text-gray-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {shipment.status === 'OPEN' ? '募集中' :\n                         shipment.status === 'MATCHED' ? 'マッチング済み' :\n                         shipment.status === 'IN_TRANSIT' ? '輸送中' :\n                         shipment.status === 'DELIVERED' ? '配送完了' : 'キャンセル'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <select\n                        value={shipment.status}\n                        onChange={(e) => updateStatus(shipment.id, e.target.value)}\n                        className=\"text-sm border border-gray-300 rounded-lg px-2 py-1 focus:ring-2 focus:ring-blue-500\"\n                      >\n                        <option value=\"OPEN\">募集中</option>\n                        <option value=\"MATCHED\">マッチング済み</option>\n                        <option value=\"IN_TRANSIT\">輸送中</option>\n                        <option value=\"DELIVERED\">配送完了</option>\n                        <option value=\"CANCELLED\">キャンセル</option>\n                      </select>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {shipments.length === 0 && (\n            <div className=\"text-center py-12 text-gray-500\">\n              荷物が登録されていません\n            </div>\n          )}\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":9962},"src/app/api/users/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = await prisma.user.findUnique({\n      where: { id: params.id },\n      select: {\n        id: true,\n        companyName: true,\n        email: true,\n        userType: true,\n        trustScore: true,\n        verificationStatus: true,\n        createdAt: true\n      }\n    })\n\n    if (!user) {\n      return NextResponse.json({ error: 'ユーザーが見つかりません' }, { status: 404 })\n    }\n\n    return NextResponse.json({ user })\n  } catch (error) {\n    console.error('Get user error:', error)\n    return NextResponse.json({ error: 'ユーザー情報の取得に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":866},"src/app/admin/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { \n  Users, \n  Package, \n  Truck, \n  CreditCard, \n  Shield, \n  TrendingUp,\n  Clock,\n  CheckCircle,\n  AlertCircle\n} from 'lucide-react'\n\ninterface AdminStats {\n  users: { total: number; shippers: number; carriers: number }\n  shipments: { total: number; open: number; completed: number }\n  vehicles: { total: number; available: number }\n  payments: { total: number; revenue: number }\n  verifications: { pending: number; approved: number }\n}\n\nexport default function AdminDashboard() {\n  const router = useRouter()\n  const [stats, setStats] = useState<AdminStats | null>(null)\n  const [recentActivity, setRecentActivity] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [user, setUser] = useState<any>(null)\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      const parsedUser = JSON.parse(userData)\n      setUser(parsedUser)\n      \n      // Admin権限チェック\n      if (!parsedUser.isAdmin) {\n        router.push('/dashboard')\n        return\n      }\n    }\n\n    fetchAdminStats()\n  }, [router])\n\n  const fetchAdminStats = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/stats', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch stats')\n      }\n\n      const data = await response.json()\n      setStats(data.stats)\n      setRecentActivity(data.recent)\n    } catch (error) {\n      console.error('Error fetching admin stats:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-gray-600\">読み込み中...</div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  const statCards = [\n    {\n      title: 'ユーザー',\n      value: stats?.users.total || 0,\n      subtitle: `荷主: ${stats?.users.shippers || 0} / 運送: ${stats?.users.carriers || 0}`,\n      icon: Users,\n      color: 'blue'\n    },\n    {\n      title: '荷物',\n      value: stats?.shipments.total || 0,\n      subtitle: `募集中: ${stats?.shipments.open || 0} / 完了: ${stats?.shipments.completed || 0}`,\n      icon: Package,\n      color: 'green'\n    },\n    {\n      title: '車両',\n      value: stats?.vehicles.total || 0,\n      subtitle: `利用可能: ${stats?.vehicles.available || 0}`,\n      icon: Truck,\n      color: 'purple'\n    },\n    {\n      title: '決済',\n      value: `¥${(stats?.payments.revenue || 0).toLocaleString()}`,\n      subtitle: `取引数: ${stats?.payments.total || 0}`,\n      icon: CreditCard,\n      color: 'orange'\n    },\n    {\n      title: '認証',\n      value: stats?.verifications.pending || 0,\n      subtitle: `承認済み: ${stats?.verifications.approved || 0}`,\n      icon: Shield,\n      color: 'red'\n    }\n  ]\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">管理者ダッシュボード</h1>\n            <p className=\"text-gray-600 mt-1\">システム全体の統計と管理</p>\n          </div>\n          <div className=\"px-4 py-2 bg-red-100 text-red-800 rounded-lg font-medium\">\n            Admin\n          </div>\n        </div>\n\n        {/* 統計カード */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6\">\n          {statCards.map((card, index) => {\n            const Icon = card.icon\n            return (\n              <div key={index} className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-sm font-medium text-gray-600\">{card.title}</h3>\n                  <Icon className={`w-5 h-5 text-${card.color}-600`} />\n                </div>\n                <div className=\"text-3xl font-bold text-gray-900 mb-2\">{card.value}</div>\n                <p className=\"text-sm text-gray-500\">{card.subtitle}</p>\n              </div>\n            )\n          })}\n        </div>\n\n        {/* 最近のアクティビティ */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* 最近のユーザー */}\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n              <Users className=\"w-5 h-5 mr-2\" />\n              最近のユーザー登録\n            </h2>\n            <div className=\"space-y-3\">\n              {recentActivity?.users?.map((user: any) => (\n                <div key={user.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{user.companyName}</p>\n                    <p className=\"text-sm text-gray-500\">{user.email}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className={`px-2 py-1 text-xs rounded-full ${\n                      user.userType === 'SHIPPER' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'\n                    }`}>\n                      {user.userType === 'SHIPPER' ? '荷主' : '運送'}\n                    </span>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {new Date(user.createdAt).toLocaleDateString('ja-JP')}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* 最近の荷物 */}\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n              <Package className=\"w-5 h-5 mr-2\" />\n              最近の荷物登録\n            </h2>\n            <div className=\"space-y-3\">\n              {recentActivity?.shipments?.map((shipment: any) => (\n                <div key={shipment.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{shipment.cargoName}</p>\n                    <p className=\"text-sm text-gray-500\">{shipment.shipper.companyName}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-gray-900\">¥{shipment.budget.toLocaleString()}</p>\n                    <span className={`text-xs px-2 py-1 rounded-full ${\n                      shipment.status === 'OPEN' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\n                    }`}>\n                      {shipment.status}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* 最近の決済 */}\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <CreditCard className=\"w-5 h-5 mr-2\" />\n            最近の決済\n          </h2>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">会社名</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">金額</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">支払い方法</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">ステータス</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">日時</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {recentActivity?.payments?.map((payment: any) => (\n                  <tr key={payment.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm text-gray-900\">{payment.user.companyName}</td>\n                    <td className=\"px-4 py-3 text-sm font-semibold text-gray-900\">¥{payment.amount.toLocaleString()}</td>\n                    <td className=\"px-4 py-3 text-sm text-gray-600\">\n                      {payment.paymentMethod === 'bank_transfer' ? '銀行振込' : \n                       payment.paymentMethod === 'card' ? 'カード決済' : '口座振替'}\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className={`px-2 py-1 text-xs rounded-full ${\n                        payment.paymentStatus === 'COMPLETED' ? 'bg-green-100 text-green-800' :\n                        payment.paymentStatus === 'PENDING' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {payment.paymentStatus === 'COMPLETED' ? '完了' :\n                         payment.paymentStatus === 'PENDING' ? '処理中' : '失敗'}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-500\">\n                      {new Date(payment.createdAt).toLocaleDateString('ja-JP')}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* クイックアクション */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <button\n            onClick={() => router.push('/admin/users')}\n            className=\"bg-blue-600 text-white p-6 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-between\"\n          >\n            <div className=\"text-left\">\n              <h3 className=\"text-lg font-semibold\">ユーザー管理</h3>\n              <p className=\"text-sm text-blue-100\">全ユーザーを管理</p>\n            </div>\n            <Users className=\"w-8 h-8\" />\n          </button>\n\n          <button\n            onClick={() => router.push('/admin/shipments')}\n            className=\"bg-green-600 text-white p-6 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-between\"\n          >\n            <div className=\"text-left\">\n              <h3 className=\"text-lg font-semibold\">荷物管理</h3>\n              <p className=\"text-sm text-green-100\">全荷物を管理</p>\n            </div>\n            <Package className=\"w-8 h-8\" />\n          </button>\n\n          <button\n            onClick={() => router.push('/admin/verifications')}\n            className=\"bg-red-600 text-white p-6 rounded-lg hover:bg-red-700 transition-colors flex items-center justify-between\"\n          >\n            <div className=\"text-left\">\n              <h3 className=\"text-lg font-semibold\">認証管理</h3>\n              <p className=\"text-sm text-red-100\">許可証を承認</p>\n            </div>\n            <Shield className=\"w-8 h-8\" />\n          </button>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":11383},"src/app/api/admin/verifications/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyToken } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = await verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    const admin = await prisma.user.findUnique({\n      where: { id: decoded.userId }\n    })\n\n    if (!admin?.isAdmin) {\n      return NextResponse.json({ error: '管理者権限が必要です' }, { status: 403 })\n    }\n\n    const verifications = await prisma.verification.findMany({\n      include: {\n        user: {\n          select: {\n            id: true,\n            companyName: true,\n            email: true\n          }\n        }\n      },\n      orderBy: [\n        { status: 'asc' },\n        { submittedAt: 'desc' }\n      ]\n    })\n\n    return NextResponse.json({ verifications })\n  } catch (error) {\n    console.error('Get admin verifications error:', error)\n    return NextResponse.json({ error: '許可証の取得に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":1353},"src/app/api/notifications/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyToken } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    // ユーザーのNotificationReceiptを取得\n    const receipts = await prisma.notificationReceipt.findMany({\n      where: {\n        userId: decoded.userId,\n        isDeleted: false,\n      },\n      include: {\n        notification: true,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: 50,\n    })\n\n    // Receipt情報を含めた通知データに変換\n    const notifications = receipts.map(receipt => ({\n      id: receipt.notification.id,\n      title: receipt.notification.title,\n      message: receipt.notification.message,\n      type: receipt.notification.type,\n      targetType: receipt.notification.targetType,\n      targetUserId: receipt.notification.targetUserId,\n      isRead: receipt.isRead,\n      sentByEmail: receipt.notification.sentByEmail,\n      createdAt: receipt.notification.createdAt,\n      receiptId: receipt.id, // Receipt IDも返す（既読・削除時に使用）\n    }))\n\n    // 未読件数も取得\n    const unreadCount = receipts.filter(r => !r.isRead).length\n\n    return NextResponse.json({\n      data: notifications,\n      unreadCount,\n    })\n\n  } catch (error) {\n    console.error('Notification fetch error:', error)\n    return NextResponse.json({ \n      error: '通知の取得に失敗しました' \n    }, { status: 500 })\n  }\n}\n","size_bytes":1881},"src/app/api/notifications/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyToken } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    const notificationId = params.id\n\n    // ユーザーのReceiptを既読にする\n    const receipt = await prisma.notificationReceipt.updateMany({\n      where: {\n        notificationId,\n        userId: decoded.userId,\n      },\n      data: {\n        isRead: true,\n        readAt: new Date(),\n      },\n    })\n\n    if (receipt.count === 0) {\n      return NextResponse.json({ error: '通知が見つかりません' }, { status: 404 })\n    }\n\n    return NextResponse.json({\n      message: '通知を既読にしました',\n    })\n\n  } catch (error) {\n    console.error('Notification update error:', error)\n    return NextResponse.json({ \n      error: '通知の更新に失敗しました' \n    }, { status: 500 })\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    const notificationId = params.id\n\n    // ユーザーのReceiptを削除済みにする（実際には削除せず、フラグを立てる）\n    const receipt = await prisma.notificationReceipt.updateMany({\n      where: {\n        notificationId,\n        userId: decoded.userId,\n      },\n      data: {\n        isDeleted: true,\n      },\n    })\n\n    if (receipt.count === 0) {\n      return NextResponse.json({ error: '通知が見つかりません' }, { status: 404 })\n    }\n\n    return NextResponse.json({\n      message: '通知を削除しました',\n    })\n\n  } catch (error) {\n    console.error('Notification delete error:', error)\n    return NextResponse.json({ \n      error: '通知の削除に失敗しました' \n    }, { status: 500 })\n  }\n}\n","size_bytes":2562},"src/app/api/admin/notifications/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyToken, requireAdmin } from '@/lib/auth'\nimport { Resend } from 'resend'\n\nexport const dynamic = 'force-dynamic'\n\nconst resend = new Resend(process.env.RESEND_API_KEY)\n\nexport async function POST(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const admin = verifyToken(token)\n    if (!admin || !requireAdmin(admin)) {\n      return NextResponse.json({ error: '管理者権限が必要です' }, { status: 403 })\n    }\n\n    const body = await request.json()\n    const { title, message, type = 'INFO', targetType, targetUserId, sendEmail = true } = body\n\n    // バリデーション\n    if (!title || !message || !targetType) {\n      return NextResponse.json({ error: '必須項目が不足しています' }, { status: 400 })\n    }\n\n    if (targetType === 'SPECIFIC_USER' && !targetUserId) {\n      return NextResponse.json({ error: '対象ユーザーIDが必要です' }, { status: 400 })\n    }\n\n    // 対象ユーザーを取得\n    const targetUsers = await getTargetUsers(targetType, targetUserId)\n\n    // 通知を作成\n    const notification = await prisma.notification.create({\n      data: {\n        title,\n        message,\n        type,\n        targetType,\n        targetUserId,\n        sentByEmail: sendEmail,\n        createdBy: admin.userId,\n        // 各ユーザーに対してReceiptを作成\n        receipts: {\n          create: targetUsers.map(user => ({\n            userId: user.id,\n          })),\n        },\n      },\n    })\n\n    // メール送信\n    if (sendEmail) {\n      for (const user of targetUsers) {\n        try {\n          await resend.emails.send({\n            from: 'SIN JAPAN LOGI MATCH <noreply@sinjapan.jp>',\n            to: user.email,\n            subject: `【SIN JAPAN LOGI MATCH】${title}`,\n            html: `\n              <!DOCTYPE html>\n              <html>\n                <head>\n                  <meta charset=\"UTF-8\">\n                  <style>\n                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n                    .header { background: #0070f3; color: white; padding: 20px; border-radius: 8px 8px 0 0; }\n                    .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }\n                    .message { background: white; padding: 20px; border-radius: 4px; margin: 20px 0; }\n                    .footer { text-align: center; color: #666; font-size: 12px; margin-top: 20px; }\n                  </style>\n                </head>\n                <body>\n                  <div class=\"container\">\n                    <div class=\"header\">\n                      <h1 style=\"margin: 0;\">SIN JAPAN LOGI MATCH</h1>\n                    </div>\n                    <div class=\"content\">\n                      <h2>${title}</h2>\n                      <div class=\"message\">\n                        <p style=\"white-space: pre-wrap;\">${message}</p>\n                      </div>\n                      <p>この通知はダッシュボードでもご確認いただけます。</p>\n                      <p><a href=\"https://sinjapan.jp/dashboard\" style=\"color: #0070f3;\">ダッシュボードを開く</a></p>\n                    </div>\n                    <div class=\"footer\">\n                      <p>このメールは配信専用です。返信はできません。</p>\n                      <p>&copy; 2025 SIN JAPAN LLC. All rights reserved.</p>\n                    </div>\n                  </div>\n                </body>\n              </html>\n            `,\n          })\n        } catch (emailError) {\n          console.error('Email send error:', emailError)\n        }\n      }\n    }\n\n    return NextResponse.json({\n      message: '通知を送信しました',\n      data: notification,\n    }, { status: 201 })\n\n  } catch (error) {\n    console.error('Notification create error:', error)\n    return NextResponse.json({ \n      error: '通知の作成に失敗しました',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 })\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const admin = verifyToken(token)\n    if (!admin || !requireAdmin(admin)) {\n      return NextResponse.json({ error: '管理者権限が必要です' }, { status: 403 })\n    }\n\n    // 全通知を取得（最新順）\n    const notifications = await prisma.notification.findMany({\n      orderBy: { createdAt: 'desc' },\n      take: 100,\n    })\n\n    return NextResponse.json({\n      data: notifications,\n    })\n\n  } catch (error) {\n    console.error('Notification fetch error:', error)\n    return NextResponse.json({ \n      error: '通知の取得に失敗しました' \n    }, { status: 500 })\n  }\n}\n\nasync function getTargetUsers(targetType: string, targetUserId?: string) {\n  if (targetType === 'SPECIFIC_USER' && targetUserId) {\n    const user = await prisma.user.findUnique({\n      where: { id: targetUserId },\n      select: { id: true, email: true, companyName: true },\n    })\n    return user ? [user] : []\n  }\n\n  if (targetType === 'SHIPPER') {\n    return await prisma.user.findMany({\n      where: { userType: 'SHIPPER' },\n      select: { id: true, email: true, companyName: true },\n    })\n  }\n\n  if (targetType === 'CARRIER') {\n    return await prisma.user.findMany({\n      where: { userType: 'CARRIER' },\n      select: { id: true, email: true, companyName: true },\n    })\n  }\n\n  // ALL\n  return await prisma.user.findMany({\n    select: { id: true, email: true, companyName: true },\n  })\n}\n","size_bytes":6001},"DEPLOYMENT.md":{"content":"# 本番環境デプロイ手順\n\n## 📦 デプロイ設定\n\nこのプロジェクトは本番公開用に設定済みです。\n\n### 必要な環境変数\n\n本番環境で以下の環境変数を設定してください：\n\n1. **DATABASE_URL** - 本番用PostgreSQLデータベースのURL\n2. **JWT_SECRET** - JWT認証用のシークレットキー\n\n## 🚀 デプロイ手順\n\n### 1. Replitでデプロイボタンをクリック\n\nプロジェクトの「Deploy」ボタンをクリックして本番環境にデプロイします。\n\n### 2. 本番環境変数を設定\n\nデプロイ設定画面で以下を設定：\n- `DATABASE_URL`: 本番用データベースURL\n- `JWT_SECRET`: セキュアなランダム文字列（開発環境と同じものを使用可能）\n\n### 3. データベースのセットアップ\n\nデプロイ後、本番環境のシェルで以下を実行：\n\n```bash\n# Prismaスキーマを本番データベースにプッシュ\nnpm run db:push\n```\n\n### 4. 管理者アカウントの作成\n\n本番環境で管理者アカウントを作成：\n\n```bash\nnpm run create:admin\n```\n\nこのコマンドで以下のアカウントが作成されます：\n- **Email**: info@sinjapan.jp\n- **Password**: Kazuya8008\n- **権限**: 管理者\n\n⚠️ **セキュリティ注意**: \n本番環境でアカウント作成後、必ずパスワードを変更してください！\n\n## 🔐 本番環境でのパスワード変更\n\n初回ログイン後、設定ページからパスワードを変更することを強く推奨します。\n\n## 📝 その他の設定\n\n### データベースパネルから直接作成する場合\n\nReplitのデータベースパネルから本番データベースに接続し、以下のSQLを実行することもできます：\n\n```sql\n-- パスワードハッシュを生成してから実行\nINSERT INTO users (\n  id,\n  email,\n  password,\n  \"userType\",\n  \"companyName\",\n  \"contactPerson\",\n  phone,\n  \"isAdmin\",\n  \"verificationStatus\",\n  \"trustScore\",\n  \"createdAt\",\n  \"updatedAt\"\n) VALUES (\n  'admin_' || gen_random_uuid()::text,\n  'info@sinjapan.jp',\n  -- ここにハッシュ化されたパスワードを入力\n  '$2a$10$PRFT62i9FJp08hCHROj4CeZ/aCCuF98oTetSY8/cyt7umMXv39sj2',\n  'SHIPPER',\n  'SIN JAPAN',\n  'Admin',\n  '000-0000-0000',\n  true,\n  'APPROVED',\n  5.0,\n  NOW(),\n  NOW()\n);\n```\n\n## ✅ デプロイ完了確認\n\n1. 本番URLにアクセス\n2. ログインページで管理者アカウントでログイン\n3. ダッシュボードにアクセスできることを確認\n\n## 🔧 トラブルシューティング\n\n### データベース接続エラー\n- DATABASE_URLが正しく設定されているか確認\n- 本番データベースが作成されているか確認\n\n### JWTエラー\n- JWT_SECRETが設定されているか確認\n\n### ビルドエラー\n- すべての依存関係がインストールされているか確認\n- `npm run build` をローカルで実行してエラーがないか確認\n","size_bytes":2967},"src/app/admin/notifications/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Bell, Send, AlertCircle, CheckCircle, Info, XCircle } from 'lucide-react'\n\ninterface Notification {\n  id: string\n  title: string\n  message: string\n  type: string\n  targetType: string\n  targetUserId?: string\n  isRead: boolean\n  sentByEmail: boolean\n  createdAt: string\n}\n\nexport default function AdminNotificationsPage() {\n  const [title, setTitle] = useState('')\n  const [message, setMessage] = useState('')\n  const [type, setType] = useState('INFO')\n  const [targetType, setTargetType] = useState('ALL')\n  const [sendEmail, setSendEmail] = useState(true)\n  const [loading, setLoading] = useState(false)\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState('')\n  const [notifications, setNotifications] = useState<Notification[]>([])\n\n  useEffect(() => {\n    fetchNotifications()\n  }, [])\n\n  const fetchNotifications = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/notifications', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setNotifications(data.data)\n      }\n    } catch (err) {\n      console.error('Fetch error:', err)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setSuccess(false)\n    setError('')\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/notifications', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          title,\n          message,\n          type,\n          targetType,\n          sendEmail,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setSuccess(true)\n        setTitle('')\n        setMessage('')\n        setType('INFO')\n        setTargetType('ALL')\n        fetchNotifications()\n        setTimeout(() => setSuccess(false), 3000)\n      } else {\n        setError(data.error || '通知の送信に失敗しました')\n      }\n    } catch (err) {\n      setError('通知の送信に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'SUCCESS': return <CheckCircle className=\"w-5 h-5 text-green-500\" />\n      case 'WARNING': return <AlertCircle className=\"w-5 h-5 text-yellow-500\" />\n      case 'ERROR': return <XCircle className=\"w-5 h-5 text-red-500\" />\n      default: return <Info className=\"w-5 h-5 text-blue-500\" />\n    }\n  }\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'SUCCESS': return 'bg-green-50 border-green-200'\n      case 'WARNING': return 'bg-yellow-50 border-yellow-200'\n      case 'ERROR': return 'bg-red-50 border-red-200'\n      default: return 'bg-blue-50 border-blue-200'\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-6xl mx-auto p-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-3\">\n            <Bell className=\"w-8 h-8 text-blue-600\" />\n            通知管理\n          </h1>\n          <p className=\"text-gray-600 mt-2\">\n            ユーザーに通知を送信します（アプリ内通知 + メール配信）\n          </p>\n        </div>\n\n        {/* 通知送信フォーム */}\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-6\">新規通知作成</h2>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* タイトル */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                タイトル <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"通知のタイトルを入力\"\n                required\n              />\n            </div>\n\n            {/* メッセージ */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                メッセージ <span className=\"text-red-500\">*</span>\n              </label>\n              <textarea\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                rows={6}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"通知の内容を入力\"\n                required\n              />\n            </div>\n\n            {/* 通知タイプ */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                通知タイプ\n              </label>\n              <select\n                value={type}\n                onChange={(e) => setType(e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"INFO\">情報</option>\n                <option value=\"SUCCESS\">成功</option>\n                <option value=\"WARNING\">警告</option>\n                <option value=\"ERROR\">エラー</option>\n              </select>\n            </div>\n\n            {/* 配信対象 */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                配信対象\n              </label>\n              <select\n                value={targetType}\n                onChange={(e) => setTargetType(e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"ALL\">全ユーザー</option>\n                <option value=\"SHIPPER\">荷主のみ</option>\n                <option value=\"CARRIER\">運送会社のみ</option>\n              </select>\n            </div>\n\n            {/* メール送信 */}\n            <div className=\"flex items-center gap-3\">\n              <input\n                type=\"checkbox\"\n                id=\"sendEmail\"\n                checked={sendEmail}\n                onChange={(e) => setSendEmail(e.target.checked)}\n                className=\"w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500\"\n              />\n              <label htmlFor=\"sendEmail\" className=\"text-sm font-medium text-gray-700\">\n                メールでも通知を送信する\n              </label>\n            </div>\n\n            {/* 成功メッセージ */}\n            {success && (\n              <div className=\"bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-lg\">\n                ✓ 通知を送信しました\n              </div>\n            )}\n\n            {/* エラーメッセージ */}\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg\">\n                {error}\n              </div>\n            )}\n\n            {/* 送信ボタン */}\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n            >\n              <Send className=\"w-5 h-5\" />\n              {loading ? '送信中...' : '通知を送信'}\n            </button>\n          </form>\n        </div>\n\n        {/* 送信済み通知一覧 */}\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-6\">送信済み通知</h2>\n          \n          <div className=\"space-y-4\">\n            {notifications.length === 0 ? (\n              <p className=\"text-gray-500 text-center py-8\">\n                まだ通知が送信されていません\n              </p>\n            ) : (\n              notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`border rounded-lg p-4 ${getTypeColor(notification.type)}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    {getTypeIcon(notification.type)}\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-bold text-gray-900\">{notification.title}</h3>\n                      <p className=\"text-gray-700 mt-1 whitespace-pre-wrap\">{notification.message}</p>\n                      <div className=\"flex items-center gap-4 mt-3 text-sm text-gray-600\">\n                        <span>対象: {\n                          notification.targetType === 'ALL' ? '全ユーザー' :\n                          notification.targetType === 'SHIPPER' ? '荷主のみ' :\n                          notification.targetType === 'CARRIER' ? '運送会社のみ' :\n                          '特定ユーザー'\n                        }</span>\n                        <span>{notification.sentByEmail ? 'メール送信済み' : 'アプリ内のみ'}</span>\n                        <span>{new Date(notification.createdAt).toLocaleString('ja-JP')}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":9863},"src/app/profile/[id]/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useParams, useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { Star, ThumbsUp, Award, Building2, Calendar, MessageSquare } from 'lucide-react'\n\ninterface Rating {\n  id: string\n  score: number\n  comment?: string\n  createdAt: string\n  rater: {\n    id: string\n    companyName: string\n    userType: string\n  }\n}\n\ninterface UserProfile {\n  id: string\n  companyName: string\n  email: string\n  userType: string\n  trustScore: number\n  verificationStatus: string\n  createdAt: string\n}\n\nexport default function ProfilePage() {\n  const params = useParams()\n  const router = useRouter()\n  const userId = params.id as string\n  \n  const [profile, setProfile] = useState<UserProfile | null>(null)\n  const [ratings, setRatings] = useState<Rating[]>([])\n  const [avgScore, setAvgScore] = useState(0)\n  const [totalRatings, setTotalRatings] = useState(0)\n  const [loading, setLoading] = useState(true)\n  const [currentUser, setCurrentUser] = useState<any>(null)\n  \n  // 評価フォーム\n  const [showRatingForm, setShowRatingForm] = useState(false)\n  const [ratingScore, setRatingScore] = useState(5)\n  const [ratingComment, setRatingComment] = useState('')\n  const [submitting, setSubmitting] = useState(false)\n\n  useEffect(() => {\n    const user = localStorage.getItem('user')\n    if (user) {\n      setCurrentUser(JSON.parse(user))\n    }\n    fetchProfile()\n    fetchRatings()\n  }, [userId])\n\n  const fetchProfile = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch(`/api/users/${userId}`, {\n        headers: { 'Authorization': `Bearer ${token}` }\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        setProfile(data.user)\n      }\n    } catch (error) {\n      console.error('Failed to fetch profile:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchRatings = async () => {\n    try {\n      const response = await fetch(`/api/ratings?userId=${userId}`)\n      \n      if (response.ok) {\n        const data = await response.json()\n        setRatings(data.ratings)\n        setAvgScore(data.avgScore)\n        setTotalRatings(data.totalRatings)\n      }\n    } catch (error) {\n      console.error('Failed to fetch ratings:', error)\n    }\n  }\n\n  const handleSubmitRating = async () => {\n    if (!ratingScore) {\n      alert('評価を選択してください')\n      return\n    }\n\n    setSubmitting(true)\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/ratings', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ratedUserId: userId,\n          score: ratingScore,\n          comment: ratingComment\n        })\n      })\n\n      if (response.ok) {\n        alert('評価を投稿しました')\n        setShowRatingForm(false)\n        setRatingScore(5)\n        setRatingComment('')\n        fetchRatings()\n        fetchProfile()\n      } else {\n        const error = await response.json()\n        alert(error.error || '評価の投稿に失敗しました')\n      }\n    } catch (error) {\n      console.error('Submit rating error:', error)\n      alert('評価の投稿に失敗しました')\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  const renderStars = (score: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star \n        key={i} \n        className={`h-5 w-5 ${i < score ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300'}`}\n      />\n    ))\n  }\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  if (!profile) {\n    return (\n      <DashboardLayout>\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500\">ユーザーが見つかりませんでした</p>\n          <button\n            onClick={() => router.push('/dashboard')}\n            className=\"mt-4 text-blue-600 hover:underline\"\n          >\n            ダッシュボードに戻る\n          </button>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  const canRate = currentUser && currentUser.id !== userId\n\n  return (\n    <DashboardLayout>\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* プロフィールヘッダー */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                <Building2 className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">{profile.companyName}</h1>\n                <p className=\"text-gray-600\">{profile.userType === 'SHIPPER' ? '荷主' : '運送会社'}</p>\n                <p className=\"text-sm text-gray-500 flex items-center mt-1\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  登録日: {new Date(profile.createdAt).toLocaleDateString('ja-JP')}\n                </p>\n              </div>\n            </div>\n            \n            {profile.verificationStatus === 'APPROVED' && (\n              <div className=\"px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm flex items-center space-x-1\">\n                <Award className=\"h-4 w-4\" />\n                <span>認証済み</span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* 信用スコア */}\n        <div className=\"bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg shadow-lg p-6 text-white\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-lg font-semibold mb-2\">信用スコア</h2>\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-5xl font-bold\">{avgScore.toFixed(1)}</span>\n                <div>\n                  <div className=\"flex items-center space-x-1\">\n                    {renderStars(Math.round(avgScore))}\n                  </div>\n                  <p className=\"text-sm text-blue-100 mt-1\">{totalRatings}件の評価</p>\n                </div>\n              </div>\n            </div>\n            {canRate && (\n              <button\n                onClick={() => setShowRatingForm(true)}\n                className=\"bg-white text-blue-600 px-6 py-2 rounded-lg hover:bg-blue-50 transition-colors flex items-center space-x-2\"\n              >\n                <ThumbsUp className=\"h-4 w-4\" />\n                <span>評価する</span>\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* 評価一覧 */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">評価・レビュー</h2>\n          </div>\n          <div className=\"p-6\">\n            {ratings.length === 0 ? (\n              <p className=\"text-gray-500 text-center py-8\">まだ評価がありません</p>\n            ) : (\n              <div className=\"space-y-4\">\n                {ratings.map((rating) => (\n                  <div key={rating.id} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{rating.rater.companyName}</p>\n                        <p className=\"text-xs text-gray-500\">\n                          {rating.rater.userType === 'SHIPPER' ? '荷主' : '運送会社'}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        {renderStars(rating.score)}\n                      </div>\n                    </div>\n                    {rating.comment && (\n                      <div className=\"mt-2 flex items-start space-x-2\">\n                        <MessageSquare className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                        <p className=\"text-sm text-gray-700\">{rating.comment}</p>\n                      </div>\n                    )}\n                    <p className=\"text-xs text-gray-400 mt-2\">\n                      {new Date(rating.createdAt).toLocaleDateString('ja-JP')}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* 評価投稿モーダル */}\n      {showRatingForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-bold mb-4\">評価を投稿</h3>\n            \n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                評価スコア\n              </label>\n              <div className=\"flex items-center space-x-2\">\n                {[1, 2, 3, 4, 5].map((score) => (\n                  <button\n                    key={score}\n                    type=\"button\"\n                    onClick={() => setRatingScore(score)}\n                    className=\"transition-transform hover:scale-110\"\n                  >\n                    <Star \n                      className={`h-8 w-8 ${\n                        score <= ratingScore \n                          ? 'text-yellow-400 fill-yellow-400' \n                          : 'text-gray-300'\n                      }`}\n                    />\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                コメント（任意）\n              </label>\n              <textarea\n                value={ratingComment}\n                onChange={(e) => setRatingComment(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                rows={3}\n                placeholder=\"取引の感想などをご記入ください\"\n              />\n            </div>\n\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowRatingForm(false)}\n                className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                キャンセル\n              </button>\n              <button\n                onClick={handleSubmitRating}\n                disabled={submitting}\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n              >\n                {submitting ? '投稿中...' : '投稿'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </DashboardLayout>\n  )\n}\n","size_bytes":11331},"src/app/api/verifications/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyToken } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = await verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    const verifications = await prisma.verification.findMany({\n      where: { userId: decoded.userId },\n      orderBy: { submittedAt: 'desc' }\n    })\n\n    return NextResponse.json({ verifications })\n  } catch (error) {\n    console.error('Get verifications error:', error)\n    return NextResponse.json({ error: '許可証の取得に失敗しました' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = await verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { documentType, documentNumber, issueDate, expiryDate, documentUrl } = body\n\n    if (!documentType) {\n      return NextResponse.json({ error: '書類タイプを選択してください' }, { status: 400 })\n    }\n\n    const verification = await prisma.verification.create({\n      data: {\n        userId: decoded.userId,\n        documentType,\n        documentNumber,\n        documentUrl,\n        issueDate: issueDate ? new Date(issueDate) : null,\n        expiryDate: expiryDate ? new Date(expiryDate) : null,\n        status: 'PENDING'\n      }\n    })\n\n    return NextResponse.json({ verification }, { status: 201 })\n  } catch (error) {\n    console.error('Create verification error:', error)\n    return NextResponse.json({ error: '許可証の提出に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":2215},"src/app/api/admin/stats/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyAdminToken } from '@/lib/adminAuth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { error, status, user } = await verifyAdminToken(request)\n    \n    if (error) {\n      return NextResponse.json({ error }, { status })\n    }\n\n    // 実データから統計情報を集計\n    const [\n      totalUsers,\n      totalShippers,\n      totalCarriers,\n      totalShipments,\n      openShipments,\n      completedShipments,\n      totalVehicles,\n      availableVehicles,\n      totalPayments,\n      totalRevenue,\n      pendingVerifications,\n      approvedVerifications\n    ] = await Promise.all([\n      // ユーザー統計\n      prisma.user.count(),\n      prisma.user.count({ where: { userType: 'SHIPPER' } }),\n      prisma.user.count({ where: { userType: 'CARRIER' } }),\n      \n      // 荷物統計\n      prisma.shipment.count(),\n      prisma.shipment.count({ where: { status: 'OPEN' } }),\n      prisma.shipment.count({ where: { status: 'DELIVERED' } }),\n      \n      // 車両統計\n      prisma.vehicle.count(),\n      prisma.vehicle.count({ where: { status: 'AVAILABLE' } }),\n      \n      // 決済統計\n      prisma.payment.count(),\n      prisma.payment.aggregate({\n        _sum: { amount: true },\n        where: { paymentStatus: 'COMPLETED' }\n      }),\n      \n      // 認証統計\n      prisma.verification.count({ where: { status: 'PENDING' } }),\n      prisma.verification.count({ where: { status: 'APPROVED' } })\n    ])\n\n    // 最近のアクティビティ\n    const recentUsers = await prisma.user.findMany({\n      take: 5,\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        email: true,\n        companyName: true,\n        userType: true,\n        createdAt: true\n      }\n    })\n\n    const recentShipments = await prisma.shipment.findMany({\n      take: 5,\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        cargoName: true,\n        status: true,\n        budget: true,\n        createdAt: true,\n        shipper: {\n          select: {\n            companyName: true\n          }\n        }\n      }\n    })\n\n    const recentPayments = await prisma.payment.findMany({\n      take: 5,\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        amount: true,\n        paymentMethod: true,\n        paymentStatus: true,\n        createdAt: true,\n        user: {\n          select: {\n            companyName: true\n          }\n        }\n      }\n    })\n\n    return NextResponse.json({\n      stats: {\n        users: {\n          total: totalUsers,\n          shippers: totalShippers,\n          carriers: totalCarriers\n        },\n        shipments: {\n          total: totalShipments,\n          open: openShipments,\n          completed: completedShipments\n        },\n        vehicles: {\n          total: totalVehicles,\n          available: availableVehicles\n        },\n        payments: {\n          total: totalPayments,\n          revenue: totalRevenue._sum.amount || 0\n        },\n        verifications: {\n          pending: pendingVerifications,\n          approved: approvedVerifications\n        }\n      },\n      recent: {\n        users: recentUsers,\n        shipments: recentShipments,\n        payments: recentPayments\n      }\n    })\n\n  } catch (error) {\n    console.error('Admin stats error:', error)\n    return NextResponse.json({ error: '統計情報の取得に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":3538},"src/app/admin/users/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { Users, Shield, ShieldOff, Search, Truck, Package } from 'lucide-react'\n\ninterface User {\n  id: string\n  email: string\n  companyName: string\n  contactPerson: string\n  userType: 'SHIPPER' | 'CARRIER'\n  verificationStatus: 'PENDING' | 'APPROVED' | 'REJECTED'\n  trustScore: number\n  isAdmin: boolean\n  createdAt: string\n  _count: {\n    shipments: number\n    vehicles: number\n    payments: number\n    offers: number\n  }\n}\n\nexport default function AdminUsers() {\n  const router = useRouter()\n  const [users, setUsers] = useState<User[]>([])\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [filterType, setFilterType] = useState<'all' | 'SHIPPER' | 'CARRIER'>('all')\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      const parsedUser = JSON.parse(userData)\n      if (!parsedUser.isAdmin) {\n        router.push('/dashboard')\n        return\n      }\n    }\n\n    fetchUsers()\n  }, [router])\n\n  useEffect(() => {\n    let filtered = users\n\n    if (filterType !== 'all') {\n      filtered = filtered.filter(u => u.userType === filterType)\n    }\n\n    if (searchQuery) {\n      filtered = filtered.filter(u => \n        u.companyName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        u.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        u.contactPerson.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    }\n\n    setFilteredUsers(filtered)\n  }, [users, filterType, searchQuery])\n\n  const fetchUsers = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/users', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      })\n\n      if (!response.ok) throw new Error('Failed to fetch users')\n\n      const data = await response.json()\n      setUsers(data.users)\n      setFilteredUsers(data.users)\n    } catch (error) {\n      console.error('Error fetching users:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const toggleAdminRole = async (userId: string, currentIsAdmin: boolean) => {\n    if (!confirm(`このユーザーを${currentIsAdmin ? '一般ユーザー' : '管理者'}に変更しますか？`)) {\n      return\n    }\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/users', {\n        method: 'PATCH',\n        headers: { \n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ userId, isAdmin: !currentIsAdmin })\n      })\n\n      if (!response.ok) throw new Error('Failed to update user')\n\n      const data = await response.json()\n      alert(data.message)\n      fetchUsers()\n    } catch (error) {\n      console.error('Error updating user:', error)\n      alert('権限の変更に失敗しました')\n    }\n  }\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-gray-600\">読み込み中...</div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">ユーザー管理</h1>\n            <p className=\"text-gray-600 mt-1\">全ユーザーの管理と権限設定</p>\n          </div>\n          <div className=\"px-4 py-2 bg-blue-100 text-blue-800 rounded-lg font-medium\">\n            {users.length} 人のユーザー\n          </div>\n        </div>\n\n        {/* 検索とフィルター */}\n        <div className=\"bg-white rounded-lg shadow-md p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 w-5 h-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"会社名、メール、担当者名で検索...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => setFilterType('all')}\n                className={`px-4 py-2 rounded-lg ${\n                  filterType === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700'\n                }`}\n              >\n                全て\n              </button>\n              <button\n                onClick={() => setFilterType('SHIPPER')}\n                className={`px-4 py-2 rounded-lg ${\n                  filterType === 'SHIPPER' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700'\n                }`}\n              >\n                荷主\n              </button>\n              <button\n                onClick={() => setFilterType('CARRIER')}\n                className={`px-4 py-2 rounded-lg ${\n                  filterType === 'CARRIER' ? 'bg-green-600 text-white' : 'bg-gray-100 text-gray-700'\n                }`}\n              >\n                運送会社\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* ユーザー一覧テーブル */}\n        <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">ユーザー</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">タイプ</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">認証</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">信頼スコア</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">アクティビティ</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">登録日</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">アクション</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredUsers.map((user) => (\n                  <tr key={user.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{user.companyName}</p>\n                        <p className=\"text-sm text-gray-500\">{user.email}</p>\n                        <p className=\"text-xs text-gray-400\">{user.contactPerson}</p>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <span className={`px-3 py-1 text-xs rounded-full ${\n                        user.userType === 'SHIPPER' \n                          ? 'bg-blue-100 text-blue-800' \n                          : 'bg-green-100 text-green-800'\n                      }`}>\n                        {user.userType === 'SHIPPER' ? '荷主' : '運送会社'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <span className={`px-3 py-1 text-xs rounded-full ${\n                        user.verificationStatus === 'APPROVED' \n                          ? 'bg-green-100 text-green-800' \n                          : user.verificationStatus === 'REJECTED'\n                          ? 'bg-red-100 text-red-800'\n                          : 'bg-yellow-100 text-yellow-800'\n                      }`}>\n                        {user.verificationStatus === 'APPROVED' ? '承認済み' : \n                         user.verificationStatus === 'REJECTED' ? '拒否' : '保留中'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-center\">\n                        <div className=\"text-lg font-semibold text-gray-900\">{user.trustScore}</div>\n                        <div className=\"text-xs text-gray-500 ml-1\">/100</div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex gap-3 text-sm text-gray-600\">\n                        <div className=\"flex items-center\">\n                          <Package className=\"w-4 h-4 mr-1\" />\n                          {user._count.shipments}\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Truck className=\"w-4 h-4 mr-1\" />\n                          {user._count.vehicles}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-500\">\n                      {new Date(user.createdAt).toLocaleDateString('ja-JP')}\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-center gap-2\">\n                        {user.isAdmin ? (\n                          <button\n                            onClick={() => toggleAdminRole(user.id, user.isAdmin)}\n                            className=\"flex items-center gap-1 px-3 py-1 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors text-sm\"\n                          >\n                            <ShieldOff className=\"w-4 h-4\" />\n                            Admin解除\n                          </button>\n                        ) : (\n                          <button\n                            onClick={() => toggleAdminRole(user.id, user.isAdmin)}\n                            className=\"flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-sm\"\n                          >\n                            <Shield className=\"w-4 h-4\" />\n                            Admin付与\n                          </button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {filteredUsers.length === 0 && (\n            <div className=\"text-center py-12 text-gray-500\">\n              該当するユーザーが見つかりません\n            </div>\n          )}\n        </div>\n\n        {/* 統計サマリー */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\n            <p className=\"text-sm text-gray-600\">総ユーザー数</p>\n            <p className=\"text-2xl font-bold text-gray-900\">{users.length}</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\n            <p className=\"text-sm text-gray-600\">荷主</p>\n            <p className=\"text-2xl font-bold text-blue-600\">\n              {users.filter(u => u.userType === 'SHIPPER').length}\n            </p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\n            <p className=\"text-sm text-gray-600\">運送会社</p>\n            <p className=\"text-2xl font-bold text-green-600\">\n              {users.filter(u => u.userType === 'CARRIER').length}\n            </p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-4\">\n            <p className=\"text-sm text-gray-600\">管理者</p>\n            <p className=\"text-2xl font-bold text-red-600\">\n              {users.filter(u => u.isAdmin).length}\n            </p>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":12235},"src/app/api/ratings/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyToken } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const userId = searchParams.get('userId')\n\n    if (!userId) {\n      return NextResponse.json({ error: 'ユーザーIDが必要です' }, { status: 400 })\n    }\n\n    const ratings = await prisma.rating.findMany({\n      where: { ratedUserId: userId },\n      include: {\n        rater: {\n          select: {\n            id: true,\n            companyName: true,\n            userType: true\n          }\n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    })\n\n    const avgScore = ratings.length > 0\n      ? ratings.reduce((sum, r) => sum + r.score, 0) / ratings.length\n      : 5.0\n\n    return NextResponse.json({ ratings, avgScore, totalRatings: ratings.length })\n  } catch (error) {\n    console.error('Get ratings error:', error)\n    return NextResponse.json({ error: '評価の取得に失敗しました' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = await verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { ratedUserId, score, comment, shipmentId } = body\n\n    if (!ratedUserId || !score) {\n      return NextResponse.json({ error: '必須項目を入力してください' }, { status: 400 })\n    }\n\n    if (score < 1 || score > 5) {\n      return NextResponse.json({ error: '評価は1～5の範囲で入力してください' }, { status: 400 })\n    }\n\n    if (decoded.userId === ratedUserId) {\n      return NextResponse.json({ error: '自分自身を評価することはできません' }, { status: 400 })\n    }\n\n    const existingRating = await prisma.rating.findFirst({\n      where: {\n        ratedUserId,\n        raterUserId: decoded.userId,\n        shipmentId: shipmentId || null\n      }\n    })\n\n    if (existingRating) {\n      return NextResponse.json({ error: 'この取引に対して既に評価済みです' }, { status: 400 })\n    }\n\n    const rating = await prisma.rating.create({\n      data: {\n        ratedUserId,\n        raterUserId: decoded.userId,\n        score,\n        comment,\n        shipmentId\n      }\n    })\n\n    const allRatings = await prisma.rating.findMany({\n      where: { ratedUserId }\n    })\n\n    const avgScore = allRatings.reduce((sum, r) => sum + r.score, 0) / allRatings.length\n\n    await prisma.user.update({\n      where: { id: ratedUserId },\n      data: { trustScore: Math.round(avgScore * 10) / 10 }\n    })\n\n    return NextResponse.json({ rating }, { status: 201 })\n  } catch (error) {\n    console.error('Create rating error:', error)\n    return NextResponse.json({ error: '評価の投稿に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":3154},"src/app/api/payments/[id]/square/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const paymentId = params.id\n\n    // 決済情報を取得\n    const payment = await prisma.payment.findUnique({\n      where: { id: paymentId },\n      include: {\n        user: {\n          select: {\n            email: true,\n            companyName: true,\n            contactPerson: true\n          }\n        }\n      }\n    })\n\n    if (!payment) {\n      return NextResponse.json({ error: '決済情報が見つかりません' }, { status: 404 })\n    }\n\n    // 環境変数からSquare設定を取得\n    const isProduction = process.env.NODE_ENV === 'production'\n    const squareAppId = isProduction \n      ? process.env.SQUARE_APPLICATION_ID \n      : process.env.SQUARE_SANDBOX_APPLICATION_ID\n    const squareScriptUrl = isProduction\n      ? 'https://web.squarecdn.com/v1/square.js'\n      : 'https://sandbox.web.squarecdn.com/v1/square.js'\n\n    // Square決済ページのHTMLを返す\n    const html = `\n      <!DOCTYPE html>\n      <html lang=\"ja\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Square決済 - SIN JAPAN LOGI MATCH</title>\n        <script src=\"${squareScriptUrl}\"></script>\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            max-width: 600px;\n            margin: 50px auto;\n            padding: 20px;\n            background: #f5f5f5;\n          }\n          .container {\n            background: white;\n            padding: 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n          }\n          h1 {\n            color: #333;\n            margin-bottom: 10px;\n          }\n          .amount {\n            font-size: 32px;\n            color: #0070f3;\n            font-weight: bold;\n            margin: 20px 0;\n          }\n          .info {\n            background: #f8f9fa;\n            padding: 15px;\n            border-radius: 4px;\n            margin: 20px 0;\n          }\n          #card-container {\n            margin: 20px 0;\n          }\n          #payment-button {\n            background: #0070f3;\n            color: white;\n            border: none;\n            padding: 15px 30px;\n            border-radius: 4px;\n            font-size: 16px;\n            cursor: pointer;\n            width: 100%;\n          }\n          #payment-button:hover {\n            background: #0051cc;\n          }\n          #payment-button:disabled {\n            background: #ccc;\n            cursor: not-allowed;\n          }\n          .message {\n            margin-top: 20px;\n            padding: 15px;\n            border-radius: 4px;\n          }\n          .success {\n            background: #d4edda;\n            color: #155724;\n          }\n          .error {\n            background: #f8d7da;\n            color: #721c24;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <h1>Square決済</h1>\n          <div class=\"amount\">¥${payment.amount.toLocaleString()}</div>\n          \n          <div class=\"info\">\n            <p><strong>会社名:</strong> ${payment.user.companyName}</p>\n            <p><strong>担当者:</strong> ${payment.user.contactPerson}</p>\n            <p><strong>決済ID:</strong> ${payment.id}</p>\n          </div>\n\n          <div id=\"card-container\"></div>\n          \n          <button id=\"payment-button\">決済を実行</button>\n          \n          <div id=\"payment-status\"></div>\n\n          <p style=\"text-align: center; margin-top: 30px; font-size: 14px; color: #666;\">\n            ${isProduction ? '※ 本番環境で稼働中' : '※ Sandbox（テスト）モードで稼働中'}\n          </p>\n        </div>\n\n        <script>\n          const SQUARE_APP_ID = '${squareAppId}';\n          const PAYMENT_ID = '${paymentId}';\n          \n          let card;\n\n          async function initializeSquare() {\n            try {\n              if (!SQUARE_APP_ID) {\n                document.getElementById('card-container').innerHTML = \\`\n                  <p style=\"padding: 20px; background: #f8d7da; border-radius: 4px; color: #721c24;\">\n                    Square APIキーが設定されていません。<br>\n                    管理者にお問い合わせください。\n                  </p>\n                \\`;\n                document.getElementById('payment-button').disabled = true;\n                return;\n              }\n\n              // Square Web Payments SDKの初期化\n              const payments = Square.payments(SQUARE_APP_ID);\n              card = await payments.card();\n              await card.attach('#card-container');\n\n              document.getElementById('payment-button').addEventListener('click', handlePayment);\n\n            } catch (error) {\n              console.error('Square initialization error:', error);\n              document.getElementById('card-container').innerHTML = \\`\n                <p style=\"padding: 20px; background: #f8d7da; border-radius: 4px; color: #721c24;\">\n                  Square SDKの初期化に失敗しました: \\${error.message}\n                </p>\n              \\`;\n              document.getElementById('payment-button').disabled = true;\n            }\n          }\n\n          async function handlePayment() {\n            const button = document.getElementById('payment-button');\n            const statusDiv = document.getElementById('payment-status');\n            \n            button.disabled = true;\n            button.textContent = '処理中...';\n            statusDiv.innerHTML = '';\n            \n            try {\n              // カード情報をトークン化\n              const result = await card.tokenize();\n              \n              if (result.status === 'OK') {\n                // サーバーに決済リクエストを送信\n                const response = await fetch(\\`/api/payments/\\${PAYMENT_ID}/complete\\`, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\n                  },\n                  body: JSON.stringify({ \n                    sourceId: result.token,\n                    paymentMethod: 'card'\n                  })\n                });\n\n                const data = await response.json();\n\n                if (response.ok) {\n                  statusDiv.innerHTML = '<div class=\"message success\">決済が完了しました！3秒後にダッシュボードに戻ります...</div>';\n                  setTimeout(() => {\n                    window.location.href = '/dashboard';\n                  }, 3000);\n                } else {\n                  throw new Error(data.error || '決済に失敗しました');\n                }\n              } else {\n                throw new Error(result.errors ? result.errors[0].message : '決済に失敗しました');\n              }\n\n            } catch (error) {\n              console.error('Payment error:', error);\n              statusDiv.innerHTML = \\`<div class=\"message error\">決済に失敗しました: \\${error.message}</div>\\`;\n              button.disabled = false;\n              button.textContent = '決済を実行';\n            }\n          }\n\n          initializeSquare();\n        </script>\n      </body>\n      </html>\n    `\n\n    return new NextResponse(html, {\n      headers: {\n        'Content-Type': 'text/html',\n      },\n    })\n\n  } catch (error) {\n    console.error('Square payment page error:', error)\n    return NextResponse.json({ error: '決済ページの表示に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":7852},"src/app/api/admin/payments/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyAdminToken } from '@/lib/adminAuth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { error, status } = await verifyAdminToken(request)\n    \n    if (error) {\n      return NextResponse.json({ error }, { status })\n    }\n\n    const payments = await prisma.payment.findMany({\n      orderBy: { createdAt: 'desc' },\n      include: {\n        user: {\n          select: {\n            id: true,\n            companyName: true,\n            email: true,\n            userType: true\n          }\n        }\n      }\n    })\n\n    return NextResponse.json({ payments })\n\n  } catch (error) {\n    console.error('Admin payments error:', error)\n    return NextResponse.json({ error: '決済一覧の取得に失敗しました' }, { status: 500 })\n  }\n}\n\nexport async function PATCH(request: NextRequest) {\n  try {\n    const { error, status } = await verifyAdminToken(request)\n    \n    if (error) {\n      return NextResponse.json({ error }, { status })\n    }\n\n    const { paymentId, paymentStatus } = await request.json()\n\n    if (!paymentId || !paymentStatus) {\n      return NextResponse.json({ error: '決済IDとステータスが必要です' }, { status: 400 })\n    }\n\n    const updatedPayment = await prisma.payment.update({\n      where: { id: paymentId },\n      data: { paymentStatus }\n    })\n\n    return NextResponse.json({\n      message: 'ステータスを更新しました',\n      payment: updatedPayment\n    })\n\n  } catch (error) {\n    console.error('Update payment error:', error)\n    return NextResponse.json({ error: 'ステータスの更新に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":1752},"src/app/api/settings/route.ts":{"content":"import { NextRequest } from 'next/server'\nexport const dynamic = 'force-dynamic'\nimport { getUserFromRequest } from '@/lib/auth'\nimport {\n  successResponse,\n  errorResponse,\n  unauthorizedResponse,\n} from '@/lib/api-response'\nimport prisma from '@/lib/prisma'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    const userProfile = await prisma.user.findUnique({\n      where: { id: user.userId },\n      select: {\n        id: true,\n        email: true,\n        userType: true,\n        companyName: true,\n        contactPerson: true,\n        phone: true,\n        postalCode: true,\n        address: true,\n        verificationStatus: true,\n        trustScore: true,\n        \n        industry: true,\n        establishedDate: true,\n        capital: true,\n        employeeCount: true,\n        businessDescription: true,\n        \n        subscriptionPlan: true,\n        contractStartDate: true,\n        contractEndDate: true,\n        \n        bankName: true,\n        branchName: true,\n        accountType: true,\n        accountNumber: true,\n        accountHolder: true,\n        \n        paymentMethod: true,\n        billingAddress: true,\n        \n        invoiceReceiptEmail: true,\n        invoiceReceiptMethod: true,\n        invoiceIssueMethod: true,\n        invoiceCompanyName: true,\n        \n        accountingPersonName: true,\n        accountingPersonEmail: true,\n        accountingPersonPhone: true,\n        \n        emailNotificationShipment: true,\n        emailNotificationOffer: true,\n        emailNotificationMatching: true,\n        emailNotificationMessage: true,\n        \n        createdAt: true,\n        updatedAt: true,\n      },\n    })\n    \n    if (!userProfile) {\n      return errorResponse('ユーザーが見つかりません', 404)\n    }\n    \n    return successResponse(userProfile)\n  } catch (error) {\n    console.error('Get settings error:', error)\n    return errorResponse('設定の取得に失敗しました', 500)\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const user = getUserFromRequest(request)\n    \n    if (!user) {\n      return unauthorizedResponse()\n    }\n    \n    const body = await request.json()\n    \n    const updatedUser = await prisma.user.update({\n      where: { id: user.userId },\n      data: {\n        companyName: body.companyName,\n        contactPerson: body.contactPerson,\n        phone: body.phone,\n        postalCode: body.postalCode,\n        address: body.address,\n        \n        industry: body.industry,\n        establishedDate: body.establishedDate ? new Date(body.establishedDate) : null,\n        capital: body.capital ? parseFloat(body.capital) : null,\n        employeeCount: body.employeeCount ? parseInt(body.employeeCount) : null,\n        businessDescription: body.businessDescription,\n        \n        subscriptionPlan: body.subscriptionPlan,\n        contractStartDate: body.contractStartDate ? new Date(body.contractStartDate) : null,\n        contractEndDate: body.contractEndDate ? new Date(body.contractEndDate) : null,\n        \n        bankName: body.bankName,\n        branchName: body.branchName,\n        accountType: body.accountType,\n        accountNumber: body.accountNumber,\n        accountHolder: body.accountHolder,\n        \n        paymentMethod: body.paymentMethod,\n        billingAddress: body.billingAddress,\n        \n        invoiceReceiptEmail: body.invoiceReceiptEmail,\n        invoiceReceiptMethod: body.invoiceReceiptMethod,\n        invoiceIssueMethod: body.invoiceIssueMethod,\n        invoiceCompanyName: body.invoiceCompanyName,\n        \n        accountingPersonName: body.accountingPersonName,\n        accountingPersonEmail: body.accountingPersonEmail,\n        accountingPersonPhone: body.accountingPersonPhone,\n        \n        emailNotificationShipment: body.emailNotificationShipment ?? true,\n        emailNotificationOffer: body.emailNotificationOffer ?? true,\n        emailNotificationMatching: body.emailNotificationMatching ?? true,\n        emailNotificationMessage: body.emailNotificationMessage ?? true,\n      },\n      select: {\n        id: true,\n        email: true,\n        companyName: true,\n        contactPerson: true,\n        phone: true,\n        postalCode: true,\n        address: true,\n        updatedAt: true,\n      },\n    })\n    \n    return successResponse(updatedUser)\n  } catch (error: any) {\n    console.error('Update settings error:', error)\n    return errorResponse('設定の更新に失敗しました', 500)\n  }\n}\n","size_bytes":4563},"src/app/api/payments/[id]/complete/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyToken } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    const paymentId = params.id\n    const body = await request.json()\n    const { sourceId, paymentMethod } = body\n\n    // 決済情報を取得\n    const payment = await prisma.payment.findUnique({\n      where: { id: paymentId },\n      include: {\n        user: true\n      }\n    })\n\n    if (!payment) {\n      return NextResponse.json({ error: '決済情報が見つかりません' }, { status: 404 })\n    }\n\n    // ユーザー認証チェック\n    if (payment.userId !== decoded.userId) {\n      return NextResponse.json({ error: '権限がありません' }, { status: 403 })\n    }\n\n    // Square決済処理\n    if (paymentMethod === 'card') {\n      const isProduction = process.env.NODE_ENV === 'production'\n      const squareAccessToken = isProduction\n        ? process.env.SQUARE_ACCESS_TOKEN\n        : process.env.SQUARE_SANDBOX_ACCESS_TOKEN\n\n      if (!squareAccessToken) {\n        return NextResponse.json({ error: 'Square設定が不完全です' }, { status: 500 })\n      }\n\n      // Square Payments APIを使用して決済処理\n      // TODO: Square SDK統合（現在はデモ）\n      // const { Client, Environment } = require('square');\n      // const client = new Client({\n      //   accessToken: squareAccessToken,\n      //   environment: isProduction ? Environment.Production : Environment.Sandbox\n      // });\n      \n      // const response = await client.paymentsApi.createPayment({\n      //   sourceId: sourceId,\n      //   amountMoney: {\n      //     amount: Math.round(payment.amount),\n      //     currency: 'JPY'\n      //   },\n      //   idempotencyKey: paymentId\n      // });\n\n      // デモ用：決済を完了としてマーク\n      const updatedPayment = await prisma.payment.update({\n        where: { id: paymentId },\n        data: {\n          paymentStatus: 'COMPLETED',\n          transactionId: `demo_${sourceId.substring(0, 16)}`,\n          paidAt: new Date(),\n          metadata: JSON.stringify({\n            sourceId,\n            environment: isProduction ? 'production' : 'sandbox'\n          })\n        }\n      })\n\n      return NextResponse.json({\n        message: '決済が完了しました',\n        data: {\n          paymentId: updatedPayment.id,\n          status: updatedPayment.paymentStatus,\n          amount: updatedPayment.amount\n        }\n      })\n    }\n\n    return NextResponse.json({ error: '未対応の決済方法です' }, { status: 400 })\n\n  } catch (error) {\n    console.error('Payment completion error:', error)\n    return NextResponse.json({ \n      error: '決済処理に失敗しました',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 })\n  }\n}\n","size_bytes":3289},"src/app/dashboard/services/distance-calculator/page.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { MapPin, Navigation, Clock, TrendingUp, Route } from 'lucide-react'\n\nexport default function DistanceCalculatorPage() {\n  const [origin, setOrigin] = useState('')\n  const [destination, setDestination] = useState('')\n  const [calculatedDistance, setCalculatedDistance] = useState<number | null>(null)\n  const [estimatedTime, setEstimatedTime] = useState<number | null>(null)\n\n  const prefectures = [\n    '北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県',\n    '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',\n    '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県',\n    '静岡県', '愛知県', '三重県', '滋賀県', '京都府', '大阪府', '兵庫県',\n    '奈良県', '和歌山県', '鳥取県', '島根県', '岡山県', '広島県', '山口県',\n    '徳島県', '香川県', '愛媛県', '高知県', '福岡県', '佐賀県', '長崎県',\n    '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'\n  ]\n\n  const calculateDistance = () => {\n    if (!origin || !destination) {\n      alert('出発地と到着地を選択してください')\n      return\n    }\n\n    if (origin === destination) {\n      alert('出発地と到着地が同じです')\n      return\n    }\n\n    const prefectureCoordinates: { [key: string]: { lat: number; lng: number } } = {\n      '北海道': { lat: 43.06, lng: 141.35 }, '青森県': { lat: 40.82, lng: 140.74 },\n      '岩手県': { lat: 39.70, lng: 141.15 }, '宮城県': { lat: 38.27, lng: 140.87 },\n      '秋田県': { lat: 39.72, lng: 140.10 }, '山形県': { lat: 38.24, lng: 140.36 },\n      '福島県': { lat: 37.75, lng: 140.47 }, '茨城県': { lat: 36.34, lng: 140.45 },\n      '栃木県': { lat: 36.57, lng: 139.88 }, '群馬県': { lat: 36.39, lng: 139.06 },\n      '埼玉県': { lat: 35.86, lng: 139.65 }, '千葉県': { lat: 35.61, lng: 140.12 },\n      '東京都': { lat: 35.69, lng: 139.69 }, '神奈川県': { lat: 35.45, lng: 139.64 },\n      '新潟県': { lat: 37.90, lng: 139.02 }, '富山県': { lat: 36.70, lng: 137.21 },\n      '石川県': { lat: 36.59, lng: 136.63 }, '福井県': { lat: 36.07, lng: 136.22 },\n      '山梨県': { lat: 35.66, lng: 138.57 }, '長野県': { lat: 36.65, lng: 138.18 },\n      '岐阜県': { lat: 35.39, lng: 136.72 }, '静岡県': { lat: 34.98, lng: 138.38 },\n      '愛知県': { lat: 35.18, lng: 136.91 }, '三重県': { lat: 34.73, lng: 136.51 },\n      '滋賀県': { lat: 35.00, lng: 135.87 }, '京都府': { lat: 35.02, lng: 135.76 },\n      '大阪府': { lat: 34.69, lng: 135.50 }, '兵庫県': { lat: 34.69, lng: 135.18 },\n      '奈良県': { lat: 34.69, lng: 135.83 }, '和歌山県': { lat: 34.23, lng: 135.17 },\n      '鳥取県': { lat: 35.50, lng: 134.24 }, '島根県': { lat: 35.47, lng: 133.05 },\n      '岡山県': { lat: 34.66, lng: 133.92 }, '広島県': { lat: 34.40, lng: 132.46 },\n      '山口県': { lat: 34.19, lng: 131.47 }, '徳島県': { lat: 34.07, lng: 134.56 },\n      '香川県': { lat: 34.34, lng: 134.04 }, '愛媛県': { lat: 33.84, lng: 132.77 },\n      '高知県': { lat: 33.56, lng: 133.53 }, '福岡県': { lat: 33.61, lng: 130.42 },\n      '佐賀県': { lat: 33.25, lng: 130.30 }, '長崎県': { lat: 32.75, lng: 129.87 },\n      '熊本県': { lat: 32.79, lng: 130.74 }, '大分県': { lat: 33.24, lng: 131.61 },\n      '宮崎県': { lat: 31.91, lng: 131.42 }, '鹿児島県': { lat: 31.56, lng: 130.56 },\n      '沖縄県': { lat: 26.21, lng: 127.68 }\n    }\n\n    const originCoord = prefectureCoordinates[origin]\n    const destCoord = prefectureCoordinates[destination]\n\n    if (!originCoord || !destCoord) {\n      alert('座標データが見つかりませんでした')\n      return\n    }\n\n    const R = 6371\n    const dLat = (destCoord.lat - originCoord.lat) * Math.PI / 180\n    const dLng = (destCoord.lng - originCoord.lng) * Math.PI / 180\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(originCoord.lat * Math.PI / 180) * Math.cos(destCoord.lat * Math.PI / 180) *\n      Math.sin(dLng/2) * Math.sin(dLng/2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n    const distance = Math.round(R * c * 1.3)\n\n    setCalculatedDistance(distance)\n    setEstimatedTime(Math.round(distance / 60 * 10) / 10)\n  }\n\n  const resetForm = () => {\n    setOrigin('')\n    setDestination('')\n    setCalculatedDistance(null)\n    setEstimatedTime(null)\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">距離計算ツール</h1>\n        <p className=\"text-gray-600\">2地点間の最適ルートと距離を計算します</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <MapPin className=\"h-4 w-4 inline mr-1 text-green-600\" />\n                    出発地\n                  </label>\n                  <select\n                    value={origin}\n                    onChange={(e) => setOrigin(e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">都道府県を選択</option>\n                    {prefectures.map(pref => (\n                      <option key={pref} value={pref}>{pref}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <MapPin className=\"h-4 w-4 inline mr-1 text-red-600\" />\n                    到着地\n                  </label>\n                  <select\n                    value={destination}\n                    onChange={(e) => setDestination(e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">都道府県を選択</option>\n                    {prefectures.map(pref => (\n                      <option key={pref} value={pref}>{pref}</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4\">\n                <button\n                  onClick={calculateDistance}\n                  className=\"flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n                >\n                  <Navigation className=\"h-5 w-5\" />\n                  <span>距離を計算</span>\n                </button>\n                <button\n                  onClick={resetForm}\n                  className=\"px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors\"\n                >\n                  リセット\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg p-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n              <Route className=\"h-5 w-5 mr-2 text-blue-600\" />\n              主要都市間距離の目安\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n              <div className=\"flex justify-between items-center bg-white rounded-lg p-3\">\n                <span className=\"text-gray-700\">東京 ↔ 大阪</span>\n                <span className=\"font-semibold text-blue-600\">約 515km</span>\n              </div>\n              <div className=\"flex justify-between items-center bg-white rounded-lg p-3\">\n                <span className=\"text-gray-700\">東京 ↔ 福岡</span>\n                <span className=\"font-semibold text-blue-600\">約 1,090km</span>\n              </div>\n              <div className=\"flex justify-between items-center bg-white rounded-lg p-3\">\n                <span className=\"text-gray-700\">東京 ↔ 札幌</span>\n                <span className=\"font-semibold text-blue-600\">約 1,150km</span>\n              </div>\n              <div className=\"flex justify-between items-center bg-white rounded-lg p-3\">\n                <span className=\"text-gray-700\">大阪 ↔ 福岡</span>\n                <span className=\"font-semibold text-blue-600\">約 620km</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"lg:col-span-1\">\n          {calculatedDistance !== null ? (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gradient-to-br from-green-500 to-green-600 rounded-lg shadow-lg p-6 text-white\">\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                  <Navigation className=\"h-5 w-5 mr-2\" />\n                  計算結果\n                </h3>\n                <div className=\"bg-white bg-opacity-20 rounded-lg p-4 mb-4\">\n                  <div className=\"text-sm text-green-100 mb-1\">総距離</div>\n                  <div className=\"text-4xl font-bold\">{calculatedDistance}km</div>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-green-100\">出発地</span>\n                    <span className=\"font-medium\">{origin}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-green-100\">到着地</span>\n                    <span className=\"font-medium\">{destination}</span>\n                  </div>\n                  <div className=\"h-px bg-white bg-opacity-20 my-2\"></div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-green-100 flex items-center\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      推定時間\n                    </span>\n                    <span className=\"font-medium\">{estimatedTime}時間</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-purple-900 mb-2 flex items-center text-sm\">\n                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n                  活用のヒント\n                </h4>\n                <ul className=\"text-xs text-purple-700 space-y-1\">\n                  <li>• 平均時速60kmで計算しています</li>\n                  <li>• 実際の所要時間は交通状況により変動します</li>\n                  <li>• 高速道路利用を想定しています</li>\n                  <li>• 料金計算ツールと組み合わせて使用できます</li>\n                </ul>\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-6\">\n              <div className=\"text-center text-gray-500\">\n                <Navigation className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p className=\"text-sm\">出発地と到着地を選択して<br />「距離を計算」ボタンを<br />クリックしてください</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":11888},"src/app/admin/verifications/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { Shield, CheckCircle, XCircle, Clock, FileText, User } from 'lucide-react'\n\ninterface Verification {\n  id: string\n  documentType: string\n  documentNumber?: string\n  status: string\n  submittedAt: string\n  user: {\n    id: string\n    companyName: string\n    email: string\n  }\n}\n\nexport default function AdminVerificationsPage() {\n  const [verifications, setVerifications] = useState<Verification[]>([])\n  const [loading, setLoading] = useState(true)\n  const [isAdmin, setIsAdmin] = useState(false)\n  const [selectedVerification, setSelectedVerification] = useState<Verification | null>(null)\n  const [reviewAction, setReviewAction] = useState<'APPROVED' | 'REJECTED' | null>(null)\n  const [rejectionReason, setRejectionReason] = useState('')\n  const router = useRouter()\n\n  useEffect(() => {\n    const user = localStorage.getItem('user')\n    if (user) {\n      const userData = JSON.parse(user)\n      if (userData.isAdmin) {\n        setIsAdmin(true)\n        fetchAllVerifications()\n      } else {\n        router.push('/dashboard')\n      }\n    } else {\n      router.push('/login')\n    }\n  }, [router])\n\n  const fetchAllVerifications = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/verifications', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        setVerifications(data.verifications)\n      }\n    } catch (error) {\n      console.error('Failed to fetch verifications:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleReview = async () => {\n    if (!selectedVerification || !reviewAction) return\n    if (reviewAction === 'REJECTED' && !rejectionReason) {\n      alert('却下理由を入力してください')\n      return\n    }\n\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch(`/api/verifications/${selectedVerification.id}/review`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          status: reviewAction,\n          rejectionReason: reviewAction === 'REJECTED' ? rejectionReason : null\n        })\n      })\n\n      if (response.ok) {\n        alert(`許可証を${reviewAction === 'APPROVED' ? '承認' : '却下'}しました`)\n        setSelectedVerification(null)\n        setReviewAction(null)\n        setRejectionReason('')\n        fetchAllVerifications()\n      } else {\n        const error = await response.json()\n        alert(error.error || '処理に失敗しました')\n      }\n    } catch (error) {\n      console.error('Review error:', error)\n      alert('処理に失敗しました')\n    }\n  }\n\n  const documentTypes: Record<string, string> = {\n    'BUSINESS_LICENSE': '事業許可証',\n    'TRANSPORT_LICENSE': '一般貨物自動車運送事業許可証',\n    'INSURANCE': '保険証券',\n    'OTHER': 'その他'\n  }\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return <span className=\"px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm flex items-center space-x-1\">\n          <Clock className=\"h-4 w-4\" />\n          <span>審査待ち</span>\n        </span>\n      case 'APPROVED':\n        return <span className=\"px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm flex items-center space-x-1\">\n          <CheckCircle className=\"h-4 w-4\" />\n          <span>承認済み</span>\n        </span>\n      case 'REJECTED':\n        return <span className=\"px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm flex items-center space-x-1\">\n          <XCircle className=\"h-4 w-4\" />\n          <span>却下</span>\n        </span>\n      default:\n        return null\n    }\n  }\n\n  if (!isAdmin) {\n    return null\n  }\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  const pendingVerifications = verifications.filter(v => v.status === 'PENDING')\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 flex items-center space-x-2\">\n              <Shield className=\"h-7 w-7 text-blue-600\" />\n              <span>許可証承認管理</span>\n            </h1>\n            <p className=\"text-gray-600\">ユーザーが提出した許可証を審査・承認します</p>\n          </div>\n          <div className=\"text-sm\">\n            <span className=\"text-gray-600\">審査待ち: </span>\n            <span className=\"text-lg font-bold text-yellow-600\">{pendingVerifications.length}件</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* 審査待ち許可証 */}\n        {pendingVerifications.length > 0 && (\n          <div className=\"bg-white rounded-lg shadow-sm border\">\n            <div className=\"px-6 py-4 border-b border-gray-200 bg-yellow-50\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">審査待ち許可証</h2>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"space-y-4\">\n                {pendingVerifications.map((verification) => (\n                  <div key={verification.id} className=\"border border-yellow-300 bg-yellow-50 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"p-3 bg-yellow-100 rounded-lg\">\n                          <FileText className=\"h-6 w-6 text-yellow-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"text-sm font-semibold text-gray-900\">\n                            {documentTypes[verification.documentType] || verification.documentType}\n                          </h3>\n                          <p className=\"text-xs text-gray-600 flex items-center space-x-2 mt-1\">\n                            <User className=\"h-3 w-3\" />\n                            <span>{verification.user.companyName} ({verification.user.email})</span>\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            許可証番号: {verification.documentNumber || '未入力'}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            提出日: {new Date(verification.submittedAt).toLocaleDateString('ja-JP')}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => {\n                            setSelectedVerification(verification)\n                            setReviewAction('APPROVED')\n                          }}\n                          className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\n                        >\n                          <CheckCircle className=\"h-4 w-4\" />\n                          <span>承認</span>\n                        </button>\n                        <button\n                          onClick={() => {\n                            setSelectedVerification(verification)\n                            setReviewAction('REJECTED')\n                          }}\n                          className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center space-x-2\"\n                        >\n                          <XCircle className=\"h-4 w-4\" />\n                          <span>却下</span>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* すべての許可証 */}\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">すべての許可証</h2>\n          </div>\n          <div className=\"p-6\">\n            {verifications.length === 0 ? (\n              <p className=\"text-gray-500 text-center py-8\">許可証が提出されていません</p>\n            ) : (\n              <div className=\"space-y-4\">\n                {verifications.map((verification) => (\n                  <div key={verification.id} className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`p-2 rounded-lg ${\n                          verification.status === 'APPROVED' ? 'bg-green-100' :\n                          verification.status === 'PENDING' ? 'bg-yellow-100' :\n                          'bg-red-100'\n                        }`}>\n                          <FileText className={`h-5 w-5 ${\n                            verification.status === 'APPROVED' ? 'text-green-600' :\n                            verification.status === 'PENDING' ? 'text-yellow-600' :\n                            'text-red-600'\n                          }`} />\n                        </div>\n                        <div>\n                          <h3 className=\"text-sm font-medium text-gray-900\">\n                            {documentTypes[verification.documentType] || verification.documentType}\n                          </h3>\n                          <p className=\"text-xs text-gray-600\">{verification.user.companyName}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            提出日: {new Date(verification.submittedAt).toLocaleDateString('ja-JP')}\n                          </p>\n                        </div>\n                      </div>\n                      {getStatusBadge(verification.status)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* 確認モーダル */}\n      {selectedVerification && reviewAction && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-bold mb-4\">\n              {reviewAction === 'APPROVED' ? '許可証を承認しますか？' : '許可証を却下しますか？'}\n            </h3>\n            <div className=\"mb-4\">\n              <p className=\"text-sm text-gray-600\">企業名: {selectedVerification.user.companyName}</p>\n              <p className=\"text-sm text-gray-600\">\n                書類: {documentTypes[selectedVerification.documentType]}\n              </p>\n            </div>\n            \n            {reviewAction === 'REJECTED' && (\n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  却下理由（必須）\n                </label>\n                <textarea\n                  value={rejectionReason}\n                  onChange={(e) => setRejectionReason(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  rows={3}\n                  placeholder=\"却下の理由を入力してください\"\n                />\n              </div>\n            )}\n\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => {\n                  setSelectedVerification(null)\n                  setReviewAction(null)\n                  setRejectionReason('')\n                }}\n                className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                キャンセル\n              </button>\n              <button\n                onClick={handleReview}\n                className={`flex-1 px-4 py-2 text-white rounded-lg ${\n                  reviewAction === 'APPROVED' \n                    ? 'bg-green-600 hover:bg-green-700' \n                    : 'bg-red-600 hover:bg-red-700'\n                }`}\n              >\n                {reviewAction === 'APPROVED' ? '承認' : '却下'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </DashboardLayout>\n  )\n}\n","size_bytes":12908},"scripts/create-admin.ts":{"content":"import { PrismaClient } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\n\nconst prisma = new PrismaClient()\n\nasync function createAdmin() {\n  try {\n    const email = 'info@sinjapan.jp'\n    const password = 'Kazuya8008'\n    \n    // パスワードをハッシュ化\n    const hashedPassword = await bcrypt.hash(password, 10)\n    \n    // 既存のアカウントをチェック\n    const existingUser = await prisma.user.findUnique({\n      where: { email }\n    })\n    \n    if (existingUser) {\n      console.log('✅ 管理者アカウントは既に存在します:', email)\n      // 管理者権限を確認・更新\n      if (!existingUser.isAdmin) {\n        await prisma.user.update({\n          where: { email },\n          data: { \n            isAdmin: true,\n            verificationStatus: 'APPROVED'\n          }\n        })\n        console.log('✅ 管理者権限を付与しました')\n      }\n      return\n    }\n    \n    // 管理者アカウントを作成\n    const admin = await prisma.user.create({\n      data: {\n        email,\n        password: hashedPassword,\n        userType: 'SHIPPER',\n        companyName: 'SIN JAPAN',\n        contactPerson: 'Admin',\n        phone: '000-0000-0000',\n        isAdmin: true,\n        verificationStatus: 'APPROVED',\n        trustScore: 5.0\n      }\n    })\n    \n    console.log('✅ 管理者アカウントが作成されました:')\n    console.log('   Email:', admin.email)\n    console.log('   Admin:', admin.isAdmin)\n    console.log('   ID:', admin.id)\n    \n  } catch (error) {\n    console.error('❌ エラーが発生しました:', error)\n    throw error\n  } finally {\n    await prisma.$disconnect()\n  }\n}\n\ncreateAdmin()\n","size_bytes":1674},"src/app/dashboard/services/price-calculator/page.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { Calculator, DollarSign, Truck, Package, MapPin, ArrowRight, TrendingUp } from 'lucide-react'\n\nexport default function PriceCalculatorPage() {\n  const [distance, setDistance] = useState('')\n  const [weight, setWeight] = useState('')\n  const [vehicleType, setVehicleType] = useState('SMALL_TRUCK')\n  const [isExpress, setIsExpress] = useState(false)\n  const [needsHelper, setNeedsHelper] = useState(false)\n  const [needsLiftGate, setNeedsLiftGate] = useState(false)\n  const [calculatedPrice, setCalculatedPrice] = useState<number | null>(null)\n\n  const vehicleTypes = [\n    { value: 'LIGHT_TRUCK', label: '軽トラック', baseRate: 80 },\n    { value: 'SMALL_TRUCK', label: '小型トラック (2t)', baseRate: 120 },\n    { value: 'MEDIUM_TRUCK', label: '中型トラック (4t)', baseRate: 180 },\n    { value: 'LARGE_TRUCK', label: '大型トラック (10t)', baseRate: 280 },\n    { value: 'TRAILER', label: 'トレーラー', baseRate: 350 }\n  ]\n\n  const calculatePrice = () => {\n    const distanceNum = parseFloat(distance)\n    const weightNum = parseFloat(weight)\n\n    if (!distanceNum || !weightNum) {\n      alert('距離と重量を入力してください')\n      return\n    }\n\n    const selectedVehicle = vehicleTypes.find(v => v.value === vehicleType)\n    if (!selectedVehicle) return\n\n    let basePrice = distanceNum * selectedVehicle.baseRate\n    const weightSurcharge = weightNum > 500 ? (weightNum - 500) * 10 : 0\n    const expressFee = isExpress ? basePrice * 0.3 : 0\n    const helperFee = needsHelper ? 5000 : 0\n    const liftGateFee = needsLiftGate ? 3000 : 0\n\n    const totalPrice = Math.round(basePrice + weightSurcharge + expressFee + helperFee + liftGateFee)\n    setCalculatedPrice(totalPrice)\n  }\n\n  const resetForm = () => {\n    setDistance('')\n    setWeight('')\n    setVehicleType('SMALL_TRUCK')\n    setIsExpress(false)\n    setNeedsHelper(false)\n    setNeedsLiftGate(false)\n    setCalculatedPrice(null)\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">料金見積もり計算</h1>\n        <p className=\"text-gray-600\">距離、重量、車両タイプから運賃を自動計算します</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <MapPin className=\"h-4 w-4 inline mr-1\" />\n                    配送距離 (km)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={distance}\n                    onChange={(e) => setDistance(e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"例: 50\"\n                    min=\"0\"\n                    step=\"0.1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Package className=\"h-4 w-4 inline mr-1\" />\n                    荷物重量 (kg)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={weight}\n                    onChange={(e) => setWeight(e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"例: 300\"\n                    min=\"0\"\n                    step=\"1\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  <Truck className=\"h-4 w-4 inline mr-1\" />\n                  車両タイプ\n                </label>\n                <select\n                  value={vehicleType}\n                  onChange={(e) => setVehicleType(e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  {vehicleTypes.map(type => (\n                    <option key={type.value} value={type.value}>\n                      {type.label} (¥{type.baseRate}/km)\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h3 className=\"font-medium text-gray-900\">オプション</h3>\n                <label className=\"flex items-center space-x-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={isExpress}\n                    onChange={(e) => setIsExpress(e.target.checked)}\n                    className=\"w-5 h-5 text-blue-600 rounded focus:ring-blue-500\"\n                  />\n                  <span className=\"text-gray-700\">特急便 (+30%)</span>\n                </label>\n\n                <label className=\"flex items-center space-x-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={needsHelper}\n                    onChange={(e) => setNeedsHelper(e.target.checked)}\n                    className=\"w-5 h-5 text-blue-600 rounded focus:ring-blue-500\"\n                  />\n                  <span className=\"text-gray-700\">作業員付き (+¥5,000)</span>\n                </label>\n\n                <label className=\"flex items-center space-x-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={needsLiftGate}\n                    onChange={(e) => setNeedsLiftGate(e.target.checked)}\n                    className=\"w-5 h-5 text-blue-600 rounded focus:ring-blue-500\"\n                  />\n                  <span className=\"text-gray-700\">リフトゲート (+¥3,000)</span>\n                </label>\n              </div>\n\n              <div className=\"flex space-x-4\">\n                <button\n                  onClick={calculatePrice}\n                  className=\"flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n                >\n                  <Calculator className=\"h-5 w-5\" />\n                  <span>見積もり計算</span>\n                </button>\n                <button\n                  onClick={resetForm}\n                  className=\"px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors\"\n                >\n                  リセット\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"lg:col-span-1\">\n          {calculatedPrice !== null ? (\n            <div className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg shadow-lg p-6 text-white\">\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                <DollarSign className=\"h-5 w-5 mr-2\" />\n                見積もり結果\n              </h3>\n              <div className=\"bg-white bg-opacity-20 rounded-lg p-4 mb-4\">\n                <div className=\"text-sm text-blue-100 mb-1\">合計金額</div>\n                <div className=\"text-4xl font-bold\">¥{calculatedPrice.toLocaleString()}</div>\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-blue-100\">距離</span>\n                  <span>{distance}km</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-blue-100\">重量</span>\n                  <span>{weight}kg</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-blue-100\">車両</span>\n                  <span>{vehicleTypes.find(v => v.value === vehicleType)?.label}</span>\n                </div>\n                {isExpress && (\n                  <div className=\"flex justify-between text-yellow-200\">\n                    <span>特急便</span>\n                    <span>+30%</span>\n                  </div>\n                )}\n                {needsHelper && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-blue-100\">作業員</span>\n                    <span>+¥5,000</span>\n                  </div>\n                )}\n                {needsLiftGate && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-blue-100\">リフトゲート</span>\n                    <span>+¥3,000</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-6\">\n              <div className=\"text-center text-gray-500\">\n                <Calculator className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p className=\"text-sm\">条件を入力して<br />「見積もり計算」ボタンを<br />クリックしてください</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <h4 className=\"font-semibold text-blue-900 mb-2 flex items-center text-sm\">\n              <TrendingUp className=\"h-4 w-4 mr-2\" />\n              料金体系について\n            </h4>\n            <ul className=\"text-xs text-blue-700 space-y-1\">\n              <li>• 基本料金: 距離 × 車両タイプ別単価</li>\n              <li>• 重量500kg超過分: ¥10/kg</li>\n              <li>• 特急便: 基本料金の30%加算</li>\n              <li>• 作業員: ¥5,000/名</li>\n              <li>• リフトゲート: ¥3,000</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":10275},"src/app/admin/payments/page.tsx":{"content":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport DashboardLayout from '@/components/DashboardLayout'\nimport { CreditCard, TrendingUp, Clock, CheckCircle, XCircle } from 'lucide-react'\n\ninterface Payment {\n  id: string\n  amount: number\n  paymentMethod: string\n  paymentStatus: string\n  transactionId: string | null\n  paidAt: string | null\n  createdAt: string\n  user: {\n    id: string\n    companyName: string\n    email: string\n    userType: string\n  }\n}\n\nexport default function AdminPayments() {\n  const router = useRouter()\n  const [payments, setPayments] = useState<Payment[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user')\n    if (userData) {\n      const parsedUser = JSON.parse(userData)\n      if (!parsedUser.isAdmin) {\n        router.push('/dashboard')\n        return\n      }\n    }\n\n    fetchPayments()\n  }, [router])\n\n  const fetchPayments = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/payments', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      })\n\n      if (!response.ok) throw new Error('Failed to fetch payments')\n\n      const data = await response.json()\n      setPayments(data.payments)\n    } catch (error) {\n      console.error('Error fetching payments:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateStatus = async (paymentId: string, newStatus: string) => {\n    try {\n      const token = localStorage.getItem('token')\n      const response = await fetch('/api/admin/payments', {\n        method: 'PATCH',\n        headers: { \n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ paymentId, paymentStatus: newStatus })\n      })\n\n      if (!response.ok) throw new Error('Failed to update payment')\n\n      const data = await response.json()\n      alert(data.message)\n      fetchPayments()\n    } catch (error) {\n      console.error('Error updating payment:', error)\n      alert('ステータスの更新に失敗しました')\n    }\n  }\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-gray-600\">読み込み中...</div>\n        </div>\n      </DashboardLayout>\n    )\n  }\n\n  const totalRevenue = payments\n    .filter(p => p.paymentStatus === 'COMPLETED')\n    .reduce((sum, p) => sum + p.amount, 0)\n\n  const statusCounts = {\n    pending: payments.filter(p => p.paymentStatus === 'PENDING').length,\n    completed: payments.filter(p => p.paymentStatus === 'COMPLETED').length,\n    failed: payments.filter(p => p.paymentStatus === 'FAILED').length\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">決済管理</h1>\n            <p className=\"text-gray-600 mt-1\">全決済の管理とステータス変更</p>\n          </div>\n          <div className=\"px-4 py-2 bg-orange-100 text-orange-800 rounded-lg font-medium\">\n            {payments.length} 件の決済\n          </div>\n        </div>\n\n        {/* サマリーカード */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-sm text-gray-600\">総売上</p>\n              <TrendingUp className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <p className=\"text-3xl font-bold text-gray-900\">¥{totalRevenue.toLocaleString()}</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-sm text-gray-600\">処理中</p>\n              <Clock className=\"w-5 h-5 text-yellow-600\" />\n            </div>\n            <p className=\"text-3xl font-bold text-yellow-600\">{statusCounts.pending}</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-sm text-gray-600\">完了</p>\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <p className=\"text-3xl font-bold text-green-600\">{statusCounts.completed}</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-sm text-gray-600\">失敗</p>\n              <XCircle className=\"w-5 h-5 text-red-600\" />\n            </div>\n            <p className=\"text-3xl font-bold text-red-600\">{statusCounts.failed}</p>\n          </div>\n        </div>\n\n        {/* 決済一覧 */}\n        <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">会社名</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">ユーザータイプ</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">金額</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">支払い方法</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">取引ID</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">ステータス</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">作成日</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">アクション</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {payments.map((payment) => (\n                  <tr key={payment.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{payment.user.companyName}</p>\n                        <p className=\"text-xs text-gray-500\">{payment.user.email}</p>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <span className={`px-2 py-1 text-xs rounded-full ${\n                        payment.user.userType === 'SHIPPER' \n                          ? 'bg-blue-100 text-blue-800' \n                          : 'bg-green-100 text-green-800'\n                      }`}>\n                        {payment.user.userType === 'SHIPPER' ? '荷主' : '運送会社'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <p className=\"text-lg font-bold text-gray-900\">¥{payment.amount.toLocaleString()}</p>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <p className=\"text-sm text-gray-600\">\n                        {payment.paymentMethod === 'bank_transfer' ? '銀行振込' :\n                         payment.paymentMethod === 'card' ? 'カード決済' : '口座振替'}\n                      </p>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <p className=\"text-xs text-gray-500 font-mono\">\n                        {payment.transactionId || '-'}\n                      </p>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <span className={`px-3 py-1 text-xs rounded-full ${\n                        payment.paymentStatus === 'COMPLETED' ? 'bg-green-100 text-green-800' :\n                        payment.paymentStatus === 'PENDING' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {payment.paymentStatus === 'COMPLETED' ? '完了' :\n                         payment.paymentStatus === 'PENDING' ? '処理中' : '失敗'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <p className=\"text-sm text-gray-600\">\n                        {new Date(payment.createdAt).toLocaleDateString('ja-JP')}\n                      </p>\n                      {payment.paidAt && (\n                        <p className=\"text-xs text-gray-400\">\n                          {new Date(payment.paidAt).toLocaleTimeString('ja-JP')}\n                        </p>\n                      )}\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <select\n                        value={payment.paymentStatus}\n                        onChange={(e) => updateStatus(payment.id, e.target.value)}\n                        className=\"text-sm border border-gray-300 rounded-lg px-2 py-1 focus:ring-2 focus:ring-blue-500\"\n                      >\n                        <option value=\"PENDING\">処理中</option>\n                        <option value=\"COMPLETED\">完了</option>\n                        <option value=\"FAILED\">失敗</option>\n                      </select>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {payments.length === 0 && (\n            <div className=\"text-center py-12 text-gray-500\">\n              決済履歴がありません\n            </div>\n          )}\n        </div>\n      </div>\n    </DashboardLayout>\n  )\n}\n","size_bytes":9913},"src/app/api/payments/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyToken } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { amount, paymentMethod } = body\n\n    if (!amount || amount <= 0) {\n      return NextResponse.json({ error: '有効な金額を入力してください' }, { status: 400 })\n    }\n\n    if (!['bank_transfer', 'card', 'direct_debit'].includes(paymentMethod)) {\n      return NextResponse.json({ error: '無効な支払い方法です' }, { status: 400 })\n    }\n\n    // Paymentレコードを作成\n    const payment = await prisma.payment.create({\n      data: {\n        userId: decoded.userId,\n        amount: parseFloat(amount),\n        paymentMethod,\n        paymentStatus: paymentMethod === 'bank_transfer' ? 'PENDING' : 'PENDING',\n        description: `${paymentMethod === 'bank_transfer' ? '銀行振込' : paymentMethod === 'card' ? 'カード決済' : '口座振替'}による支払い`,\n      }\n    })\n\n    // 支払い方法に応じてレスポンスを返す\n    let responseData: any = {\n      paymentId: payment.id,\n      amount: payment.amount,\n      paymentMethod: payment.paymentMethod,\n      status: payment.paymentStatus\n    }\n\n    if (paymentMethod === 'card') {\n      // Square決済URLを生成（実装時はSquare APIを使用）\n      // 現在はダミーURLを返す\n      responseData.paymentUrl = `/api/payments/${payment.id}/square`\n    } else if (paymentMethod === 'direct_debit') {\n      // 会費ペイURLを生成（実装時は会費ペイAPIを使用）\n      // 現在はダミーURLを返す\n      responseData.paymentUrl = `/api/payments/${payment.id}/kaihipay`\n    } else if (paymentMethod === 'bank_transfer') {\n      // 銀行振込の場合は、振込先情報を返す\n      responseData.bankInfo = {\n        bankName: '相愛信用組合',\n        branchName: '本店営業部',\n        accountType: '普通',\n        accountNumber: '0170074',\n        accountHolder: 'ド）シン ジャパン'\n      }\n    }\n\n    return NextResponse.json({\n      message: '決済を開始しました',\n      data: responseData\n    })\n\n  } catch (error) {\n    console.error('Payment creation error:', error)\n    return NextResponse.json({ error: '決済の開始に失敗しました' }, { status: 500 })\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    \n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    // ユーザーの決済履歴を取得\n    const payments = await prisma.payment.findMany({\n      where: {\n        userId: decoded.userId\n      },\n      orderBy: {\n        createdAt: 'desc'\n      },\n      take: 20 // 最新20件を取得\n    })\n\n    return NextResponse.json({\n      data: payments\n    })\n\n  } catch (error) {\n    console.error('Payment fetch error:', error)\n    return NextResponse.json({ error: '決済履歴の取得に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":3665},"src/app/api/admin/shipments/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyAdminToken } from '@/lib/adminAuth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { error, status } = await verifyAdminToken(request)\n    \n    if (error) {\n      return NextResponse.json({ error }, { status })\n    }\n\n    const shipments = await prisma.shipment.findMany({\n      orderBy: { createdAt: 'desc' },\n      include: {\n        shipper: {\n          select: {\n            id: true,\n            companyName: true,\n            email: true\n          }\n        },\n        _count: {\n          select: {\n            offers: true\n          }\n        }\n      }\n    })\n\n    return NextResponse.json({ shipments })\n\n  } catch (error) {\n    console.error('Admin shipments error:', error)\n    return NextResponse.json({ error: '荷物一覧の取得に失敗しました' }, { status: 500 })\n  }\n}\n\nexport async function PATCH(request: NextRequest) {\n  try {\n    const { error, status } = await verifyAdminToken(request)\n    \n    if (error) {\n      return NextResponse.json({ error }, { status })\n    }\n\n    const { shipmentId, status: newStatus } = await request.json()\n\n    if (!shipmentId || !newStatus) {\n      return NextResponse.json({ error: '荷物IDとステータスが必要です' }, { status: 400 })\n    }\n\n    const updatedShipment = await prisma.shipment.update({\n      where: { id: shipmentId },\n      data: { status: newStatus }\n    })\n\n    return NextResponse.json({\n      message: 'ステータスを更新しました',\n      shipment: updatedShipment\n    })\n\n  } catch (error) {\n    console.error('Update shipment error:', error)\n    return NextResponse.json({ error: 'ステータスの更新に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":1829},"src/app/api/verifications/[id]/review/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport { verifyToken } from '@/lib/auth'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '')\n    if (!token) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 })\n    }\n\n    const decoded = await verifyToken(token)\n    if (!decoded) {\n      return NextResponse.json({ error: '無効なトークンです' }, { status: 401 })\n    }\n\n    const admin = await prisma.user.findUnique({\n      where: { id: decoded.userId }\n    })\n\n    if (!admin?.isAdmin) {\n      return NextResponse.json({ error: '管理者権限が必要です' }, { status: 403 })\n    }\n\n    const body = await request.json()\n    const { status, rejectionReason } = body\n\n    if (!['APPROVED', 'REJECTED'].includes(status)) {\n      return NextResponse.json({ error: '無効なステータスです' }, { status: 400 })\n    }\n\n    const verification = await prisma.verification.update({\n      where: { id: params.id },\n      data: {\n        status,\n        rejectionReason: status === 'REJECTED' ? rejectionReason : null,\n        reviewedBy: decoded.userId,\n        reviewedAt: new Date()\n      }\n    })\n\n    if (status === 'APPROVED') {\n      const allUserVerifications = await prisma.verification.findMany({\n        where: { \n          userId: verification.userId,\n          documentType: { in: ['BUSINESS_LICENSE', 'TRANSPORT_LICENSE', 'INSURANCE'] }\n        }\n      })\n\n      const allApproved = allUserVerifications.every(v => v.status === 'APPROVED')\n\n      if (allApproved) {\n        await prisma.user.update({\n          where: { id: verification.userId },\n          data: { verificationStatus: 'APPROVED' }\n        })\n      }\n    }\n\n    return NextResponse.json({ verification })\n  } catch (error) {\n    console.error('Review verification error:', error)\n    return NextResponse.json({ error: '審査に失敗しました' }, { status: 500 })\n  }\n}\n","size_bytes":2118}},"version":2}